'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18034
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18034.
'
Namespace OracleService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="OracleServiceSoap", [Namespace]:="POSstation.OracleWebService")>  _
    Partial Public Class OracleService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private RegistrarVentaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarSaldoTarjetaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RegistrarSaldoTarjetaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SincronizarClienteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarClientePorIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarClientePorNombreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarClientePorContratoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarClientePorPlacaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SincronizarVehiculoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SincronizarIdentificadorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarVehiculoPorIdClienteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarVehiculoPorClienteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarVehiculoPorPlacaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarVehiculoPorContratoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.POSstation.ServerServices.My.MySettings.Default.ServerServices_OracleService_OracleService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event RegistrarVentaCompleted As RegistrarVentaCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarSaldoTarjetaCompleted As RecuperarSaldoTarjetaCompletedEventHandler
        
        '''<remarks/>
        Public Event RegistrarSaldoTarjetaCompleted As RegistrarSaldoTarjetaCompletedEventHandler
        
        '''<remarks/>
        Public Event SincronizarClienteCompleted As SincronizarClienteCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarClientePorIdCompleted As RecuperarClientePorIdCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarClientePorNombreCompleted As RecuperarClientePorNombreCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarClientePorContratoCompleted As RecuperarClientePorContratoCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarClientePorPlacaCompleted As RecuperarClientePorPlacaCompletedEventHandler
        
        '''<remarks/>
        Public Event SincronizarVehiculoCompleted As SincronizarVehiculoCompletedEventHandler
        
        '''<remarks/>
        Public Event SincronizarIdentificadorCompleted As SincronizarIdentificadorCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarVehiculoPorIdClienteCompleted As RecuperarVehiculoPorIdClienteCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarVehiculoPorClienteCompleted As RecuperarVehiculoPorClienteCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarVehiculoPorPlacaCompleted As RecuperarVehiculoPorPlacaCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarVehiculoPorContratoCompleted As RecuperarVehiculoPorContratoCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RegistrarVenta", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegistrarVenta(ByVal estacion As String, ByVal contrato As String, ByVal fecha As Date, ByVal recibo As Integer, ByVal hora As Date, ByVal manguera As Integer, ByVal producto As Integer, ByVal cantidad As Decimal, ByVal precio As Decimal, ByVal total As Decimal, ByVal tipoContrato As String, ByVal surtidor As Integer, ByVal tarjeta As String, ByVal factor As Decimal, ByVal ecopesos As Decimal) As String
            Dim results() As Object = Me.Invoke("RegistrarVenta", New Object() {estacion, contrato, fecha, recibo, hora, manguera, producto, cantidad, precio, total, tipoContrato, surtidor, tarjeta, factor, ecopesos})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RegistrarVentaAsync(ByVal estacion As String, ByVal contrato As String, ByVal fecha As Date, ByVal recibo As Integer, ByVal hora As Date, ByVal manguera As Integer, ByVal producto As Integer, ByVal cantidad As Decimal, ByVal precio As Decimal, ByVal total As Decimal, ByVal tipoContrato As String, ByVal surtidor As Integer, ByVal tarjeta As String, ByVal factor As Decimal, ByVal ecopesos As Decimal)
            Me.RegistrarVentaAsync(estacion, contrato, fecha, recibo, hora, manguera, producto, cantidad, precio, total, tipoContrato, surtidor, tarjeta, factor, ecopesos, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RegistrarVentaAsync( _
                    ByVal estacion As String,  _
                    ByVal contrato As String,  _
                    ByVal fecha As Date,  _
                    ByVal recibo As Integer,  _
                    ByVal hora As Date,  _
                    ByVal manguera As Integer,  _
                    ByVal producto As Integer,  _
                    ByVal cantidad As Decimal,  _
                    ByVal precio As Decimal,  _
                    ByVal total As Decimal,  _
                    ByVal tipoContrato As String,  _
                    ByVal surtidor As Integer,  _
                    ByVal tarjeta As String,  _
                    ByVal factor As Decimal,  _
                    ByVal ecopesos As Decimal,  _
                    ByVal userState As Object)
            If (Me.RegistrarVentaOperationCompleted Is Nothing) Then
                Me.RegistrarVentaOperationCompleted = AddressOf Me.OnRegistrarVentaOperationCompleted
            End If
            Me.InvokeAsync("RegistrarVenta", New Object() {estacion, contrato, fecha, recibo, hora, manguera, producto, cantidad, precio, total, tipoContrato, surtidor, tarjeta, factor, ecopesos}, Me.RegistrarVentaOperationCompleted, userState)
        End Sub
        
        Private Sub OnRegistrarVentaOperationCompleted(ByVal arg As Object)
            If (Not (Me.RegistrarVentaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegistrarVentaCompleted(Me, New RegistrarVentaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RecuperarSaldoTarjeta", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarSaldoTarjeta(ByVal tarjeta As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RecuperarSaldoTarjeta", New Object() {tarjeta})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarSaldoTarjetaAsync(ByVal tarjeta As String)
            Me.RecuperarSaldoTarjetaAsync(tarjeta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarSaldoTarjetaAsync(ByVal tarjeta As String, ByVal userState As Object)
            If (Me.RecuperarSaldoTarjetaOperationCompleted Is Nothing) Then
                Me.RecuperarSaldoTarjetaOperationCompleted = AddressOf Me.OnRecuperarSaldoTarjetaOperationCompleted
            End If
            Me.InvokeAsync("RecuperarSaldoTarjeta", New Object() {tarjeta}, Me.RecuperarSaldoTarjetaOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarSaldoTarjetaOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarSaldoTarjetaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarSaldoTarjetaCompleted(Me, New RecuperarSaldoTarjetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RegistrarSaldoTarjeta", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegistrarSaldoTarjeta(ByVal contrato As String, ByVal tarjeta As String, ByVal ecoPesos As Decimal) As String
            Dim results() As Object = Me.Invoke("RegistrarSaldoTarjeta", New Object() {contrato, tarjeta, ecoPesos})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RegistrarSaldoTarjetaAsync(ByVal contrato As String, ByVal tarjeta As String, ByVal ecoPesos As Decimal)
            Me.RegistrarSaldoTarjetaAsync(contrato, tarjeta, ecoPesos, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RegistrarSaldoTarjetaAsync(ByVal contrato As String, ByVal tarjeta As String, ByVal ecoPesos As Decimal, ByVal userState As Object)
            If (Me.RegistrarSaldoTarjetaOperationCompleted Is Nothing) Then
                Me.RegistrarSaldoTarjetaOperationCompleted = AddressOf Me.OnRegistrarSaldoTarjetaOperationCompleted
            End If
            Me.InvokeAsync("RegistrarSaldoTarjeta", New Object() {contrato, tarjeta, ecoPesos}, Me.RegistrarSaldoTarjetaOperationCompleted, userState)
        End Sub
        
        Private Sub OnRegistrarSaldoTarjetaOperationCompleted(ByVal arg As Object)
            If (Not (Me.RegistrarSaldoTarjetaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegistrarSaldoTarjetaCompleted(Me, New RegistrarSaldoTarjetaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/SincronizarCliente", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SincronizarCliente( _
                    ByVal documento As String,  _
                    ByVal tipoDocumento As String,  _
                    ByVal nombre As String,  _
                    ByVal direccion As String,  _
                    ByVal telefonoCasa As String,  _
                    ByVal telefonoOficina As String,  _
                    ByVal celular As String,  _
                    ByVal fax As String,  _
                    ByVal codigoPostal As String,  _
                    ByVal colonia As String,  _
                    ByVal municipio As String,  _
                    ByVal estado As String,  _
                    ByVal idCliente As String,  _
                    ByVal rfc As String,  _
                    ByVal diasCredito As Integer,  _
                    ByVal fisMor As String,  _
                    ByVal usuario As String,  _
                    ByVal titular As String) As String
            Dim results() As Object = Me.Invoke("SincronizarCliente", New Object() {documento, tipoDocumento, nombre, direccion, telefonoCasa, telefonoOficina, celular, fax, codigoPostal, colonia, municipio, estado, idCliente, rfc, diasCredito, fisMor, usuario, titular})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SincronizarClienteAsync( _
                    ByVal documento As String,  _
                    ByVal tipoDocumento As String,  _
                    ByVal nombre As String,  _
                    ByVal direccion As String,  _
                    ByVal telefonoCasa As String,  _
                    ByVal telefonoOficina As String,  _
                    ByVal celular As String,  _
                    ByVal fax As String,  _
                    ByVal codigoPostal As String,  _
                    ByVal colonia As String,  _
                    ByVal municipio As String,  _
                    ByVal estado As String,  _
                    ByVal idCliente As String,  _
                    ByVal rfc As String,  _
                    ByVal diasCredito As Integer,  _
                    ByVal fisMor As String,  _
                    ByVal usuario As String,  _
                    ByVal titular As String)
            Me.SincronizarClienteAsync(documento, tipoDocumento, nombre, direccion, telefonoCasa, telefonoOficina, celular, fax, codigoPostal, colonia, municipio, estado, idCliente, rfc, diasCredito, fisMor, usuario, titular, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SincronizarClienteAsync( _
                    ByVal documento As String,  _
                    ByVal tipoDocumento As String,  _
                    ByVal nombre As String,  _
                    ByVal direccion As String,  _
                    ByVal telefonoCasa As String,  _
                    ByVal telefonoOficina As String,  _
                    ByVal celular As String,  _
                    ByVal fax As String,  _
                    ByVal codigoPostal As String,  _
                    ByVal colonia As String,  _
                    ByVal municipio As String,  _
                    ByVal estado As String,  _
                    ByVal idCliente As String,  _
                    ByVal rfc As String,  _
                    ByVal diasCredito As Integer,  _
                    ByVal fisMor As String,  _
                    ByVal usuario As String,  _
                    ByVal titular As String,  _
                    ByVal userState As Object)
            If (Me.SincronizarClienteOperationCompleted Is Nothing) Then
                Me.SincronizarClienteOperationCompleted = AddressOf Me.OnSincronizarClienteOperationCompleted
            End If
            Me.InvokeAsync("SincronizarCliente", New Object() {documento, tipoDocumento, nombre, direccion, telefonoCasa, telefonoOficina, celular, fax, codigoPostal, colonia, municipio, estado, idCliente, rfc, diasCredito, fisMor, usuario, titular}, Me.SincronizarClienteOperationCompleted, userState)
        End Sub
        
        Private Sub OnSincronizarClienteOperationCompleted(ByVal arg As Object)
            If (Not (Me.SincronizarClienteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SincronizarClienteCompleted(Me, New SincronizarClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RecuperarClientePorId", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarClientePorId(ByVal cliente As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RecuperarClientePorId", New Object() {cliente})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarClientePorIdAsync(ByVal cliente As String)
            Me.RecuperarClientePorIdAsync(cliente, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarClientePorIdAsync(ByVal cliente As String, ByVal userState As Object)
            If (Me.RecuperarClientePorIdOperationCompleted Is Nothing) Then
                Me.RecuperarClientePorIdOperationCompleted = AddressOf Me.OnRecuperarClientePorIdOperationCompleted
            End If
            Me.InvokeAsync("RecuperarClientePorId", New Object() {cliente}, Me.RecuperarClientePorIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarClientePorIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarClientePorIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarClientePorIdCompleted(Me, New RecuperarClientePorIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RecuperarClientePorNombre", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarClientePorNombre(ByVal nombre As String, ByVal ciudad As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RecuperarClientePorNombre", New Object() {nombre, ciudad})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarClientePorNombreAsync(ByVal nombre As String, ByVal ciudad As String)
            Me.RecuperarClientePorNombreAsync(nombre, ciudad, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarClientePorNombreAsync(ByVal nombre As String, ByVal ciudad As String, ByVal userState As Object)
            If (Me.RecuperarClientePorNombreOperationCompleted Is Nothing) Then
                Me.RecuperarClientePorNombreOperationCompleted = AddressOf Me.OnRecuperarClientePorNombreOperationCompleted
            End If
            Me.InvokeAsync("RecuperarClientePorNombre", New Object() {nombre, ciudad}, Me.RecuperarClientePorNombreOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarClientePorNombreOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarClientePorNombreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarClientePorNombreCompleted(Me, New RecuperarClientePorNombreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RecuperarClientePorContrato", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarClientePorContrato(ByVal contrato As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RecuperarClientePorContrato", New Object() {contrato})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarClientePorContratoAsync(ByVal contrato As String)
            Me.RecuperarClientePorContratoAsync(contrato, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarClientePorContratoAsync(ByVal contrato As String, ByVal userState As Object)
            If (Me.RecuperarClientePorContratoOperationCompleted Is Nothing) Then
                Me.RecuperarClientePorContratoOperationCompleted = AddressOf Me.OnRecuperarClientePorContratoOperationCompleted
            End If
            Me.InvokeAsync("RecuperarClientePorContrato", New Object() {contrato}, Me.RecuperarClientePorContratoOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarClientePorContratoOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarClientePorContratoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarClientePorContratoCompleted(Me, New RecuperarClientePorContratoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RecuperarClientePorPlaca", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarClientePorPlaca(ByVal placa As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RecuperarClientePorPlaca", New Object() {placa})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarClientePorPlacaAsync(ByVal placa As String)
            Me.RecuperarClientePorPlacaAsync(placa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarClientePorPlacaAsync(ByVal placa As String, ByVal userState As Object)
            If (Me.RecuperarClientePorPlacaOperationCompleted Is Nothing) Then
                Me.RecuperarClientePorPlacaOperationCompleted = AddressOf Me.OnRecuperarClientePorPlacaOperationCompleted
            End If
            Me.InvokeAsync("RecuperarClientePorPlaca", New Object() {placa}, Me.RecuperarClientePorPlacaOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarClientePorPlacaOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarClientePorPlacaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarClientePorPlacaCompleted(Me, New RecuperarClientePorPlacaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/SincronizarVehiculo", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SincronizarVehiculo( _
                    ByVal placa As String,  _
                    ByVal carroceria As String,  _
                    ByVal marca As String,  _
                    ByVal modelo As String,  _
                    ByVal serie As String,  _
                    ByVal motor As String,  _
                    ByVal ruta As String,  _
                    ByVal estacion As String,  _
                    ByVal fechaContrato As Date,  _
                    ByVal plan As String,  _
                    ByVal cilindros As Integer,  _
                    ByVal status As String,  _
                    ByVal porcentajeRecaudo As Decimal,  _
                    ByVal contrato As String,  _
                    ByVal idVehiculo As Integer,  _
                    ByVal cliente As String,  _
                    ByVal fechaProximoMant As Date) As String
            Dim results() As Object = Me.Invoke("SincronizarVehiculo", New Object() {placa, carroceria, marca, modelo, serie, motor, ruta, estacion, fechaContrato, plan, cilindros, status, porcentajeRecaudo, contrato, idVehiculo, cliente, fechaProximoMant})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SincronizarVehiculoAsync( _
                    ByVal placa As String,  _
                    ByVal carroceria As String,  _
                    ByVal marca As String,  _
                    ByVal modelo As String,  _
                    ByVal serie As String,  _
                    ByVal motor As String,  _
                    ByVal ruta As String,  _
                    ByVal estacion As String,  _
                    ByVal fechaContrato As Date,  _
                    ByVal plan As String,  _
                    ByVal cilindros As Integer,  _
                    ByVal status As String,  _
                    ByVal porcentajeRecaudo As Decimal,  _
                    ByVal contrato As String,  _
                    ByVal idVehiculo As Integer,  _
                    ByVal cliente As String,  _
                    ByVal fechaProximoMant As Date)
            Me.SincronizarVehiculoAsync(placa, carroceria, marca, modelo, serie, motor, ruta, estacion, fechaContrato, plan, cilindros, status, porcentajeRecaudo, contrato, idVehiculo, cliente, fechaProximoMant, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SincronizarVehiculoAsync( _
                    ByVal placa As String,  _
                    ByVal carroceria As String,  _
                    ByVal marca As String,  _
                    ByVal modelo As String,  _
                    ByVal serie As String,  _
                    ByVal motor As String,  _
                    ByVal ruta As String,  _
                    ByVal estacion As String,  _
                    ByVal fechaContrato As Date,  _
                    ByVal plan As String,  _
                    ByVal cilindros As Integer,  _
                    ByVal status As String,  _
                    ByVal porcentajeRecaudo As Decimal,  _
                    ByVal contrato As String,  _
                    ByVal idVehiculo As Integer,  _
                    ByVal cliente As String,  _
                    ByVal fechaProximoMant As Date,  _
                    ByVal userState As Object)
            If (Me.SincronizarVehiculoOperationCompleted Is Nothing) Then
                Me.SincronizarVehiculoOperationCompleted = AddressOf Me.OnSincronizarVehiculoOperationCompleted
            End If
            Me.InvokeAsync("SincronizarVehiculo", New Object() {placa, carroceria, marca, modelo, serie, motor, ruta, estacion, fechaContrato, plan, cilindros, status, porcentajeRecaudo, contrato, idVehiculo, cliente, fechaProximoMant}, Me.SincronizarVehiculoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSincronizarVehiculoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SincronizarVehiculoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SincronizarVehiculoCompleted(Me, New SincronizarVehiculoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/SincronizarIdentificador", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SincronizarIdentificador(ByVal idIdentificador As Integer, ByVal rom As String, ByVal tipoIdentificador As Integer, ByVal estado As Boolean, ByVal contrato As String) As String
            Dim results() As Object = Me.Invoke("SincronizarIdentificador", New Object() {idIdentificador, rom, tipoIdentificador, estado, contrato})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SincronizarIdentificadorAsync(ByVal idIdentificador As Integer, ByVal rom As String, ByVal tipoIdentificador As Integer, ByVal estado As Boolean, ByVal contrato As String)
            Me.SincronizarIdentificadorAsync(idIdentificador, rom, tipoIdentificador, estado, contrato, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SincronizarIdentificadorAsync(ByVal idIdentificador As Integer, ByVal rom As String, ByVal tipoIdentificador As Integer, ByVal estado As Boolean, ByVal contrato As String, ByVal userState As Object)
            If (Me.SincronizarIdentificadorOperationCompleted Is Nothing) Then
                Me.SincronizarIdentificadorOperationCompleted = AddressOf Me.OnSincronizarIdentificadorOperationCompleted
            End If
            Me.InvokeAsync("SincronizarIdentificador", New Object() {idIdentificador, rom, tipoIdentificador, estado, contrato}, Me.SincronizarIdentificadorOperationCompleted, userState)
        End Sub
        
        Private Sub OnSincronizarIdentificadorOperationCompleted(ByVal arg As Object)
            If (Not (Me.SincronizarIdentificadorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SincronizarIdentificadorCompleted(Me, New SincronizarIdentificadorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RecuperarVehiculoPorIdCliente", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarVehiculoPorIdCliente(ByVal cliente As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RecuperarVehiculoPorIdCliente", New Object() {cliente})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarVehiculoPorIdClienteAsync(ByVal cliente As String)
            Me.RecuperarVehiculoPorIdClienteAsync(cliente, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarVehiculoPorIdClienteAsync(ByVal cliente As String, ByVal userState As Object)
            If (Me.RecuperarVehiculoPorIdClienteOperationCompleted Is Nothing) Then
                Me.RecuperarVehiculoPorIdClienteOperationCompleted = AddressOf Me.OnRecuperarVehiculoPorIdClienteOperationCompleted
            End If
            Me.InvokeAsync("RecuperarVehiculoPorIdCliente", New Object() {cliente}, Me.RecuperarVehiculoPorIdClienteOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarVehiculoPorIdClienteOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarVehiculoPorIdClienteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarVehiculoPorIdClienteCompleted(Me, New RecuperarVehiculoPorIdClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RecuperarVehiculoPorCliente", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarVehiculoPorCliente(ByVal nombre As String, ByVal ciudad As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RecuperarVehiculoPorCliente", New Object() {nombre, ciudad})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarVehiculoPorClienteAsync(ByVal nombre As String, ByVal ciudad As String)
            Me.RecuperarVehiculoPorClienteAsync(nombre, ciudad, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarVehiculoPorClienteAsync(ByVal nombre As String, ByVal ciudad As String, ByVal userState As Object)
            If (Me.RecuperarVehiculoPorClienteOperationCompleted Is Nothing) Then
                Me.RecuperarVehiculoPorClienteOperationCompleted = AddressOf Me.OnRecuperarVehiculoPorClienteOperationCompleted
            End If
            Me.InvokeAsync("RecuperarVehiculoPorCliente", New Object() {nombre, ciudad}, Me.RecuperarVehiculoPorClienteOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarVehiculoPorClienteOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarVehiculoPorClienteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarVehiculoPorClienteCompleted(Me, New RecuperarVehiculoPorClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RecuperarVehiculoPorPlaca", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarVehiculoPorPlaca(ByVal placa As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RecuperarVehiculoPorPlaca", New Object() {placa})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarVehiculoPorPlacaAsync(ByVal placa As String)
            Me.RecuperarVehiculoPorPlacaAsync(placa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarVehiculoPorPlacaAsync(ByVal placa As String, ByVal userState As Object)
            If (Me.RecuperarVehiculoPorPlacaOperationCompleted Is Nothing) Then
                Me.RecuperarVehiculoPorPlacaOperationCompleted = AddressOf Me.OnRecuperarVehiculoPorPlacaOperationCompleted
            End If
            Me.InvokeAsync("RecuperarVehiculoPorPlaca", New Object() {placa}, Me.RecuperarVehiculoPorPlacaOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarVehiculoPorPlacaOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarVehiculoPorPlacaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarVehiculoPorPlacaCompleted(Me, New RecuperarVehiculoPorPlacaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("POSstation.OracleWebService/RecuperarVehiculoPorContrato", RequestNamespace:="POSstation.OracleWebService", ResponseNamespace:="POSstation.OracleWebService", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarVehiculoPorContrato(ByVal contrato As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("RecuperarVehiculoPorContrato", New Object() {contrato})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarVehiculoPorContratoAsync(ByVal contrato As String)
            Me.RecuperarVehiculoPorContratoAsync(contrato, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarVehiculoPorContratoAsync(ByVal contrato As String, ByVal userState As Object)
            If (Me.RecuperarVehiculoPorContratoOperationCompleted Is Nothing) Then
                Me.RecuperarVehiculoPorContratoOperationCompleted = AddressOf Me.OnRecuperarVehiculoPorContratoOperationCompleted
            End If
            Me.InvokeAsync("RecuperarVehiculoPorContrato", New Object() {contrato}, Me.RecuperarVehiculoPorContratoOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarVehiculoPorContratoOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarVehiculoPorContratoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarVehiculoPorContratoCompleted(Me, New RecuperarVehiculoPorContratoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RegistrarVentaCompletedEventHandler(ByVal sender As Object, ByVal e As RegistrarVentaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegistrarVentaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecuperarSaldoTarjetaCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarSaldoTarjetaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarSaldoTarjetaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RegistrarSaldoTarjetaCompletedEventHandler(ByVal sender As Object, ByVal e As RegistrarSaldoTarjetaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegistrarSaldoTarjetaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SincronizarClienteCompletedEventHandler(ByVal sender As Object, ByVal e As SincronizarClienteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SincronizarClienteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecuperarClientePorIdCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarClientePorIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarClientePorIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecuperarClientePorNombreCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarClientePorNombreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarClientePorNombreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecuperarClientePorContratoCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarClientePorContratoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarClientePorContratoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecuperarClientePorPlacaCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarClientePorPlacaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarClientePorPlacaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SincronizarVehiculoCompletedEventHandler(ByVal sender As Object, ByVal e As SincronizarVehiculoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SincronizarVehiculoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SincronizarIdentificadorCompletedEventHandler(ByVal sender As Object, ByVal e As SincronizarIdentificadorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SincronizarIdentificadorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecuperarVehiculoPorIdClienteCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarVehiculoPorIdClienteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarVehiculoPorIdClienteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecuperarVehiculoPorClienteCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarVehiculoPorClienteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarVehiculoPorClienteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecuperarVehiculoPorPlacaCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarVehiculoPorPlacaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarVehiculoPorPlacaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub RecuperarVehiculoPorContratoCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarVehiculoPorContratoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarVehiculoPorContratoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
