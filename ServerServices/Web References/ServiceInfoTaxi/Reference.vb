'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
'
Namespace ServiceInfoTaxi
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://www.infotaxi.co/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ConsultaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PagarOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidarUsuarioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IngresarUsuarioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CambiarContrasenaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidarValeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProgramarServicioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.POSstation.ServerServices.My.MySettings.Default.ServerServices_ServiceInfoTaxi_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ConsultaCompleted As ConsultaCompletedEventHandler
        
        '''<remarks/>
        Public Event PagarCompleted As PagarCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidarUsuarioCompleted As ValidarUsuarioCompletedEventHandler
        
        '''<remarks/>
        Public Event IngresarUsuarioCompleted As IngresarUsuarioCompletedEventHandler
        
        '''<remarks/>
        Public Event CambiarContrasenaCompleted As CambiarContrasenaCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidarValeCompleted As ValidarValeCompletedEventHandler
        
        '''<remarks/>
        Public Event ProgramarServicioCompleted As ProgramarServicioCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.infotaxi.co/Consulta", RequestNamespace:="http://www.infotaxi.co/", ResponseNamespace:="http://www.infotaxi.co/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Consulta(ByVal placa As String, ByVal movil As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("Consulta", New Object() {placa, movil})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultaAsync(ByVal placa As String, ByVal movil As String)
            Me.ConsultaAsync(placa, movil, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultaAsync(ByVal placa As String, ByVal movil As String, ByVal userState As Object)
            If (Me.ConsultaOperationCompleted Is Nothing) Then
                Me.ConsultaOperationCompleted = AddressOf Me.OnConsultaOperationCompleted
            End If
            Me.InvokeAsync("Consulta", New Object() {placa, movil}, Me.ConsultaOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultaCompleted(Me, New ConsultaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.infotaxi.co/Pagar", RequestNamespace:="http://www.infotaxi.co/", ResponseNamespace:="http://www.infotaxi.co/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Pagar(ByVal placa As String, ByVal movil As String, ByVal idRecibo As String, ByVal idConcepto As Integer, ByVal cantidadPeriodos As Integer, ByVal total As Integer, ByVal infoEstacionOperador As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("Pagar", New Object() {placa, movil, idRecibo, idConcepto, cantidadPeriodos, total, infoEstacionOperador})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PagarAsync(ByVal placa As String, ByVal movil As String, ByVal idRecibo As String, ByVal idConcepto As Integer, ByVal cantidadPeriodos As Integer, ByVal total As Integer, ByVal infoEstacionOperador As String)
            Me.PagarAsync(placa, movil, idRecibo, idConcepto, cantidadPeriodos, total, infoEstacionOperador, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PagarAsync(ByVal placa As String, ByVal movil As String, ByVal idRecibo As String, ByVal idConcepto As Integer, ByVal cantidadPeriodos As Integer, ByVal total As Integer, ByVal infoEstacionOperador As String, ByVal userState As Object)
            If (Me.PagarOperationCompleted Is Nothing) Then
                Me.PagarOperationCompleted = AddressOf Me.OnPagarOperationCompleted
            End If
            Me.InvokeAsync("Pagar", New Object() {placa, movil, idRecibo, idConcepto, cantidadPeriodos, total, infoEstacionOperador}, Me.PagarOperationCompleted, userState)
        End Sub
        
        Private Sub OnPagarOperationCompleted(ByVal arg As Object)
            If (Not (Me.PagarCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PagarCompleted(Me, New PagarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.infotaxi.co/ValidarUsuario", RequestNamespace:="http://www.infotaxi.co/", ResponseNamespace:="http://www.infotaxi.co/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidarUsuario(ByVal login As String, ByVal md5Password As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidarUsuario", New Object() {login, md5Password})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidarUsuarioAsync(ByVal login As String, ByVal md5Password As String)
            Me.ValidarUsuarioAsync(login, md5Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidarUsuarioAsync(ByVal login As String, ByVal md5Password As String, ByVal userState As Object)
            If (Me.ValidarUsuarioOperationCompleted Is Nothing) Then
                Me.ValidarUsuarioOperationCompleted = AddressOf Me.OnValidarUsuarioOperationCompleted
            End If
            Me.InvokeAsync("ValidarUsuario", New Object() {login, md5Password}, Me.ValidarUsuarioOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidarUsuarioOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidarUsuarioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidarUsuarioCompleted(Me, New ValidarUsuarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.infotaxi.co/IngresarUsuario", RequestNamespace:="http://www.infotaxi.co/", ResponseNamespace:="http://www.infotaxi.co/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IngresarUsuario(ByVal login As String, ByVal md5Password As String, ByVal contactoNombre As String, ByVal numeroTelefonoFijo As String, ByVal numeroCelular As String, ByVal direccion As String, ByVal ciudad As String, ByVal barrio As String, ByVal correoElectronico As String) As Boolean
            Dim results() As Object = Me.Invoke("IngresarUsuario", New Object() {login, md5Password, contactoNombre, numeroTelefonoFijo, numeroCelular, direccion, ciudad, barrio, correoElectronico})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IngresarUsuarioAsync(ByVal login As String, ByVal md5Password As String, ByVal contactoNombre As String, ByVal numeroTelefonoFijo As String, ByVal numeroCelular As String, ByVal direccion As String, ByVal ciudad As String, ByVal barrio As String, ByVal correoElectronico As String)
            Me.IngresarUsuarioAsync(login, md5Password, contactoNombre, numeroTelefonoFijo, numeroCelular, direccion, ciudad, barrio, correoElectronico, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IngresarUsuarioAsync(ByVal login As String, ByVal md5Password As String, ByVal contactoNombre As String, ByVal numeroTelefonoFijo As String, ByVal numeroCelular As String, ByVal direccion As String, ByVal ciudad As String, ByVal barrio As String, ByVal correoElectronico As String, ByVal userState As Object)
            If (Me.IngresarUsuarioOperationCompleted Is Nothing) Then
                Me.IngresarUsuarioOperationCompleted = AddressOf Me.OnIngresarUsuarioOperationCompleted
            End If
            Me.InvokeAsync("IngresarUsuario", New Object() {login, md5Password, contactoNombre, numeroTelefonoFijo, numeroCelular, direccion, ciudad, barrio, correoElectronico}, Me.IngresarUsuarioOperationCompleted, userState)
        End Sub
        
        Private Sub OnIngresarUsuarioOperationCompleted(ByVal arg As Object)
            If (Not (Me.IngresarUsuarioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IngresarUsuarioCompleted(Me, New IngresarUsuarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.infotaxi.co/CambiarContrasena", RequestNamespace:="http://www.infotaxi.co/", ResponseNamespace:="http://www.infotaxi.co/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CambiarContrasena(ByVal login As String, ByVal md5AnteriorPassword As String, ByVal md5NuevoPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("CambiarContrasena", New Object() {login, md5AnteriorPassword, md5NuevoPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CambiarContrasenaAsync(ByVal login As String, ByVal md5AnteriorPassword As String, ByVal md5NuevoPassword As String)
            Me.CambiarContrasenaAsync(login, md5AnteriorPassword, md5NuevoPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CambiarContrasenaAsync(ByVal login As String, ByVal md5AnteriorPassword As String, ByVal md5NuevoPassword As String, ByVal userState As Object)
            If (Me.CambiarContrasenaOperationCompleted Is Nothing) Then
                Me.CambiarContrasenaOperationCompleted = AddressOf Me.OnCambiarContrasenaOperationCompleted
            End If
            Me.InvokeAsync("CambiarContrasena", New Object() {login, md5AnteriorPassword, md5NuevoPassword}, Me.CambiarContrasenaOperationCompleted, userState)
        End Sub
        
        Private Sub OnCambiarContrasenaOperationCompleted(ByVal arg As Object)
            If (Not (Me.CambiarContrasenaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CambiarContrasenaCompleted(Me, New CambiarContrasenaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.infotaxi.co/ValidarVale", RequestNamespace:="http://www.infotaxi.co/", ResponseNamespace:="http://www.infotaxi.co/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidarVale(ByVal codigoCuenta As Integer, ByVal numeroVale As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidarVale", New Object() {codigoCuenta, numeroVale})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidarValeAsync(ByVal codigoCuenta As Integer, ByVal numeroVale As String)
            Me.ValidarValeAsync(codigoCuenta, numeroVale, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidarValeAsync(ByVal codigoCuenta As Integer, ByVal numeroVale As String, ByVal userState As Object)
            If (Me.ValidarValeOperationCompleted Is Nothing) Then
                Me.ValidarValeOperationCompleted = AddressOf Me.OnValidarValeOperationCompleted
            End If
            Me.InvokeAsync("ValidarVale", New Object() {codigoCuenta, numeroVale}, Me.ValidarValeOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidarValeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidarValeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidarValeCompleted(Me, New ValidarValeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.infotaxi.co/ProgramarServicio", RequestNamespace:="http://www.infotaxi.co/", ResponseNamespace:="http://www.infotaxi.co/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProgramarServicio( _
                    ByVal login As String,  _
                    ByVal numeroTelefono As String,  _
                    ByVal nombreContacto As String,  _
                    ByVal direccionRecogida As String,  _
                    ByVal tipoServicio As Integer,  _
                    ByVal tipoMovil As Integer,  _
                    ByVal direccionDestino1 As String,  _
                    ByVal direccionDestino2 As String,  _
                    ByVal fechaHoraDespertador As Date,  _
                    ByVal fechaHoraRecogida As Date,  _
                    ByVal conVale As Boolean,  _
                    ByVal codigoCuenta As Integer,  _
                    ByVal centroCosto As String,  _
                    ByVal direccionDestino As String,  _
                    ByVal numeroVale As String,  _
                    ByVal observaciones As String) As Boolean
            Dim results() As Object = Me.Invoke("ProgramarServicio", New Object() {login, numeroTelefono, nombreContacto, direccionRecogida, tipoServicio, tipoMovil, direccionDestino1, direccionDestino2, fechaHoraDespertador, fechaHoraRecogida, conVale, codigoCuenta, centroCosto, direccionDestino, numeroVale, observaciones})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProgramarServicioAsync( _
                    ByVal login As String,  _
                    ByVal numeroTelefono As String,  _
                    ByVal nombreContacto As String,  _
                    ByVal direccionRecogida As String,  _
                    ByVal tipoServicio As Integer,  _
                    ByVal tipoMovil As Integer,  _
                    ByVal direccionDestino1 As String,  _
                    ByVal direccionDestino2 As String,  _
                    ByVal fechaHoraDespertador As Date,  _
                    ByVal fechaHoraRecogida As Date,  _
                    ByVal conVale As Boolean,  _
                    ByVal codigoCuenta As Integer,  _
                    ByVal centroCosto As String,  _
                    ByVal direccionDestino As String,  _
                    ByVal numeroVale As String,  _
                    ByVal observaciones As String)
            Me.ProgramarServicioAsync(login, numeroTelefono, nombreContacto, direccionRecogida, tipoServicio, tipoMovil, direccionDestino1, direccionDestino2, fechaHoraDespertador, fechaHoraRecogida, conVale, codigoCuenta, centroCosto, direccionDestino, numeroVale, observaciones, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProgramarServicioAsync( _
                    ByVal login As String,  _
                    ByVal numeroTelefono As String,  _
                    ByVal nombreContacto As String,  _
                    ByVal direccionRecogida As String,  _
                    ByVal tipoServicio As Integer,  _
                    ByVal tipoMovil As Integer,  _
                    ByVal direccionDestino1 As String,  _
                    ByVal direccionDestino2 As String,  _
                    ByVal fechaHoraDespertador As Date,  _
                    ByVal fechaHoraRecogida As Date,  _
                    ByVal conVale As Boolean,  _
                    ByVal codigoCuenta As Integer,  _
                    ByVal centroCosto As String,  _
                    ByVal direccionDestino As String,  _
                    ByVal numeroVale As String,  _
                    ByVal observaciones As String,  _
                    ByVal userState As Object)
            If (Me.ProgramarServicioOperationCompleted Is Nothing) Then
                Me.ProgramarServicioOperationCompleted = AddressOf Me.OnProgramarServicioOperationCompleted
            End If
            Me.InvokeAsync("ProgramarServicio", New Object() {login, numeroTelefono, nombreContacto, direccionRecogida, tipoServicio, tipoMovil, direccionDestino1, direccionDestino2, fechaHoraDespertador, fechaHoraRecogida, conVale, codigoCuenta, centroCosto, direccionDestino, numeroVale, observaciones}, Me.ProgramarServicioOperationCompleted, userState)
        End Sub
        
        Private Sub OnProgramarServicioOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProgramarServicioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProgramarServicioCompleted(Me, New ProgramarServicioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")>  _
    Public Delegate Sub ConsultaCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")>  _
    Public Delegate Sub PagarCompletedEventHandler(ByVal sender As Object, ByVal e As PagarCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PagarCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")>  _
    Public Delegate Sub ValidarUsuarioCompletedEventHandler(ByVal sender As Object, ByVal e As ValidarUsuarioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidarUsuarioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")>  _
    Public Delegate Sub IngresarUsuarioCompletedEventHandler(ByVal sender As Object, ByVal e As IngresarUsuarioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IngresarUsuarioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")>  _
    Public Delegate Sub CambiarContrasenaCompletedEventHandler(ByVal sender As Object, ByVal e As CambiarContrasenaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CambiarContrasenaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")>  _
    Public Delegate Sub ValidarValeCompletedEventHandler(ByVal sender As Object, ByVal e As ValidarValeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidarValeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")>  _
    Public Delegate Sub ProgramarServicioCompletedEventHandler(ByVal sender As Object, ByVal e As ProgramarServicioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProgramarServicioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
