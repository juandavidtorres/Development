
Imports POSstation.NormaColombiana
Imports POSstation.Fabrica
Imports SICOM
Imports POSstation.AccesoDatos
Imports System.Data.Common
Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports Microsoft.Practices.EnterpriseLibrary.Logging
Imports POSstation.Tmex

Public Class Helper
    ' Public Shared colLecturasPendientes As New Queue(Of String)
    Dim IdsLectores As ArrayList
    Dim ODatos As New SqlServer
    Public Shared PoolRedes As New Dictionary(Of String, Boolean)
    Dim LogFallas As New EstacionException

    Dim LogPropiedades As New PropiedadesExtendidas, LogCategorias As New CategoriasLog

    Public Enum ETipoValidacion
        BaseDatos = 0
        Chip = 1
        Ambas = 2
    End Enum

    Public Enum oAccion
        EsEncabezado = 0
        EsDocumento = 1
        EsFacturacion = 2
        EsComodin = 3
    End Enum

    Public Enum CDC As Integer
        Gazel = 1
        Terpel = 2
    End Enum
    Public Sub AbrirTurnoRecaudo(Usuario As String, Clave As String)
        Try
            ODatos.AbrirTurnoRecaudo(Usuario, Clave)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AbrirTurnoRecaudo", "Usuario: " & Usuario & " Clave: " & Clave, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub

    Public Sub CerrarTurnoRecaudo(IdTurno As String)
        Try
            ODatos.CerrarTurnoRecaudo(IdTurno)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarTurnoRecaudo", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub
    Public Function ValidarTurnoPorEmpleado(ByVal Cedula As String, ByVal Clave As String) As String
        Try
            Return ODatos.ValidarTurnoPorEmpleado(Cedula, Clave)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTurnoPorEmpleado", "Cedula: " & Cedula & " Clave: " & Clave, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Function InsertarRecaudoInfoEmpresa(Movil As String, Periodos As String, Concepto As String, IdTurno As String, ReciboGas As String, Placa As String, Valor As Decimal, RespuestaInfoTaxi As String, MensajeInfoTaxi As String) As String
        Try
            Return ODatos.InsertarRecaudoInfoEmpresa(Movil, Periodos, Concepto, IdTurno, ReciboGas, Placa, Valor, RespuestaInfoTaxi, MensajeInfoTaxi)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRecaudoInfoEmpresa", " Movil: " & Movil, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function



    Public Function ActualizarPagoInfoTaxi(IdRecaudo As String, IdPago As String, RespuestaInfoTaxi As String, MensajeInfoTaxi As String, Anulado As Boolean, Procesado As Boolean, FechaInfoTaxi As String) As String
        Try
            ODatos.ActualizarPagoInfoTaxi(IdRecaudo, IdPago, RespuestaInfoTaxi, MensajeInfoTaxi, Anulado, Procesado, FechaInfoTaxi)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarPagoInfoTaxi", "IdRecaudo: " & IdRecaudo & " IdPago: " & IdPago, "FallaStoredProcedure")
        End Try
    End Function
    Public Sub AsociarTarjetaAVehiculo(numTarjeta As String, placa As String)
        Try
            ODatos.AsociarTarjetaAVehiculo(numTarjeta, placa)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AsociarTarjetaAVehiculo", "", "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub
    Public Function RecuperarRecaudosInfoTaxiPorTurno(IdTurno As Integer) As IDataReader
        Try
            Return ODatos.RecuperarRecaudosInfoTaxiPorTurno(IdTurno)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudosInfoTaxiPorTurno", "", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Function RecuperarVehiculosLocales() As DataTable
        Try
            Return ODatos.RecuperarVehiculosLocales()
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculosLocales", "", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function
    Public Function RecuperarTarjetas() As DataTable
        Try
            Return ODatos.RecuperarTarjetas()
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTarjetas", "", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function


    Public Function GenerarArchivoVentasRP(fechaInicio As String, fechaFin As String) As DataSet
        Try
            Return ODatos.GenerarArchivoVentasRP(fechaInicio, fechaFin)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "GenerarArchivoVentasSN", "", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function


#Region "IslaPuertoFiscal"



    Public Function RecuperarIslasPuertoFiscal() As DataSet
        Try
            Return ODatos.RecuperarIslasPuertoFiscal()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarIslaPuertoFiscal", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarIslaPuertoFiscal", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Sub EliminarIslaPuertoFiscal(ByVal IdIslaPuerto As Int16)
        Try
            ODatos.EliminarIslaPuertoFiscal(IdIslaPuerto)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarIslaPuertoFiscal", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarIslaPuertoFiscal", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Sub


    Public Sub ActualizarIslaPuertoFiscal(ByVal IdIslaPuerto As Int16, ByVal IdIsla As Int16, ByVal Puerto As String)
        Try
            ODatos.ActualizarIslaPuertoFiscal(IdIslaPuerto, IdIsla, Puerto)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarIslaPuertoFiscal", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarIslaPuertoFiscal", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Sub



    Public Sub InsertarIslaPuertoFiscal(ByVal IdIsla As Int16, ByVal Puerto As String)
        Try
            ODatos.InsertarIslaPuertoFiscal(IdIsla, Puerto)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarIslaPuertoFiscal", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarIslaPuertoFiscal", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Sub

#End Region


#Region "Logueo Errores SAUCE Personalizado"
    Public Sub InsertarAutorizacionFallidaLogueo(Cara As String, Manguera As String, Placa As String, Producto As String, Autorizacion As String, Rom As String,
                MensajeError As String, AutorizacionManual As String)
        Try
            ODatos.InsertarAutorizacionFallidaLogueo(Cara, Manguera, Placa, Producto, Autorizacion, Rom, MensajeError, AutorizacionManual)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAutorizacionFallidaLogueo", "-", "FallaStoredProcedure")
        End Try
    End Sub

    Public Sub InsertarCierreTanquesFallidoLogueo(IdTurno As String, InfoTanques As String, MensajeError As String, Usuario As String, InformacionAdicional As String, Rom As String)
        Try
            ODatos.InsertarCierreTanquesFallidoLogueo(IdTurno, InfoTanques, MensajeError, Usuario, InformacionAdicional, Rom)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCierreTanquesFallidoLogueo", "-", "FallaStoredProcedure")
        End Try

    End Sub

    Public Sub InsertarTurnoFallidoLogueo(Empleado As String, Clave As String, Surtidores As String, MensajeError As String, Puerto As String, Descripcion As String)
        Try
            ODatos.InsertarTurnoFallidoLogueo(Empleado, Clave, Surtidores, MensajeError, Puerto, Descripcion)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTurnoFallidoLogueo", "-", "FallaStoredProcedure")
        End Try
    End Sub

    Public Sub InsertarEventosServicioAutorizador(Evento As String, MensajeError As String)
        Try
            ODatos.InsertarEventosServicioAutorizador(Evento, MensajeError)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEventosServicioAutorizador", "-", "FallaStoredProcedure")
        End Try
    End Sub

    Public Sub InsertarCambioFormaPagoFallida(FormasPago As String, Recibo As String, Cara As String, MensajeError As String)
        Try
            ODatos.InsertarCambioFormaPagoFallida(FormasPago, Recibo, Cara, MensajeError)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCambioFormaPagoFallida", "-", "FallaStoredProcedure")
        End Try
    End Sub

    Public Function RecuperarLogeo(Tabla As String, FechaInicial As DateTime, FechaFinal As DateTime, Filtros As String) As DataSet
        Try
            Return ODatos.RecuperarLogeo(Tabla, FechaInicial, FechaFinal, Filtros)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLogeo", "-", "FallaStoredProcedure")
        End Try
    End Function

    Public Function RecuperarColumnas(Tabla As String, Optional Existentes As String = "") As DataSet
        Try
            Return ODatos.RecuperarColumnas(Tabla, Existentes)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarColumnas", "-", "FallaStoredProcedure")
        End Try
    End Function

#End Region

    Public Sub EliminarRedSurtidorPorIdRed(ByVal idRed As Int32)
        Try
            ODatos.EliminarRedSurtidorPorIdRed(idRed)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarRedSurtidorPorIdRed", "idRed: " & idRed, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarRedSurtidorPorIdRed", "idRed: " & idRed, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub


    Public Sub InsertarRedSurtidor(ByVal idProtocolo As Int32, ByVal idPuerto As Int32, ByVal Eco As Boolean, ByVal ip As String, ByVal puertoTcp As String, ByVal IdTipoComunicacion As Integer)
        Try
            ODatos.InsertarRedSurtidor(idProtocolo, idPuerto, Eco, ip, puertoTcp, IdTipoComunicacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRedSurtidor", "IdProtocolo: " & idProtocolo & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRedSurtidor", "IdProtocolo: " & idProtocolo & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub

    Public Sub ActualizarRedSurtidor(ByVal idRed As Int32, ByVal idProtocolo As Int32, ByVal idPuerto As Int32, ByVal Eco As Boolean, ByVal ip As String, ByVal puertoTcp As String, ByVal IdTipoComunicacion As Integer)
        Try
            ODatos.ActualizarRedSurtidor(idRed, idProtocolo, idPuerto, Eco, ip, puertoTcp, IdTipoComunicacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarRedSurtidor", "idRed: " & idRed & " ,idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto & " , Eco: " & Eco & " , Ip: " & ip & " , PuertoTcp: " & puertoTcp & " , idTipoComunicacion: " & IdTipoComunicacion, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarRedSurtidor", "idRed: " & idRed & " ,idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto & " , Eco: " & Eco & " , Ip: " & ip & " , PuertoTcp: " & puertoTcp & " , idTipoComunicacion: " & IdTipoComunicacion, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub

#Region "Bonos fidelizacion"

    Public Sub LiberarBonoEnreserva(ByVal IdRedencion As Integer)

        Try
            ODatos.LiberarBonoEnreserva(IdRedencion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "LiberarBonoEnreserva", "IdRedencion: " & IdRedencion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "LiberarBonoEnreserva", "IdRedencion: " & IdRedencion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ReservarBono(ByVal Recibo As Int64, ByVal IdBono As Integer) As Integer
        Try
            Return ODatos.ReservarBono(Recibo, IdBono)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ReservarBono", "Recibo: " & Recibo & ", IdBono: " & IdBono, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ReservarBono", "Recibo: " & Recibo & ", IdBono: " & IdBono, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarFormaPagoVentaBonoFidelizacionSoyLeal(ByVal recibo As Int64, ByVal valor As Decimal, ByVal nroTarjeta As String, ByVal nroAutorizacion As String, ByVal IdRedencion As Integer)
        Try
            ODatos.ActualizarFormaPagoVentaBonoFidelizacionSoyLeal(recibo, valor, nroTarjeta, nroAutorizacion, IdRedencion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVentaBonoFidelizacionSoyLeal", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion & ", IdRedencion:" & IdRedencion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVentaBonoFidelizacionSoyLeal", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion & ", IdRedencion:" & IdRedencion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarBonosLocales() As DataSet
        Try
            Return ODatos.RecuperarBonosLocales()
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarBonosLocales", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarCodEstacion() As DataSet
        Try
            Return ODatos.RecuperarCodEstacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCodEstacion", "-", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCodEstacion", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function


    Public Sub InactivarBono()
        Try
            ODatos.InactivarBono()
        Catch ex As SqlClient.SqlException
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InactivarBono", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub

    Public Sub InsertarBono(ByVal IdBono As Int64, ByVal Nombre As String, ByVal Tipo As String, ByVal Puntos As Decimal, ByVal Valor As Decimal)
        Try
            ODatos.InsertarBono(IdBono, Nombre, Tipo, Puntos, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarBono", "-", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarBono", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub

    Public Function ValidarPagoConBonoFidelizacionSoyLeal(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.ValidarPagoConBonoFidelizacionSoyLeal(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarPagoConBonoFidelizacionSoyLeal", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarPagoConBonoFidelizacionSoyLeal", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarBonosLocalesReader() As IDataReader
        Try
            Return ODatos.RecuperarBonosLocalesReader()
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarBonosLocalesReader", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

    Public Function RecuperarTipoComunicacionProtocolos() As DataSet
        Try
            Return ODatos.RecuperarTipoComunicacionProtocolos
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoComunicacionProtocolos", "-", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoComunicacionProtocolos", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Sub ValidarLectorCara(ByVal idCara As Short)
        Try
            ODatos.ValidarLectorCara(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarLectorCara", "idCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarLectorCara", "idCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarConductoresPorCliente(ByVal Cliente As String) As IDataReader
        Try
            Return ODatos.RecuperarConductoresPorCliente(Cliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConductoresPorCliente", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConductoresPorCliente", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCodigoProductoSatelite(IdProducto As String) As String
        Try
            Return ODatos.RecuperarCodigoProductoSatelite(IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoSatelite", " IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoSatelite", " IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCodigoSurtidorSatelite(IdCara As String) As String
        Try
            Return ODatos.RecuperarCodigoSurtidorSatelite(IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCodigoSurtidorSatelite", " IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoSatelite", " IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarSaldoCreditoConsumo(ByVal IdCreditoConsumo As Long, ByVal Origen As String, ByVal Documento As String, ByVal Resultado As Decimal, ByVal Fecha As DateTime)
        Try
            ODatos.InsertarSaldoCreditoConsumo(IdCreditoConsumo, Origen, Documento, Resultado, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSaldoCreditoConsumo", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSaldoCreditoConsumo", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    'Public Function RecuperarPrecioProductoMangueraCliente(ByVal IdProducto As Integer, ByVal IdManguera As Integer, ByVal ROM As String) As Double
    '    Try

    '        Return ODatos.RecuperarPrecioProductoMangueraCliente(IdProducto, IdManguera, ROM)

    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "RecuperarPrecioProductoMangueraCliente", "IdProducto: " & IdProducto & ", IdMaguera: " & IdManguera & ", ROM: " & ROM, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "RecuperarPrecioProductoMangueraCliente", "IdProducto: " & IdProducto & ", IdMaguera: " & IdManguera & ", ROM: " & ROM, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Function


    Public Sub PasarVentaEfectivoACredito(Recibo As Long, placa As String)
        Try
            ODatos.PasarVentaEfectivoACredito(Recibo, placa)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "PasarVentaEfectivoACredito", "Recibo: " & Recibo & "  Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarSaldoCreditoConsumo(ByVal IdCreditoConsumo As String) As Decimal
        Try
            Return ODatos.RecuperarSaldoCreditoConsumo(IdCreditoConsumo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaldoCreditoConsumo", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaldoCreditoConsumo", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteIdentificadorLocal(ByVal Rom As String) As Boolean
        Try
            Return ODatos.ExisteIdentificadorLocal(Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteIdentificador", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteIdentificador", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ValidarCapacidadTanque(ByVal CantidadRecibo As Decimal, ByVal IdTanque As Int16)
        Try
            ODatos.ValidarCapacidadTanque(CantidadRecibo, IdTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCapacidadTanque", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCapacidadTanque", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function ExisteEstacion(ByVal IdEstacion As Int16) As Boolean
        Try
            Return ODatos.ExisteEstacion(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarListaCaras", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarListaCaras", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarListaCaras() As IDataReader
        Try
            Return ODatos.RecuperarListaCaras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarListaCaras", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarListaCaras", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSurtidoresPorEmpleadoEnTurno(ByVal idEmpleado As String) As DataSet
        Try
            Return ODatos.RecuperarSurtidoresPorEmpleadoEnTurno(idEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidoresEnTurnoAbierto", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidoresEnTurnoAbierto", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSurtidoresEnTurnoAbierto() As DataSet
        Try
            Return ODatos.RecuperarSurtidoresEnTurnoAbierto
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidoresEnTurnoAbierto", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidoresEnTurnoAbierto", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarSiClienteTieneCreditoConsumo(ByVal IdCliente As Int64) As Boolean
        Try
            Return ODatos.ValidarSiClienteTieneCreditoConsumo(IdCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarSiClienteTieneCreditoConsumo", "IdCliente: " & IdCliente & ".", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarSiClienteTieneCreditoConsumo", "IdCliente: " & IdCliente & ".", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarIdCreditoConsumo(ByVal IdCliente As Long) As Integer
        Try
            Return ODatos.RecuperarIdCreditoConsumo(IdCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPromocionesHoraFeliz", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPromocionesHoraFeliz", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPromocionesHoraFeliz() As DataSet
        Try
            Return ODatos.RecuperarPromocionesHoraFeliz()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPromocionesHoraFeliz", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPromocionesHoraFeliz", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub GuardarPromocionHoraFeliz(ByVal IdPromocion As Int32, ByVal FechaInicial As DateTime, ByVal FechaFinal As DateTime, ByVal HoraInicial As DateTime, ByVal HoraFinal As DateTime, ByVal Valor As Decimal, ByVal EsPorcentaje As Boolean, ByVal Estado As Boolean)
        Try
            ODatos.GuardarPromocionHoraFeliz(IdPromocion, FechaInicial, FechaFinal, HoraInicial, HoraFinal, Valor, EsPorcentaje, Estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "GuardarPromocionHoraFeliz", "IdPromocion: " & IdPromocion & "FechaInicial: " & FechaInicial & "FechaFinal: " & FechaFinal & "HoraInicial: " & HoraInicial & "HoraFinal: " & HoraFinal & "Valor: " & Valor & "EsPorcentaje: " & EsPorcentaje & "Estado: " & Estado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "GuardarPromocionHoraFeliz", "IdPromocion: " & IdPromocion & "FechaInicial: " & FechaInicial & "FechaFinal: " & FechaFinal & "HoraInicial: " & HoraInicial & "HoraFinal: " & HoraFinal & "Valor: " & Valor & "EsPorcentaje: " & EsPorcentaje & "Estado: " & Estado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarPromocionHoraFeliz(ByVal IdPromocion As Int32)
        Try
            ODatos.EliminarPromocionHoraFeliz(IdPromocion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "GuardarPromocionHoraFeliz", "IdPromocion: " & IdPromocion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "GuardarPromocionHoraFeliz", "IdPromocion: " & IdPromocion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function BuscarPromocionesHoraFeliz(ByVal FechaInicial As DateTime, ByVal FechaFinal As DateTime) As DataSet
        Try
            Return ODatos.BuscarPromocionesHoraFeliz(FechaInicial, FechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPromocionesHoraFeliz", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPromocionesHoraFeliz", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarCarasConTurnosAbiertosPorIsla(ByVal IdIsla As Int32) As IDataReader
        Try
            Return ODatos.RecuperarCarasConTurnosAbiertosPorIsla(IdIsla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCarasConTurnosAbiertosPorIsla", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCarasConTurnosAbiertosPorIsla", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCarasEnTurnoAbierto() As IDataReader
        Try
            Return ODatos.RecuperarCarasEnTurnoAbierto()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCarasConTurnosAbiertosPorIsla", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCarasConTurnosAbiertosPorIsla", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTipoIdentificacion() As IDataReader
        Try
            Return ODatos.RecuperarTipoIdentificacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoIdentificacion", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoIdentificacion", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    ''***************
    'RecuperarDatosImpresoraPorNombre
    Public Function RecuperarDatosImpresoraPorNombre(ByVal Nombre As String) As IDataReader
        Try
            Return ODatos.RecuperarDatosImpresoraPorNombre(Nombre) '' Yury
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosImpresoraPorNombre", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosImpresoraPorNombre", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosBoletaFiscal(ByVal Recibo As Int16) As IDataReader
        Try
            Return ODatos.RecuperarDatosBoletaFiscal(Recibo) '' Yury
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosBoletaFiscal", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosBoletaFiscal", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpresorasPorTurno(ByVal turno As String) As DataSet
        Try
            Return ODatos.RecuperarImpresorasPorTurno(turno) '' Yury
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresorasPorTurno", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresorasPorTurno", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpresorasPorPuertoCapturador(ByVal Puerto As String) As DataSet
        Try
            Return ODatos.RecuperarImpresorasPorPuertoCapturador(Puerto) '' Yury
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresorasPorPuertoCapturador", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresorasPorPuertoCapturador", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpresorasPorCara(ByVal Cara As Byte) As DataSet
        Try
            Return ODatos.RecuperarImpresorasPorCara(Cara) '' Yury
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresorasPorCara", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresorasPorCara", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarImpresorasPorRecibo(ByVal recibo As Long) As DataSet
        Try
            Return ODatos.RecuperarImpresorasPorRecibo(recibo) '' Yury
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresorasPorRecibo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresorasPorRecibo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarRespuestaImpresoraFiscal(ByVal NroCaja As Int16, ByVal NroBoleta As Int16, ByVal NroRecibo As Int16)

        Try
            ODatos.InsertarRespuestaImpresoraFiscal(NroCaja, NroBoleta, NroRecibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRespuestaImpresoraFiscal", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRespuestaImpresoraFiscal", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Sub

    Public Function ValidarExisteCara(ByVal Cara As Int16) As Boolean
        Try
            Return ODatos.ValidarExisteCara(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarExisteCara", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarExisteCara", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EjecutarConsulta(ByVal Consulta As String) As DataTable
        Try
            Return ODatos.EjecutarConsulta(Consulta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EjecutarConsulta", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EjecutarConsulta", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#Region "ImpresoraIsla FullStation"

    Public Function RecuperarUltimoInformeZ(ByVal IdIsla As Int16) As DateTime
        Try
            Return ODatos.RecuperarUltimoInformeZ(IdIsla)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoInformeZ", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoInformeZ", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIslasConImpresoraFiscal() As DataSet
        Try
            Return ODatos.RecuperarIslasConImpresoraFiscal()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslasConImpresoraFiscal", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslasConImpresoraFiscal", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Sub InsertarLogCierreZ(ByVal Respuesta As Int16, ByVal NroCaja As Int16, ByVal Fecha As DateTime, ByVal IdIsla As Int16)
        Try
            ODatos.InsertarLogCierreZ(Respuesta, NroCaja, Fecha, IdIsla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLogCierreZ", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLogCierreZ", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Sub



    Public Function RecuperarDatosImpresora(ByVal IdIsla As Int16) As IDataReader
        Try
            Return ODatos.RecuperarDatosImpresora(IdIsla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosImpresora", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosImpresora", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Function RecuperarIslaPorPuerto(ByVal Puerto As String) As Int16
        Try
            Return ODatos.RecuperarIslaPorPuerto(Puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslaPorPuerto", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslaPorPuerto", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarImpresoraIsla(ByVal IdImpresoraIsla As Int16)
        Try
            ODatos.EliminarImpresoraIsla(IdImpresoraIsla)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarImpresoraIsla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarImpresoraIsla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarImpresoraIsla(ByVal IdIsla As Int16, ByVal IdImpresora As Int16)
        Try
            ODatos.InsertarImpresoraIsla(IdIsla, IdImpresora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarImpresoraIsla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarImpresoraIsla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarImpresoraIsla(ByVal IdImpresoraIsla As Int16, ByVal IdIsla As Int16, ByVal IdImpresora As Int32)
        Try
            ODatos.ActualizarImpresoraIsla(IdImpresoraIsla, IdIsla, IdImpresora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarImpresoraIsla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarImpresoraIsla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarImpresorasXIslas() As DataSet
        Try
            Return ODatos.RecuperarImpresorasXIslas()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresorasXIslas", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresorasXIslas", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region
    ''*********************
    Public Sub ActualizarComunicacion(ByVal FechaFinal As DateTime)
        Try
            ODatos.ActualizarComunicacion(FechaFinal)

        Catch ex As SqlClient.SqlException
            Throw ex
        Catch ex As System.Exception
            Throw ex
        End Try
    End Sub
    Public Sub InsertarComunicacion(ByVal FechaInicial As DateTime)
        Try
            ODatos.InsertarComunicacion(FechaInicial)

        Catch ex As SqlClient.SqlException
            Throw ex
        Catch ex As System.Exception
            Throw ex
        End Try
    End Sub

    ''*********************


    Public Function RecuperarConfiguracionCara() As IDataReader
        Try
            Return ODatos.RecuperarConfiguracionCara()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConfiguracionCara", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConfiguracionCara", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarSiCaraManejaLectorUsb(ByVal Cara As Int16) As String
        Try
            Return ODatos.ValidarSiCaraManejaLectorUsb(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarSiCaraManejaLectorUsb", "Cara: " & Cara, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarSiCaraManejaLectorUsb", "Cara: " & Cara, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Function RecuperarCodigoPCCSurtidorPorCara(ByVal Cara As Int16) As String
        Try
            Return ODatos.RecuperarCodigoPCCSurtidorPorCara(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCodigoPCCSurtidorPorCara", "Cara: " & Cara, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCodigoPCCSurtidorPorCara", "Cara: " & Cara, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Sub InsertarFidelizacionManual(ByVal Recibo As Int64, ByVal Numero As String, ByVal Valor As Decimal, ByVal Cantidad As Decimal, ByVal Idturno As Integer, ByVal Empleado As String, ByVal FechaVenta As Date)
        Try
            ODatos.InsertarFidelizacionManual(Recibo, Numero, Valor, Cantidad, Idturno, Empleado, FechaVenta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFidelizacionManual", "-", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFidelizacionManual", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub


    Public Sub InsertarTipoEmpleado(ByVal TipoEmpleado As String)
        Try
            ODatos.InsertarTipoEmpleado(TipoEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTipoEmpleado", "TipoEmpleado: " & TipoEmpleado, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTipoEmpleado", "TipoEmpleado: " & TipoEmpleado, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub


    Public Sub EliminarTipoEmpleado(ByVal IdEmpleado As Integer)
        Try
            ODatos.EliminarTipoEmpleado(IdEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTipoEmpleado", "TipoEmpleado: " & IdEmpleado.ToString, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTipoEmpleado", "TipoEmpleado: " & IdEmpleado.ToString, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub


    Public Sub ActualizarTipoEmpleado(ByVal TipoEmpleado As String, ByVal IdEmpleado As Integer)
        Try
            ODatos.ActualizarTipoEmpleado(TipoEmpleado, IdEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTipoEmpleado", "TipoEmpleado: " & TipoEmpleado & "IdEmpleado: " & IdEmpleado, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTipoEmpleado", "TipoEmpleado: " & TipoEmpleado & "IdEmpleado: " & IdEmpleado, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub




    Public Sub ActualizarVehiculoConductor(ByVal Placa As String, ByVal Dni As String, Pais As String)
        Try
            ODatos.ActualizarVehiculoConductor(Placa, Dni, Pais)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVehiculoConductor", "Placa: " & Placa & "Dni: " & Dni & " Pais: " & Pais, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVehiculoConductor", "Placa: " & Placa & "Dni: " & Dni & " Pais: " & Pais, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub


    Public Sub ActualizarTipoEnvase(ByVal IdTipoEnvase As Integer, ByVal Descripcion As String, ByVal Abreviatura As String)
        Try
            ODatos.ActualizarTipoEnvase(IdTipoEnvase, Descripcion, Abreviatura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTipoEnvase", "-", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTipoEnvase", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub


    Public Function RecuperarTipoEmpleado(ByVal TipoEmpleado As String) As DataTable
        Try
            Return ODatos.RecuperarTipoEmpleado(TipoEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoEmpleado", "TipoEmpleado: " & TipoEmpleado, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoEmpleado", "TipoEmpleado: " & TipoEmpleado, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function





    Public Function RecuperarTipoEnvases() As DataTable
        Try
            Return ODatos.RecuperarTipoEnvases()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoEnvases", "-", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoEnvases", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function


    Public Function RecuperarTipoImpresora() As DataTable
        Try
            Return ODatos.RecuperarTipoImpresora
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoImpresora", "TipoImpresora:", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoImpresora", "TipoImpresora:", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Function RecuperarTasasCambioVenta() As Decimal
        Try
            Return ODatos.RecuperarTasasCambioVenta()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTasasCambioVenta", "-", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTasasCambioVenta", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Function ValidarCantidadEnDocumentoCombustible(ByVal Documento As String) As Boolean
        Try
            Return ODatos.ValidarCantidadEnDocumentoCombustible(Documento)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCantidadEnDocumentoCombustible", "Documento: " & Documento, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCantidadEnDocumentoCombustible", "Documento: " & Documento, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function


    Public Function RecuperarSurtidoresSinTurnoAbiertoARM() As DataSet
        Try
            Return ODatos.RecuperarSurtidoresSinTurnoAbiertoARM()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidoresSinTurnoAbiertoArm", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidoresSinTurnoAbiertoArm", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarSurtidoresSinTurnoAbierto() As IDataReader
        Try
            Return ODatos.RecuperarSurtidoresSinTurnoAbierto()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidoresSinTurnoAbierto", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidoresSinTurnoAbierto", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarSurtidoresConTurnoAbierto() As IDataReader
        Try
            Return ODatos.RecuperarSurtidoresConTurnoAbierto()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidoresConTurnoAbierto", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidoresConTurnoAbierto", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ValidarProveedorPorNit(ByVal Nit As String)
        Try
            ODatos.ValidarProveedorPorNit(Nit)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCantidadEnDocumentoCombustible", "Nit: " & Nit, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCantidadEnDocumentoCombustible", "Nit: " & Nit, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub



    Public Function RecuperarAhorroEnVentaVehiculo(ByVal Recibo As Integer) As Decimal
        Try
            Return ODatos.RecuperarAhorroEnVentaVehiculo(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarAhorroEnVentaVehiculo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarAhorroEnVentaVehiculo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Function ValidarSolicitudDatosCDCCHile(ByVal placa As String, ByVal Tipo As Integer) As Boolean
        Try
            Return ODatos.ValidarSolicitudDatosCDCCHile(placa, Tipo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarSolicitudDatosCDCCHile", "placa: " & placa, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarSolicitudDatosCDCCHile", "placa: " & placa, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function


    Public Function RecuperarCaraPorReciboVenta(ByVal recibo As Integer) As Byte
        Try
            Return ODatos.RecuperarCaraPorReciboVenta(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCaraPorReciboVenta", "recibo: " & recibo.ToString, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCaraPorReciboVenta", "recibo: " & recibo.ToString, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function



#Region "Historico Impuesto"
    Public Sub InsertarHistoricoImpuesto(ByVal IdImpuesto As Int32, ByVal Porcentaje As Decimal, ByVal FechaHora As DateTime)
        Try
            ODatos.InsertarHistoricoImpuesto(IdImpuesto, Porcentaje, FechaHora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarHistoricoImpuesto", "IdImpuesto: " & IdImpuesto & ", Porcentaje: " & Porcentaje & ", FechaHora: " & FechaHora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarHistoricoImpuesto", "IdImpuesto: " & IdImpuesto & ", Porcentaje: " & Porcentaje & ", FechaHora: " & FechaHora, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarHistoricoImpuesto(ByVal IdImpuesto As Int32) As DataTable
        Try
            Return ODatos.RecuperarHistoricoImpuesto(IdImpuesto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHistoricoImpuesto", "IdImpuesto: " & IdImpuesto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHistoricoImpuesto", "IdImpuesto: " & IdImpuesto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarHistoricoTRM(ByVal Fecha As Date, ByVal Valor As Decimal)
        Try
            ODatos.InsertarHistoricoTRM(Fecha, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarHistoricoTRM", "Fecha: " & Fecha & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarHistoricoTRM", "Fecha: " & Fecha & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarHistoricoTRM() As DataTable
        Try
            Return ODatos.RecuperarHistoricoTRM()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHistoricoTRM", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHistoricoTRM", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub EliminarLLaveValidacion(ByVal IdLLave As Integer)
        Try
            ODatos.EliminarLLaveValidacion(IdLLave)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarLLaveValidacion", "IdLLave: " & IdLLave.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarLLaveValidacion", "IdLLave: " & IdLLave.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarLLaveControl(ByVal TipoOperacion As Integer) As DataTable
        Try
            Return ODatos.RecuperarLLaveControl(TipoOperacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLLaveControl", "TipoOperacion: " & TipoOperacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLLaveControl", "TipoOperacion: " & TipoOperacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarLLaveControlImpresion(ByVal TipoOperacion As Integer) As String
        Try
            Return ODatos.RecuperarLLaveControlImpresion(TipoOperacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLLaveControlImpresion", "TipoOperacion: " & TipoOperacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLLaveControlImpresion", "TipoOperacion: " & TipoOperacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Seguridad"

    Public Function RecuperarUsuariosxAplicacion(ByVal NombreAplicacion As String) As DataTable
        Try
            Return ODatos.RecuperarUsuariosxAplicacion(NombreAplicacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUsuarioxAplicacion", "NombreAplicacion: " & NombreAplicacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUsuarioxAplicacion", "NombreAplicacion: " & NombreAplicacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRolesxAplicacion(ByVal NombreAplicacion As String) As DataTable
        Try
            Return ODatos.RecuperarRolesxAplicacion(NombreAplicacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRolesxAplicacion", "NombreAplicacion: " & NombreAplicacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRolesxAplicacion", "NombreAplicacion: " & NombreAplicacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarRoles() As DataTable
        Try
            Return ODatos.RecuperarRoles()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRoles", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRoles", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarUsuariosporRole(ByVal RoleName As String, ByVal ApplicationName As String) As DataTable
        Try
            Return ODatos.RecuperarUsuariosporRole(RoleName, ApplicationName)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUsuariosporRole", "RoleName: " & RoleName & " ApplicationName: " & ApplicationName, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUsuariosporRole", "RoleName: " & RoleName & " ApplicationName: " & ApplicationName, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarAccionesPorRole(ByVal RoleName As String) As DataTable
        Try
            Return ODatos.RecuperarAccionesPorRole(RoleName)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarAccionesPorRole", "RoleName: " & RoleName, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUsuariosporRole", "RoleName: " & RoleName, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarPermisosPorAccion(ByVal IdAccion As Int32, ByVal IdRole As Guid, ByVal EsPermitido As Boolean)
        Try
            ODatos.ActualizarPermisosPorAccion(IdAccion, IdRole, EsPermitido)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarPermisosPorAccion", "IdAccion: " & IdAccion & ", IdRole: " & IdRole.ToString() & ", EsPermitido: " & EsPermitido, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarPermisosPorAccion", "IdAccion: " & IdAccion & ", IdRole: " & IdRole.ToString() & ", EsPermitido: " & EsPermitido, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ValidarUsuarioASPNet(ByVal Usuario As String) As Guid
        Try
            Return ODatos.ValidarUsuarioASPNet(Usuario)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarUsuarioASPNet", "Usuario: " & Usuario, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarUsuarioASPNet", "Usuario: " & Usuario, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarPermisosPorAccion(ByVal UserId As Guid, ByVal IdAccion As Int32) As Boolean
        Try
            Return ODatos.ValidarPermisosPorAccion(UserId, IdAccion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarPermisosPorAccion", "UserId: " & UserId.ToString() & ", IdAccion: " & IdAccion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarPermisosPorAccion", "UserId: " & UserId.ToString() & ", IdAccion: " & IdAccion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Reportes Exportar Perú"

    Public Function RecuperarResumenVentaArchivo(ByVal FechaInicio As DateTime, ByVal FechaFin As DateTime) As DataSet
        Try
            Return ODatos.RecuperarResumenVentaArchivo(FechaInicio, FechaFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarResumenVentaArchivo", "FechaInicio: " & FechaInicio & " , FechaFin: " & FechaFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarResumenVentaArchivo", "FechaInicio: " & FechaInicio & " , FechaFin: " & FechaFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDetalleVentasArchivo(ByVal FechaInicial As DateTime, ByVal FechaFinal As DateTime) As DataSet
        Try
            Return ODatos.RecuperarDetalleVentasArchivo(FechaInicial, FechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDetalleVentasArchivo", "FechaInicio: " & FechaInicial & " , FechaFin: " & FechaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDetalleVentasArchivo", "FechaInicio: " & FechaInicial & " , FechaFin: " & FechaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasDetalladasArchivo(ByVal FechaInicial As DateTime, ByVal FechaFinal As DateTime) As DataSet
        Try
            Return ODatos.RecuperarVentasDetalladasArchivo(FechaInicial, FechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasDetalladasArchivo", "FechaInicio: " & FechaInicial & " , FechaFin: " & FechaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasDetalladasArchivo", "FechaInicio: " & FechaInicial & " , FechaFin: " & FechaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

    Public Sub InsertarLogeo(ByVal Cedula As String, ByVal tanque As String, ByVal Cantidad As Decimal, ByVal SaldoAnterior As Decimal, ByVal NuevoSaldo As Decimal)
        Try
            ODatos.InsertarLogeo(Cedula, tanque, Cantidad, SaldoAnterior, NuevoSaldo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLogeo", "Cedula: " & Cedula.ToString & "Tanque: " & tanque.ToString & "Cantidad: " & Cantidad.ToString & "SaldoAnterior: " & SaldoAnterior.ToString & "NuevoSaldo: " & NuevoSaldo.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLogeo", "Cedula: " & Cedula.ToString & "Tanque: " & tanque.ToString & "Cantidad: " & Cantidad.ToString & "SaldoAnterior: " & SaldoAnterior.ToString & "NuevoSaldo: " & NuevoSaldo.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub EliminarBanco(ByVal codigo As String)
        Try
            ODatos.EliminarBanco(codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarBanco", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarBanco", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarNombreConductor(ByVal Identificacion As String) As String
        Try
            Return ODatos.RecuperarNombreConductor(Identificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNombreConductor", "Identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNombreConductor", "Identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNombreCliente(ByVal Identificacion As String) As String
        Try
            Return ODatos.RecuperarNombreCliente(Identificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNombreCliente", "Identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNombreCliente", "Identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function ValidarNombreCliente(ByVal Identificacion As String) As Boolean
        Try
            Return ODatos.ValidarNombreCliente(Identificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarNombreCliente", "Identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarNombreCliente", "Identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub EliminarFinanciera(ByVal Nombre As String)
        Try
            ODatos.EliminarFinanciera(Nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarFinanciera", "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarFinanciera", "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarTurnosConSaltodeLectura(ByVal Fecha As DateTime) As DataTable
        Try
            Return ODatos.RecuperarTurnosConSaltodeLectura(Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosConSaltodeLectura", "Fecha: " & Fecha.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosConSaltodeLectura", "Fecha: " & Fecha.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarFomaPagoTarjeta() As DataTable
        Try
            Return ODatos.RecuperarFomaPagoTarjeta()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFomaPagoTarjeta", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFomaPagoTarjeta", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub InsertarFranquicia(ByVal IdFranquicia As Integer, ByVal descripcion As String, ByVal idFormaPago As Short)
        Try
            ODatos.InsertarFranquicia(IdFranquicia, descripcion, idFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFranquicia", "IdFranquicia: " & IdFranquicia.ToString() & "descripcion: " & descripcion.ToString & "idFormaPago: " & idFormaPago.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFranquicia", "IdFranquicia: " & IdFranquicia.ToString() & "descripcion: " & descripcion.ToString & "idFormaPago: " & idFormaPago.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub




    Public Sub ActualizarDatosDocumentoPeru(ByVal Recibo As Integer, ByVal Nombre As String, ByVal Identificacion As String, ByVal Placa As String, ByVal Pais As String, ByVal TipoEnvase As Integer, ByVal Autorizacion As String, ByVal DUI As String)
        Try
            ODatos.ActualizarDatosDocumentoPeru(Recibo, Nombre, Identificacion, Placa, Pais, TipoEnvase, Autorizacion, DUI)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDatosDocumentoPeru", "Recibo: " & Recibo.ToString() & "Nombre: " & Nombre.ToString & "Identificacion: " & Identificacion.ToString & "Placa" & Identificacion.ToString & "TipoEnvase" & TipoEnvase.ToString & "Autorizacion" & Autorizacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDatosDocumentoPeru", "Recibo: " & Recibo.ToString() & "Nombre: " & Nombre.ToString & "Identificacion: " & Identificacion.ToString & "Placa" & Identificacion.ToString & "TipoEnvase" & TipoEnvase.ToString & "Autorizacion" & Autorizacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarClienteGerenciado(ByVal idCliente As Integer, ByVal RUC As String, ByVal RazonSocial As String, ByVal Apellido As String, ByVal IdClienteEstacion As Integer, ByVal idTipoDocumentoCliente As Integer)
        Try
            ODatos.ActualizarClienteGerenciado(idCliente, RUC, RazonSocial, Apellido, IdClienteEstacion, idTipoDocumentoCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarClienteGerenciado", "RUC: " & RUC.ToString() & "RazonSocial: " & RazonSocial.ToString & "idCliente: " & idCliente.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarClienteGerenciado", "RUC: " & RUC.ToString() & "RazonSocial: " & RazonSocial.ToString & "idCliente: " & idCliente.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub




    Public Function RecuperarFranquicias(ByVal TipoBusqueda As Integer) As DataTable
        Try
            Return ODatos.RecuperarFranquicias(TipoBusqueda)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFranquicias", "TipoBusqueda : " & TipoBusqueda.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFranquicias", "TipoBusqueda : " & TipoBusqueda.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdturnoPorRecibo(ByVal Recibo As Integer) As Integer
        Try
            Return ODatos.RecuperarIdturnoPorRecibo(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdturnoPorRecibo", "Recibo: " & Recibo.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdturnoPorRecibo", "Recibo: " & Recibo.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarDatosdeVentaPorRecibo(ByVal Recibo As Integer) As DataTable
        Try
            Return ODatos.RecuperarDatosdeVentaPorRecibo(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosdeVentaPorRecibo", "Recibo: " & Recibo.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosdeVentaPorRecibo", "Recibo: " & Recibo.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarListaPaises() As IDataReader
        Try
            Return ODatos.RecuperarListaPaises()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarListaPaises", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarListaPaises", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function





    Public Function RecuperarPaisPorCodigo(ByVal IdPais As Integer) As String
        Try
            Return ODatos.RecuperarPaisPorCodigo(IdPais)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPaisPorCodigo", "IdPais: " & IdPais.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPaisPorCodigo", "IdPais: " & IdPais.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function






    Public Sub ValidarFacturaUltimaVenta(ByVal Cara As Int16)
        Try
            ODatos.ValidarFacturaUltimaVenta(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarFacturaUltimaVenta", "Cara: " & Cara.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarFacturaUltimaVenta", "Cara: " & Cara.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub ValidarLecturasTurnoSurtidor(ByVal Cara As Int16)
        Try
            ODatos.ValidarLecturasTurnoSurtidor(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarLecturasTurnoSurtidor", "Cara: " & Cara.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarLecturasTurnoSurtidor", "Cara: " & Cara.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function RecuperarDatoEntidadBancaria(ByVal EsFinaciera As Boolean) As DataTable
        Try
            Return ODatos.RecuperarDatoEntidadBancaria(EsFinaciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatoEntidadBancaria", "EsFinaciera: " & EsFinaciera.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatoEntidadBancaria", "EsFinaciera: " & EsFinaciera.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSaldosIsleros() As DataTable
        Try
            Return ODatos.RecuperarSaldosIsleros()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaldosIsleros", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaldosIsleros", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub RealizarAbonoIsleros(ByVal IdIsleros As Integer, ByVal Abono As Decimal)
        Try
            ODatos.RealizarAbonoIsleros(IdIsleros, Abono)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RealizarAbonoIsleros", "IdIsleros: " & IdIsleros & "Abono: " & Abono, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RealizarAbonoIsleros", "IdIsleros: " & IdIsleros & "Abono: " & Abono, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarHistoricoSaldoIsleros(ByVal IdIslero As Int32) As DataTable
        Try
            Return ODatos.RecuperarHistoricoSaldoIsleros(IdIslero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHistoricoSaldoIsleros", "IdIslero: " & IdIslero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHistoricoSaldoIsleros", "IdIslero: " & IdIslero, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarHistoricoSaldoIsleros(ByVal IdIslero As Int32, ByVal FechaIni As DateTime, ByVal FechaFin As DateTime) As DataTable
        Try
            Return ODatos.RecuperarHistoricoSaldoIsleros(IdIslero, FechaIni, FechaFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHistoricoSaldoIsleros", "IdIslero: " & IdIslero & "FechaInicio: " & FechaIni & "FechaFin: " & FechaFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHistoricoSaldoIsleros", "IdIslero: " & IdIslero & "FechaInicio: " & FechaIni & "FechaFin: " & FechaFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarFinanciera(ByVal Nombre As String, ByVal IdFinanciera As Integer)
        Try
            ODatos.InsertarFinanciera(Nombre, IdFinanciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFinanciera", "Nombre: " & Nombre & " IdFinanciera: " & IdFinanciera.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFinanciera", "Nombre: " & Nombre & " IdFinanciera: " & IdFinanciera.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarFinanciera(ByVal Nombre As String)
        Try
            ODatos.InsertarFinanciera(Nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFinanciera", "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFinanciera", "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarBanco(ByVal Nombre As String, ByVal Codigo As String)
        Try
            ODatos.InsertarBanco(Nombre, Codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarBanco", "Nombre: " & Nombre & "Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarBanco", "Nombre: " & Nombre & "Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub GuardarClienteCleque(ByVal Nuip As String, ByVal Monto As Decimal, ByVal Porcentaje As Decimal)
        Try
            ODatos.GuardarClienteCleque(Nuip, Monto, Porcentaje)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "GuardarClienteCleque", "Nuip: " & Nuip & " Monto: " & Monto.ToString & " Porcentaje: " & Porcentaje.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "GuardarClienteCleque", "Nuip: " & Nuip & " Monto: " & Monto.ToString & " Porcentaje: " & Porcentaje.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub





    Public Function ValidarTarjetaCosumoEnCredito(ByVal IdTarjetas As Int32) As Boolean
        Try
            Return ODatos.ValidarTarjetaCosumoEnCredito(IdTarjetas)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTarjetaCosumoEnCredito", "IdTarjetas: " & IdTarjetas.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTarjetaCosumoEnCredito", "IdTarjetas: " & IdTarjetas.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function





    Public Function RecuperarMediosPagosVentasFueradeSistemas() As DataTable
        Try
            Return ODatos.RecuperarMediosPagosVentasFueradeSistemas()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMediosPagosVentasFueradeSistemas", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMediosPagosVentasFueradeSistemas", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarTarjetasPorNuip(ByVal nuip As String) As DataTable
        Try
            Return ODatos.RecuperarTarjetasPorNuip(nuip)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTarjetasPorNuip", "nuip: " & nuip, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTarjetasPorNuip", "nuip: " & nuip, "FallaStoredProcedure")
            Throw
        End Try
    End Function



#Region "Validaciones cierre de tanque"
    Public Sub ValidarFechaCierreTanque(ByVal Fecha As DateTime)
        Try
            ODatos.ValidarFechaCierreTanque(Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTurnoFechaCierreTanque", "Fecha: " & Fecha.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTurnoFechaCierreTanque", "Fecha: " & Fecha.ToString, "FallaStoredProcedure")
            Throw
        End Try

    End Sub


    Public Sub ValidarCierreTanquePorCierreTurno()
        Try
            ODatos.ValidarCierreTanquePorCierreTurno()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreTanquePorCierreTurno", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreTanquePorCierreTurno", "", "FallaStoredProcedure")
            Throw
        End Try

    End Sub
#End Region

#Region "   Notas Crédito   "
    Public Function RecuperarDetalleNotaCreditoFactura(ByVal IdNotaCredito As Int64) As DataTable
        Try
            Return ODatos.RecuperarDetalleNotaCreditoFactura(IdNotaCredito)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDetalleNotaCreditoFactura", "IdNotaCredito: " & IdNotaCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDetalleNotaCreditoFactura", "IdNotaCredito: " & IdNotaCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTransaccionPorFecha(ByVal FechaInicial As String, ByVal FechaFinal As String) As DataTable
        Try
            Return ODatos.RecuperarTransaccionPorFecha(FechaInicial, FechaFinal)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTransaccionPorFecha", "FechaInicial: " & FechaInicial & ", FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTransaccionPorFecha", "FechaInicial: " & FechaInicial & ", FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTransaccionPorRecibo(ByVal Recibo As Int64) As DataTable
        Try
            Return ODatos.RecuperarTransaccionPorRecibo(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTransaccionPorRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTransaccionPorRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMediosPagoAplicablesNota(ByVal IdFormaPago As Int16) As DataTable
        Try
            Return ODatos.RecuperarMediosPagoAplicablesNota(IdFormaPago)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMediosPagoAplicablesNota", "IdFormaPago: " & IdFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMediosPagoAplicablesNota", "IdFormaPago: " & IdFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMediosPagoAplicablesNotaRecibo(ByVal Recibo As Int64) As DataTable
        Try
            Return ODatos.RecuperarMediosPagoAplicablesNotaRecibo(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMediosPagoAplicablesNotaRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMediosPagoAplicablesNotaRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNotaCreditoFactura(ByVal IdNotaCredito As Int64) As DataTable
        Try
            Return ODatos.RecuperarNotaCreditoFactura(IdNotaCredito)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNotaCreditoFactura", "IdNotaCredito: " & IdNotaCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNotaCreditoFactura", "IdNotaCredito: " & IdNotaCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarNotaCreditoFactura(ByVal IdNotaCredito As Int64, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarNotaCreditoFactura(IdNotaCredito, idEstacion)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNotaCreditoFactura", "IdEstacion: " & idEstacion & "IdNotaCredito: " & IdNotaCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNotaCreditoFactura", "IdEstacion: " & idEstacion & "IdNotaCredito: " & IdNotaCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarNotaCreditoSodexo(ByVal Recibo As Int64) As DataTable
        Try
            Return ODatos.InsertarNotaCreditoSodexo(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarNotaCreditoSodexo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarNotaCreditoSodexo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEncabezadoNotaCreditoSodexo(ByVal IdNotaCreditoSodexo As Int32) As DataTable
        Try
            Return ODatos.RecuperarEncabezadoNotaCreditoSodexo(IdNotaCreditoSodexo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoNotaCreditoSodexo", "IdNotaCreditoSodexo: " & IdNotaCreditoSodexo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoNotaCreditoSodexo", "IdNotaCreditoSodexo: " & IdNotaCreditoSodexo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarMediosPagoNotaTemp(ByVal Recibo As Long, ByVal IdFormaPago As Int16, ByVal Documento As String, ByVal Valor As Double, ByVal saldo As Decimal, ByVal EsAutorizado As Boolean, ByVal IdTipoLectura As Int32, ByVal NroConfirmacion As String, ByVal MontoReal As Double, Optional ByVal esMedioPagoEspecial As Boolean = True) As Int64
        Try
            Return ODatos.InsertarMediosPagoNotaTemp(Recibo, IdFormaPago, Documento, Valor, saldo, EsAutorizado, IdTipoLectura, NroConfirmacion, MontoReal, esMedioPagoEspecial)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMediosPagoNotaTemp", "Recibo: " & Recibo & ", IdFormapago: " & IdFormaPago & ", Documento: " & Documento & ", Valor: " & Valor & ", EsAutorizado: " & EsAutorizado & ", IdTipoLectura: " & IdTipoLectura & ", NroConfirmacion: " & NroConfirmacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMediosPagoNotaTemp", "Recibo: " & Recibo & ", IdFormapago: " & IdFormaPago & ", Documento: " & Documento & ", Valor: " & Valor & ", EsAutorizado: " & EsAutorizado & ", IdTipoLectura: " & IdTipoLectura & ", NroConfirmacion: " & NroConfirmacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaNotaCreditoSodexo() As Int32
        Try
            Return ODatos.RecuperarUltimaNotaCreditoSodexo()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaNotaCreditoSodexo", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaNotaCreditoSodexo", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Consulta de Transacciones por Fecha     "
    Public Function RecuperarTransaccionesdeVentaPorFecha(ByVal FechaInicio As String, ByVal FechaFin As String) As DataTable
        Try
            Return ODatos.RecuperarTransaccionesdeVentaPorFecha(FechaInicio, FechaFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTransaccionesdeVentaPorFecha", "FechaInicio: " & FechaInicio & " FechaFin:" & FechaFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTransaccionesdeVentaPorFecha", "FechaInicio: " & FechaInicio & " FechaFin:" & FechaFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

    Public Function ExisteOperador(ByVal Ruc As String) As IDataReader
        Try
            Return ODatos.ExisteOperador(Ruc)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteOperador", "Ruc: " & Ruc.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteOperador", "Ruc: " & Ruc.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarConductorPorCodigo(ByVal IdCliente As Integer) As DocumentoConductor
        Try
            Dim oInfo As New DocumentoConductor
            Dim lector As IDataReader = Nothing
            lector = ODatos.RecuperarConductorPorCodigo(IdCliente)
            While lector.Read
                oInfo.Nombre = lector.Item("Nombre").ToString
                oInfo.Pais = lector.Item("Pais").ToString
                oInfo.Placa = lector.Item("Placa").ToString
                oInfo.Identificacion = lector.Item("RUC").ToString
            End While
            lector.Close()
            lector.Dispose()
            Return oInfo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConductorPorCodigo", "IdCliente: " & IdCliente.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConductorPorCodigo", "IdCliente: " & IdCliente.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConductorPorCodigo(ByVal IdCliente As Integer, ByVal Placa As String) As DocumentoConductor
        Try
            Dim oInfo As New DocumentoConductor
            Dim lector As IDataReader = Nothing
            lector = ODatos.RecuperarConductorPorCodigo(IdCliente, Placa)
            While lector.Read
                oInfo.Nombre = lector.Item("Nombre").ToString
                oInfo.Pais = lector.Item("Pais").ToString
                oInfo.Placa = lector.Item("Placa").ToString
                oInfo.Identificacion = lector.Item("RUC").ToString
            End While
            lector.Close()
            lector.Dispose()
            Return oInfo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConductorPorCodigo", "IdCliente: " & IdCliente.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConductorPorCodigo", "IdCliente: " & IdCliente.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarConductorPorPlaca(ByVal Placa As String) As IDataReader
        Try
            Return ODatos.RecuperarConductorPorPlaca(Placa)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConductorPorPlaca", "Placa: " & Placa.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConductorPorPlaca", "Placa: " & Placa.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Sub ValidarBloqueoVehiculo(ByVal Placa As String)
        Try
            ODatos.ValidarBloqueoVehiculo(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarBloqueoVehiculo", "Placa: " & Placa.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarBloqueoVehiculo", "Placa: " & Placa.ToString, "FallaStoredProcedure")
            Throw
        End Try

    End Sub

    Public Function RecuperarDiferenciaLecturaCierreTurno(ByVal IdTurno As Integer) As IDataReader
        Try
            Return ODatos.RecuperarDiferenciaLecturaCierreTurno(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDiferenciaLecturaCierreTurno", "IdTurno: " & IdTurno.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDiferenciaLecturaCierreTurno", "IdTurno: " & IdTurno.ToString, "FallaStoredProcedure")
            Throw
        End Try

    End Function
    Public Function RecuperarReciboPorConsecutivoChile(ByVal Recibo As Int64) As Int32
        Try
            Return ODatos.RecuperarReciboPorConsecutivoChile(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorConsecutivoChile", "Recibo: " & Recibo.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorConsecutivoChile", "Recibo: " & Recibo.ToString, "FallaStoredProcedure")
            Throw
        End Try

    End Function



    Public Function RecuperarVentasPorEmpleadoVendedor(ByVal IdTurno As Integer) As IDataReader
        Try
            Return ODatos.RecuperarVentasPorEmpleadoVendedor(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPorEmpleadoVendedor", "IdTurno: " & IdTurno.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPorEmpleadoVendedor", "IdTurno: " & IdTurno.ToString, "FallaStoredProcedure")
            Throw
        End Try

    End Function

#Region "Gazel Diana"


    Public Sub InsertarPremioFidelizacionGazel(ByVal Idturno As Integer, ByVal valor As Decimal, ByVal idPremio As Integer)
        Try
            ODatos.InsertarPremioFidelizacionGazel(Idturno, valor, idPremio)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPremioFidelizacionGazel", "IdTurno: " & Idturno & ", valor: " & valor & ", IdPremio: " & idPremio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPremioFidelizacionGazel", "IdTurno: " & Idturno & ", valor: " & valor & ", IdPremio: " & idPremio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarPremioFidelizacionGazel(ByVal Idturno As Integer, ByVal valor As Decimal, ByVal idPremio As Integer, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarPremioFidelizacionGazel(Idturno, valor, idPremio, idEstacion)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPremioFidelizacionGazel", "IdEstacion: " & idEstacion & "IdTurno: " & Idturno & ", valor: " & valor & ", IdPremio: " & idPremio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPremioFidelizacionGazel", "IdEstacion: " & idEstacion & "IdTurno: " & Idturno & ", valor: " & valor & ", IdPremio: " & idPremio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function EsCaraGas(ByVal IdCara As Int16) As Boolean

        Try
            Return ODatos.EsCaraGas(IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsCaraGas", "IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsCaraGas", "IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function EsPremioRecargaCelular(ByVal IdPremio As Integer) As Boolean

        Try
            Return ODatos.EsPremioRecargaCelular(IdPremio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsPremioRecargaCelular", "IdPremio: " & IdPremio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsPremioRecargaCelular", "IdPremio: " & IdPremio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsPremioRecargaCelularTerpel(ByVal IdPremio As Integer) As Boolean

        Try
            Return ODatos.EsPremioRecargaCelularTerpel(IdPremio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsPremioRecargaCelularTerpel", "IdPremio: " & IdPremio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsPremioRecargaCelularTerpel", "IdPremio: " & IdPremio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDensidad() As IDataReader
        Try
            Return ODatos.RecuperarDensidad()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDensidad", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDensidad", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region


    Public Function ValidarBonoDescuentoPromocion() As Boolean
        Try
            Return ODatos.ValidarBonoDescuentoPromocion()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarBonoDescuentoPromocion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarBonoDescuentoPromocion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


#Region "Empresa"
    Public Function RecuperarUltimoRecaudoSRE() As Int32
        Try
            Return ODatos.RecuperarUltimoRecaudoSRE()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoRecaudoSRE", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoRecaudoSRE", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdEmpresaPorCodigo(ByVal codigo As Int32) As Int32
        Try
            Return ODatos.RecuperarIdEmpresaPorCodigo(codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdEmpresaPorCodigo", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdEmpresaPorCodigo", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalSRE(ByVal codigo As Int32) As Int32
        Try
            Return ODatos.RecuperarTotalSRE(codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalSRE", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalSRE", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarRecaudoInfoEmpresa(ByVal IdRecaudo As Integer, ByVal IdPagoEmpresa As Integer, ByVal EsAnulado As Boolean, ByVal Movil As Int32, ByVal Periodos As Int32, ByVal Descripcion As String)
        Try
            ODatos.ActualizarRecaudoInfoEmpresa(IdRecaudo, IdPagoEmpresa, EsAnulado, Movil, Periodos, Descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarRecaudoInfoEmpresa", "IdRecaudo:" & IdRecaudo & ", IdPagoEmpresa: " & IdPagoEmpresa & ", EsAnulado: " & EsAnulado & ", Movil: " & Movil & ", Periodos: " & Periodos & ", EsAnulado: " & Descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarRecaudoInfoEmpresa", "IdRecaudo:" & IdRecaudo & ", IdPagoEmpresa: " & IdPagoEmpresa & ", EsAnulado: " & EsAnulado & ", Movil: " & Movil & ", Periodos: " & Periodos & ", EsAnulado: " & Descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub






    Public Sub ActualizarRecaudoInfoEmpresa(ByVal IdRecaudo As Integer, ByVal IdPagoEmpresa As Integer, ByVal EsAnulado As Boolean, ByVal Movil As Int32, ByVal Periodos As Int32, ByVal Descripcion As String, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarRecaudoInfoEmpresa(IdRecaudo, IdPagoEmpresa, EsAnulado, Movil, Periodos, Descripcion, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarRecaudoInfoEmpresa", "IdRecaudo:" & IdRecaudo & ", IdPagoEmpresa: " & IdPagoEmpresa & ", EsAnulado: " & EsAnulado & ", Movil: " & Movil & ", Periodos: " & Periodos & ", EsAnulado: " & Descripcion & ", IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarRecaudoInfoEmpresa", "IdRecaudo:" & IdRecaudo & ", IdPagoEmpresa: " & IdPagoEmpresa & ", EsAnulado: " & EsAnulado & ", Movil: " & Movil & ", Periodos: " & Periodos & ", EsAnulado: " & Descripcion & ", IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarRecaudoInfoSRE(ByVal IdRecaudo As Integer, ByVal Autorizacion As String)
        Try
            ODatos.ActualizarRecaudoInfoSRE(IdRecaudo, Autorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarRecaudoInfoSRE", "IdRecaudo:" & IdRecaudo & ", Autorizacion: " & Autorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarRecaudoInfoSRE", "IdRecaudo:" & IdRecaudo & ", Autorizacion: " & Autorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CrearServicioSRE(ByVal IdServicio As Integer, ByVal Descripcion As String)
        Try
            ODatos.CrearServicioSRE(IdServicio, Descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CrearServicioSRE", "IdServicio:" & IdServicio & "Descripcion: " & Descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CrearServicioSRE", "IdServicio:" & IdServicio & "Descripcion: " & Descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub AsignarServicioAEmpresa(ByVal IdEmpresa As Integer, ByVal IdServicio As Integer, ByVal MinConsumoPorDia As Decimal, ByVal EsActivo As Boolean)
        Try

            ODatos.AsignarServicioAEmpresa(IdEmpresa, IdServicio, MinConsumoPorDia, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AsignarServicioAEmpresa", "IdEmpresa:" & IdEmpresa & "IdServicio: " & IdServicio & "MinConsumoPorDia: " & MinConsumoPorDia, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AsignarServicioAEmpresa", "IdEmpresa:" & IdEmpresa & "IdServicio: " & IdServicio & "MinConsumoPorDia: " & MinConsumoPorDia, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub AsignarServicioAEmpresa(ByVal IdEmpresa As Integer, ByVal IdServicio As Integer)
        Try

            ODatos.AsignarServicioAEmpresa(IdEmpresa, IdServicio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AsignarServicioAEmpresa", "IdEmpresa:" & IdEmpresa & "IdServicio: " & IdServicio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AsignarServicioAEmpresa", "IdEmpresa:" & IdEmpresa & "IdServicio: " & IdServicio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ValidarMinimoTanqueoParaAbonarSRE(ByVal idServicio As Int32, ByVal recibo As Int64) As Boolean
        Try
            Return ODatos.ValidarMinimoTanqueoParaAbonarSRE(idServicio, recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarMinimoTanqueoParaAbonarSRE", "idServicio: " & idServicio & ", recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarMinimoTanqueoParaAbonarSRE", "idServicio: " & idServicio & ", recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarMinimoTanqueoParaAbonarSRE(ByVal idServicio As Int32, ByVal recibo As Int64, ByVal IdEmpresa As Integer) As Boolean
        Try
            Return ODatos.ValidarMinimoTanqueoParaAbonarSRE(idServicio, recibo, IdEmpresa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarMinimoTanqueoParaAbonarSRE", "idServicio: " & idServicio & ", recibo: " & recibo & ", IdEmpresa: " & IdEmpresa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarMinimoTanqueoParaAbonarSRE", "idServicio: " & idServicio & ", recibo: " & recibo & ", IdEmpresa: " & IdEmpresa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarVentaparaAbonarSRE(ByVal recibo As Int64) As Boolean

        Try
            Return ODatos.ValidarVentaparaAbonarSRE(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVentaparaAbonarSRE", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVentaparaAbonarSRE", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarPagoExtraOrdinarioSRE(ByVal IdEmpresa As Integer, ByVal NrAutorizacion As Nullable(Of Integer), ByVal Cedula As String, ByVal Empleado As String, ByVal clave As String, ByVal placa As String, ByVal IdServicio As Integer, ByVal Valor As Decimal, ByVal EsAnulado As Boolean, ByVal NumeroSeguridad As String, ByVal CodigoTarjeta As String, ByVal IdTipoLecturaTarjeta As Int32, ByVal IdConcepto As Int32, ByVal recibo As Int64) As Int32
        Try
            Return ODatos.InsertarPagoExtraOrdinarioSRE(IdEmpresa, NrAutorizacion, Cedula, Empleado, clave, placa, IdServicio, Valor, EsAnulado, NumeroSeguridad, CodigoTarjeta, IdTipoLecturaTarjeta, IdConcepto, recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioSRE", "IdEmpresa:" & IdEmpresa & "Cedula: " & Cedula & ", empleado: " & Empleado & " , clave: " & clave & " , placa: " & placa & " , IdServicio: " & IdServicio & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioSRE", "IdEmpresa:" & IdEmpresa & "Cedula: " & Cedula & ", empleado: " & Empleado & " , clave: " & clave & " , placa: " & placa & " , IdServicio: " & IdServicio & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function InsertarPagoExtraOrdinarioSRE(ByVal IdEmpresa As Integer, ByVal NrAutorizacion As Nullable(Of Integer), ByVal Cedula As String, ByVal Empleado As String, ByVal clave As String, ByVal placa As String, ByVal IdServicio As Integer, ByVal Valor As Decimal, ByVal EsAnulado As Boolean, ByVal NumeroSeguridad As String, ByVal CodigoTarjeta As String, ByVal IdTipoLecturaTarjeta As Int32, ByVal IdConcepto As Int32, ByVal recibo As Int64, ByVal IdEstacion As Integer) As Int32
        Try
            Return ODatos.InsertarPagoExtraOrdinarioSRE(IdEmpresa, NrAutorizacion, Cedula, Empleado, clave, placa, IdServicio, Valor, EsAnulado, NumeroSeguridad, CodigoTarjeta, IdTipoLecturaTarjeta, IdConcepto, recibo, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioSRE", "IdEmpresa:" & IdEmpresa & "Cedula: " & Cedula & ", empleado: " & Empleado & " , clave: " & clave & " , placa: " & placa & " , IdServicio: " & IdServicio & ", Valor: " & Valor & ", IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioSRE", "IdEmpresa:" & IdEmpresa & "Cedula: " & Cedula & ", empleado: " & Empleado & " , clave: " & clave & " , placa: " & placa & " , IdServicio: " & IdServicio & ", Valor: " & Valor & ", IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function





    Public Function InsertarPagoExtraOrdinarioSRE(ByVal IdEmpresa As Integer, ByVal NrAutorizacion As Nullable(Of Integer), ByVal Cedula As String, ByVal Empleado As String, ByVal clave As String, ByVal placa As String, ByVal IdServicio As Integer, ByVal Valor As Decimal, ByVal EsAnulado As Boolean) As Int32
        Try
            Return ODatos.InsertarPagoExtraOrdinarioSRE(IdEmpresa, NrAutorizacion, Cedula, Empleado, clave, placa, IdServicio, Valor, EsAnulado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioSRE", "IdEmpresa:" & IdEmpresa & "Cedula: " & Cedula & ", empleado: " & Empleado & " , clave: " & clave & " , placa: " & placa & " , IdServicio: " & IdServicio & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioSRE", "IdEmpresa:" & IdEmpresa & "Cedula: " & Cedula & ", empleado: " & Empleado & " , clave: " & clave & " , placa: " & placa & " , IdServicio: " & IdServicio & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function InsertarPagoExtraOrdinarioSRE(ByVal IdEmpresa As Integer, ByVal NrAutorizacion As Nullable(Of Integer), ByVal Cedula As String, ByVal Empleado As String, ByVal clave As String, ByVal placa As String, ByVal IdServicio As Integer, ByVal Valor As Decimal, ByVal EsAnulado As Boolean, ByVal IdEstacion As Int16) As Int32
        Try
            Return ODatos.InsertarPagoExtraOrdinarioSRE(IdEmpresa, NrAutorizacion, Cedula, Empleado, clave, placa, IdServicio, Valor, EsAnulado, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioSRE", "IdEmpresa:" & IdEmpresa & "Cedula: " & Cedula & ", empleado: " & Empleado & " , clave: " & clave & " , placa: " & placa & " , IdServicio: " & IdServicio & ", Valor: " & Valor & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioSRE", "IdEmpresa:" & IdEmpresa & "Cedula: " & Cedula & ", empleado: " & Empleado & " , clave: " & clave & " , placa: " & placa & " , IdServicio: " & IdServicio & ", Valor: " & Valor & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarEmpresaSRE(ByVal IdEmpresa As Integer, ByVal Nit As String, ByVal Nombre As String)
        Try
            ODatos.ActualizarEmpresaSRE(IdEmpresa, Nit, Nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEmpresaSRE", "IdEmpresa: " & IdEmpresa & ", Nit: " & Nit & ", Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEmpresaSRE", "IdEmpresa: " & IdEmpresa & ", Nit: " & Nit & ", Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarEmpresaSRE(ByVal IdEmpresa As Integer, ByVal Nit As String, ByVal Nombre As String, ByVal Codigo As Int32)
        Try
            ODatos.InsertarEmpresaSRE(IdEmpresa, Nit, Nombre, Codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEmpresaSRE", "IdEmpresa: " & IdEmpresa & ", Nit: " & Nit & ", Nombre: " & Nombre & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEmpresaSRE", "IdEmpresa: " & IdEmpresa & ", Nit: " & Nit & ", Nombre: " & Nombre & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function EsEmpresaInfoTaxi(ByVal IdEmpresa As Integer) As Boolean
        Try
            Return ODatos.EsEmpresaInfoTaxi(IdEmpresa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsEmpresaInfoTaxi", "IdEmpresa : " & IdEmpresa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsEmpresaInfoTaxi", "IdEmpresa : " & IdEmpresa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsEmpresaInfoTaxi(ByVal IdEmpresa As Integer, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.EsEmpresaInfoTaxi(IdEmpresa, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsEmpresaInfoTaxi", "IdEstacion: " & idEstacion & "IdEmpresa : " & IdEmpresa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsEmpresaInfoTaxi", "IdEstacion: " & idEstacion & "IdEmpresa : " & IdEmpresa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsValidacionEmpresaEnCDC(ByVal Idempresa As Integer) As Boolean
        Try
            Return ODatos.EsValidacionEmpresaEnCDC(Idempresa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsValidacionEmpresaEnCDC", "Idempresa: " & Idempresa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsValidacionEmpresaEnCDC", "Idempresa: " & Idempresa, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Sub InsertarEmpresaSRE(ByVal IdEmpresa As Integer, ByVal Nit As String, ByVal Nombre As String, ByVal Codigo As Int32, ByVal AplicaConsumoMinimo As Boolean, ByVal ServicioWeb As String)
        Try
            ODatos.InsertarEmpresaSRE(IdEmpresa, Nit, Nombre, Codigo, AplicaConsumoMinimo, ServicioWeb)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEmpresaSRE", "IdEmpresa: " & IdEmpresa & ", Nit: " & Nit & ", Nombre: " & Nombre & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEmpresaSRE", "IdEmpresa: " & IdEmpresa & ", Nit: " & Nit & ", Nombre: " & Nombre & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function RecuperarInformacionEmpresaSRE(ByVal Recibo As Long, ByVal IdEmpresa As Integer) As System.Data.IDataReader
        Try
            Return ODatos.RecuperarInformacionEmpresaSRE(Recibo, IdEmpresa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionEmpresaSRE", "Recibo: " & Recibo & " Idempresa: " & IdEmpresa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionEmpresaSRE", "Recibo: " & Recibo & " Idempresa: " & IdEmpresa, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarInformacionEmpresaSRE(ByVal Recibo As Long, ByVal IdEmpresa As Integer, ByVal IdEstacion As Int16) As System.Data.IDataReader
        Try
            Return ODatos.RecuperarInformacionEmpresaSRE(Recibo, IdEmpresa, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionEmpresaSRE", "Recibo: " & Recibo & " Idempresa: " & IdEmpresa & "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionEmpresaSRE", "Recibo: " & Recibo & " Idempresa: " & IdEmpresa & "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarRecaudoSRE(ByVal Empleado As String, ByVal Clave As String, ByVal Recibo As Long, ByVal IdServicio As Integer, ByVal IdEmpresa As Integer, ByVal IdEstacion As Int16) As Boolean

        Try
            Return ODatos.ValidarRecaudoSRE(Empleado, Clave, Recibo, IdServicio, IdEmpresa, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarRecaudoSRE", "Empleado: " & Empleado & " Clave: " & Clave & " Recibo: " & Recibo & " IdServicio: " & IdServicio & " IdEmpresa: " & IdEmpresa & " IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarRecaudoSRE", "Empleado: " & Empleado & " Clave: " & Clave & " Recibo: " & Recibo & " IdServicio: " & IdServicio & " IdEmpresa: " & IdEmpresa & " IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarRecaudoSRE(ByVal Empleado As String, ByVal Clave As String, ByVal Recibo As Long, ByVal IdServicio As Integer, ByVal IdEmpresa As Integer) As Boolean

        Try
            Return ODatos.ValidarRecaudoSRE(Empleado, Clave, Recibo, IdServicio, IdEmpresa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarRecaudoSRE", "Empleado: " & Empleado & " Clave: " & Clave & " Recibo: " & Recibo & " IdServicio: " & IdServicio & " IdEmpresa: " & IdEmpresa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarRecaudoSRE", "Empleado: " & Empleado & " Clave: " & Clave & " Recibo: " & Recibo & " IdServicio: " & IdServicio & " IdEmpresa: " & IdEmpresa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarServiciosAsignadosEmpresasSRE(ByVal IdEmpresa As Integer, ByVal IdEstacion As Integer) As System.Data.IDataReader

        Try
            Return ODatos.RecuperarServiciosAsignadosEmpresasSRE(IdEmpresa, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarServiciosAsignadosEmpresasSRE", "IdEmpresa: " & IdEmpresa & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarServiciosAsignadosEmpresasSRE", "IdEmpresa: " & IdEmpresa & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarServiciosAsignadosEmpresasSRE(ByVal IdEmpresa As Integer) As System.Data.IDataReader

        Try
            Return ODatos.RecuperarServiciosAsignadosEmpresasSRE(IdEmpresa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarServiciosAsignadosEmpresasSRE", "IdEmpresa: " & IdEmpresa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarServiciosAsignadosEmpresasSRE", "IdEmpresa: " & IdEmpresa, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarListadeEmpresasSRE() As System.Data.IDataReader
        Try
            Return ODatos.RecuperarListadeEmpresasSRE()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarListadeEmpresasSRE", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarListadeEmpresasSRE", "", "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Function RecuperarListadeEmpresasSRE(ByVal IdEstacion As Integer) As System.Data.IDataReader
        Try
            Return ODatos.RecuperarListadeEmpresasSRE(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarListadeEmpresasSRE", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarListadeEmpresasSRE", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Function RecuperarListadeEmpresasConPagosEnlineaSRE() As System.Data.IDataReader
        Try
            Return ODatos.RecuperarListadeEmpresasConPagosEnlineaSRE()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarListadeEmpresasConPagosEnlineaSRE", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarListadeEmpresasConPagosEnlineaSRE", "", "FallaStoredProcedure")
            Throw
        End Try

    End Function



    Public Function RecuperarListadeEmpresasConPagosEnlineaSRE(ByVal IdEstacion As Integer) As System.Data.IDataReader
        Try
            Return ODatos.RecuperarListadeEmpresasConPagosEnlineaSRE(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarListadeEmpresasConPagosEnlineaSRE", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarListadeEmpresasConPagosEnlineaSRE", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Sub InsertarValorConsumoMinEmpresaServicioSRE(ByVal IdServicio As Integer, ByVal IdEmpresa As Integer, ByVal MinConsumoPorDia As Decimal)
        Try
            ODatos.InsertarValorConsumoMinEmpresaServicioSRE(IdServicio, IdEmpresa, MinConsumoPorDia)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarValorConsumoMinEmpresaServicioSRE", "IdServicio: " & IdServicio & "IdEmpresa: " & IdEmpresa & "AplicaConsumoMinimo: " & MinConsumoPorDia, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarValorConsumoMinEmpresaServicioSRE", "IdServicio: " & IdServicio & "IdEmpresa: " & IdEmpresa & "AplicaConsumoMinimo: " & MinConsumoPorDia, "FallaStoredProcedure")
            Throw
        End Try

    End Sub



    Public Function RecuperarServicios() As DataTable

        Try
            Return ODatos.RecuperarServicios()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarServicios", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarServicios", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarServicios(ByVal IdEstacion As Int32) As DataTable

        Try
            Return ODatos.RecuperarServicios(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarServicios", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarServicios", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecaudoEmpresa(ByVal IdRecaudo As Integer, ByVal IdEstacion As Int16) As IDataReader

        Try
            Return ODatos.RecuperarRecaudoEmpresa(IdRecaudo, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudoEmpresa", "IdRecaudo: " & IdRecaudo & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudoEmpresa", "IdRecaudo: " & IdRecaudo & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecaudoEmpresa(ByVal IdRecaudo As Integer) As IDataReader

        Try
            Return ODatos.RecuperarRecaudoEmpresa(IdRecaudo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudoEmpresa", "IdRecaudo: " & IdRecaudo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudoEmpresa", "IdRecaudo: " & IdRecaudo, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarImpresoraPorIsla(ByVal IdIsla As Integer) As String

        Try
            Return ODatos.RecuperarImpresoraPorIsla(IdIsla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorIsla", "IdIsla: " & IdIsla, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorIsla", "IdIsla: " & IdIsla, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarRecaudoEmpresaComunicador(ByVal IdRecaudo As Integer) As IDataReader

        Try
            Return ODatos.RecuperarRecaudoEmpresaComunicador(IdRecaudo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudoEmpresaComunicador", "IdRecaudo: " & IdRecaudo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudoEmpresaComunicador", "IdRecaudo: " & IdRecaudo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpresasServicio(ByVal IdServicio As Integer) As DataTable

        Try
            Return ODatos.RecuperarEmpresasServicio(IdServicio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpresaporServicios", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpresaporServicios", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarEmpresasServicio(ByVal IdServicio As Integer, ByVal idEstacion As Int16) As DataTable

        Try
            Return ODatos.RecuperarEmpresasServicio(IdServicio, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpresaporServicios", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpresaporServicios", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarEmpresa(ByVal IdEmpresa As Integer) As DataTable

        Try
            Return ODatos.RecuperarEmpresa()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpresa", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSEmpresa", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecaudosPorEmpresaTurno(ByVal IdEmpresa As Integer, ByVal IdServicio As Integer, ByVal IdTurno As Int32) As DataTable

        Try
            Return ODatos.RecuperarRecaudosPorEmpresaTurno(IdEmpresa, IdServicio, IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudosPorEmpresaTurno", "IdEmpresa: " & IdEmpresa & ", IdServicio: " & IdServicio & ", IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudosPorEmpresaTurno", "IdEmpresa: " & IdEmpresa & ", IdServicio: " & IdServicio & ", IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarRecaudosPorEmpresaTurno(ByVal IdEmpresa As Integer, ByVal IdServicio As Integer, ByVal IdTurno As Int32, ByVal idEstacion As Int16) As DataTable

        Try
            Return ODatos.RecuperarRecaudosPorEmpresaTurno(IdEmpresa, IdServicio, IdTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudosPorEmpresaTurno", "IdEstacion: " & idEstacion & "IdEmpresa: " & IdEmpresa & ", IdServicio: " & IdServicio & ", IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudosPorEmpresaTurno", "IdEstacion: " & idEstacion & "IdEmpresa: " & IdEmpresa & ", IdServicio: " & IdServicio & ", IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesRecaudoPorEmpresa(ByVal IdEmpresa As Integer, ByVal IdServicio As Integer, ByVal Fecha As String) As Decimal

        Try
            Return ODatos.RecuperarTotalesRecaudoporEmpresa(IdEmpresa, IdServicio, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesRecaudoporEmpresa", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesRecaudoporEmpresa", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesRecaudoPorEmpresa(ByVal IdEmpresa As Integer, ByVal IdServicio As Integer, ByVal Fecha As String, ByVal idEstacion As Int16) As Decimal

        Try
            Return ODatos.RecuperarTotalesRecaudoporEmpresa(IdEmpresa, IdServicio, Fecha, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesRecaudoporEmpresa", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesRecaudoporEmpresa", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesRecaudoPorEmpresaDia(ByVal IdEmpresa As Integer, ByVal IdServicio As Integer, ByVal Fecha As String) As Decimal

        Try
            Return ODatos.RecuperarTotalesRecaudoporEmpresaDia(IdEmpresa, IdServicio, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesRecaudoporEmpresaDia", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesRecaudoporEmpresaDia", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesRecaudoPorEmpresaDia(ByVal IdEmpresa As Integer, ByVal IdServicio As Integer, ByVal Fecha As String, ByVal idEstacion As Int16) As Decimal

        Try
            Return ODatos.RecuperarTotalesRecaudoporEmpresaDia(IdEmpresa, IdServicio, Fecha, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesRecaudoporEmpresaDia", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesRecaudoporEmpresaDia", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region




#Region "DTI"
    Public Function RecuperarDispositivosDti() As IDataReader
        Try
            Return ODatos.RecuperarDispositivosDti()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivosDti", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivosDti", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarDispositivosDTIGrilla() As DataSet
        Try
            Return ODatos.RecuperarDispositivosDTIGrilla()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivosDTIGrilla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivosDTIGrilla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub InsertarDispositivoDTI(ByVal Descripcion As String, ByVal Puerto As Int32, ByVal PuertoIP As String, ByVal TipoComunicacion As String)
        Try
            ODatos.InsertarDispositivoDTI(Descripcion, Puerto, PuertoIP, TipoComunicacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarDispositivoDTI", "Descripcion: " & Descripcion & " , Puerto: " & Puerto & " , TipoComunicacion: " & TipoComunicacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarDispositivoDTI", "Descripcion: " & Descripcion & " , Puerto: " & Puerto & " , TipoComunicacion: " & TipoComunicacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarDispositivoDTI(ByVal IdLectorDTI As Int32, ByVal Descripcion As String, ByVal Puerto As Int32, ByVal PuertoIP As String, ByVal TipoComunicacion As String)
        Try
            ODatos.InsertarDispositivoDTI(IdLectorDTI, Descripcion, Puerto, PuertoIP, TipoComunicacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarDispositivoDTI", "IdLectorDTI: " & IdLectorDTI & "Descripcion: " & Descripcion & " , Puerto: " & Puerto & " , TipoComunicacion: " & TipoComunicacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarDispositivoDTI", "IdLectorDTI: " & IdLectorDTI & "Descripcion: " & Descripcion & " , Puerto: " & Puerto & " , TipoComunicacion: " & TipoComunicacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarDispositivosDTICara() As DataSet
        Try
            Return ODatos.RecuperarDispositivosDTICara()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivosDTICara", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivosDTICara", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDescripcionDTI() As DataSet
        Try
            Return ODatos.RecuperarDescripcionDTI()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDescripcionDTI", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDescripcionDTI", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConfiguraCaraDTI() As DataSet
        Try
            Return ODatos.RecuperarConfiguraCaraDTI()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConfiguraCaraDTI", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConfiguraCaraDTI", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConfiguraCaraDTI(ByVal IdDTI As Int32) As DataSet
        Try
            Return ODatos.RecuperarConfiguraCaraDTI(IdDTI)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConfiguraCaraDTI", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConfiguraCaraDTI", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarDispositivoDTI(ByVal IdDispositivoDTI As Int32)
        Try
            ODatos.EliminarDispositivoDTI(IdDispositivoDTI)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarDispositivoDTI", "IdDispositivoDTI: " & IdDispositivoDTI, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarDispositivoDTI", "IdDispositivoDTI: " & IdDispositivoDTI, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarDispositivoDTICara(ByVal IdDispositivoCara As Int32, ByVal IdDTI As Int32, ByVal IdCara As Int32, ByVal Serial As String)
        Try
            ODatos.ActualizarDispositivoDTICara(IdDispositivoCara, IdDTI, IdCara, Serial)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDispositivoDTICara", "IdDispositivoCara: " & IdDispositivoCara & "IdDTI: " & IdDTI & " IdCara: " & IdCara & " Serial: " & Serial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDispositivoDTICara", "IdDispositivoCara: " & IdDispositivoCara & "IdDTI: " & IdDTI & " IdCara: " & IdCara & " Serial: " & Serial, "FallaStoredProcedure")
        End Try
    End Sub

    Public Sub InsertarDispositivoDTICara(ByVal IdDTI As Int32, ByVal IdCara As Int32, ByVal Serial As String)
        Try
            ODatos.InsertarDispositivoDTICara(IdDTI, IdCara, Serial)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarDispositivoDTICara", "IdDTI: " & IdDTI & "IdCara: " & IdCara & " , Serial: " & Serial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarDispositivoDTICara", "IdDTI: " & IdDTI & "IdCara: " & IdCara & " , Serial: " & Serial, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub EliminarDispositivoDTICara(ByVal IdDispositivoCara As Int32)
        Try
            ODatos.EliminarDispositivoDTICara(IdDispositivoCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarDispositivoDTICara", "IdDispositivoCara: " & IdDispositivoCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarDispositivoDTICara", "IdDispositivoCara: " & IdDispositivoCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


#End Region


#Region "CHIP MADRE"

    Public Function ValidarChipMadre(ByVal ROM As String) As Boolean
        Try
            Return ODatos.ValidarChipMadre(ROM)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarChipMadre", "ROM: " & ROM, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarChipMadre", "ROM: " & ROM, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNroTanqueosConChipMadre(ByVal Placa As String) As Integer
        Try
            Return ODatos.RecuperarNroTanqueosConChipMadre(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarChipMadre", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarChipMadre", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region



#Region "Privados ds"

    Public Sub CargarRazonSocial(ByVal nombre As String)
        Try
            ODatos.CargarRazonSocial(nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarRazonSocial", "Nombre: " & nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarRazonSocial", "Nombre: " & nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarParametro(ByVal nombre As String, ByVal IdEstacion As Int16) As String
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarParametro(nombre)
            Else
                Return ODatos.RecuperarParametro(nombre, IdEstacion)
            End If
        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarParametro", "Nombre: " & nombre, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarParametro", "IdEstacion: " & IdEstacion & "Nombre: " & nombre, "FallaStoredProcedure")
            End If
            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarParametro", "Nombre: " & nombre, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarParametro", "IdEstacion: " & IdEstacion & "Nombre: " & nombre, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarParametro(ByVal nombre As String) As String
        Try
            Return ODatos.RecuperarParametro(nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarParametro", "Nombre: " & nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarParametro", "Nombre: " & nombre, "FallaStoredProcedure")
            Throw

        End Try
    End Function

    Public Function ValidarFechaAnulacionDocumento(ByVal prefijo As String, ByVal numero As String) As String
        Try
            Return ODatos.ValidarFechaAnulacionDocumento(prefijo, numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarFechaAnulacionDocumento", "Prefijo: " & prefijo & ", Numero: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarFechaAnulacionDocumento", "Prefijo: " & prefijo & ", Numero: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Private Shared Function ValidarFecha(ByVal fecha As Date) As Boolean
        Dim OHelper As New Helper
        'TODO:Comentarear Validacion fecha conversion por parametro para otras versiones diferentes a mexico
        'If CBool(OHelper.RecuperarParametro("ValidarFechaConversion")) Then
        If CDate(fecha.ToString("dd/MM/yyyy")) < CDate(Now.ToString("dd/MM/yyyy")) Then
            Return False
        Else
            Return True
        End If
        'Else
        'Return True
        'End If
    End Function

#End Region




#Region "Validacion de ventas"
    Public Function ValidarAutorizacionVentasPorCara(ByVal Cara As Int16) As Boolean
        Try
            Return ODatos.ValidarAutorizacionVentasPorCara(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarAutorizacionVentasPorCara", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarAutorizacionVentasPorCara", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarDatosAutorizacionVenta(ByVal Cara As Int16) As IDataReader
        Try
            Return ODatos.RecuperarDatosAutorizacionVenta(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosAutorizacionVenta", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosAutorizacionVenta", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Principales"
    Public Function RecuperarIdVentaCanastillaPorRecibo(ByVal recibo As Int32) As Int32
        Try
            Return ODatos.RecuperarIdVentaCanastillaPorRecibo(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdVentaCanastillaPorRecibo", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdVentaCanastillaPorRecibo", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsEstacionAfiliada() As Boolean
        Try
            Return ODatos.EsEstacionAfiliada()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsEstacionAfiliada", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsEstacionAfiliada", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosDataTrack(ByVal Recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarDatosDataTrack(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosDataTrack", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosDataTrack", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsEstacionAfiliada(ByVal IdEstacion As Int16) As Boolean
        Try
            Return ODatos.EsEstacionAfiliada(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsEstacionAfiliada", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsEstacionAfiliada", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsEstacionPropia() As Boolean
        Try
            Return ODatos.EsEstacionPropia()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsEstacionPropia", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsEstacionPropia", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPuertosImpresoras() As DataSet
        Try
            Return ODatos.RecuperarPuertosImpresoras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuertosImpresoras", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertosImpresoras", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPlacaPorRecibo(ByVal recibo As Int64) As String
        Try
            Return ODatos.RecuperarPlacaPorRecibo(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPlacaPorRecibo", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaPorRecibo", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdGerenciamientoPorIdAprobacion(ByVal IdAprobacion As String) As String
        Try
            Return ODatos.RecuperarIdGerenciamientoPorIdAprobacion(IdAprobacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdGerenciamientoPorIdAprobacion", "IdAprobacion: " & IdAprobacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdGerenciamientoPorIdAprobacion", "IdAprobacion: " & IdAprobacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub InsertarAutorizaGerenciamiento(ByVal Autorizacion As String, ByVal Estado As Int16)
        Try
            ODatos.InsertarAutorizaGerenciamiento(Autorizacion, Estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAutorizaGerenciamiento", "Autorizacion: " & Autorizacion & ", Estado: " & Estado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAutorizaGerenciamiento", "Autorizacion: " & Autorizacion & ", Estado: " & Estado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function RecuperarPlacaPorRecibo(ByVal recibo As Int64, ByVal IdEstacion As Integer) As String
        Try
            Return ODatos.RecuperarPlacaPorRecibo(recibo, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPlacaPorRecibo", "Recibo: " & recibo & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaPorRecibo", "Recibo: " & recibo & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function CerrarDiaImpresora(ByVal serial As String, ByVal fechaActual As DateTime) As Int32
        Try
            Return ODatos.CerrarDiaImpresora(serial, fechaActual)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CerrarDiaImpresora", "Serial: " & serial & ", Fecha: " & fechaActual, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarDiaImpresora", "Serial: " & serial & ", Fecha: " & fechaActual, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFactoresCaras() As DataSet
        Try
            Return ODatos.RecuperarFactoresCaras
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFactoresCaras", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFactoresCaras", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSerialImpresoraPorPuerto(ByVal puerto As String) As String
        Try
            Return ODatos.RecuperarSerialImpresoraPorPuerto(puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSerialImpresoraPorPuerto", "Puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSerialImpresoraPorPuerto", "Puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdCierreImpresoraPorFecha(ByVal serial As String, ByVal fecha As String) As Int32
        Try
            Return ODatos.RecuperarIdCierreImpresoraPorFecha(serial, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdCierreImpresoraPorFecha", "Serial: " & serial & ", Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdCierreImpresoraPorFecha", "Serial: " & serial & ", Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarHoraFinTurnoHorarioActual() As String
        Try
            Return ODatos.RecuperarHoraFinTurnoHorarioActual()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHoraFinTurnoHorarioActual", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHoraFinTurnoHorarioActual", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarHoraFinTurnoHorarioActual(ByVal idEstacion As Int16) As String
        Try
            Return ODatos.RecuperarHoraFinTurnoHorarioActual(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHoraFinTurnoHorarioActual", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHoraFinTurnoHorarioActual", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCierreImpresora(ByVal idImpresoraCierre As Int32) As DataSet
        Try
            Return ODatos.RecuperarCierreImpresora(idImpresoraCierre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCierreImpresora", "IdImpresoraCierre: " & idImpresoraCierre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCierreImpresora", "IdImpresoraCierre: " & idImpresoraCierre, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCierreParcialImpresora(ByVal serial As String, ByVal fechaActual As DateTime) As DataSet
        Try
            Return ODatos.RecuperarCierreParcialImpresora(serial, fechaActual)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCierreParcialImpresora", "Serial: " & serial & ", Fecha: " & fechaActual, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCierreParcialImpresora", "Serial: " & serial & ", Fecha: " & fechaActual, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesFormaPagoImpresora(ByVal idImpresoraCierre As Int32) As DataSet
        Try
            Return ODatos.RecuperarTotalesFormaPagoImpresora(idImpresoraCierre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesFormaPagoImpresora", "IdImpresoraCierre: " & idImpresoraCierre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesFormaPagoImpresora", "IdImpresoraCierre: " & idImpresoraCierre, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesProductosImpresora(ByVal idImpresoraCierre As Int32) As DataSet
        Try
            Return ODatos.RecuperarTotalesProductosImpresora(idImpresoraCierre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesProductosImpresora", "IdImpresoraCierre: " & idImpresoraCierre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesProductosImpresora", "IdImpresoraCierre: " & idImpresoraCierre, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesParcialesFormaPagoImpresora(ByVal serial As String, ByVal fechaActual As DateTime) As DataSet
        Try
            Return ODatos.RecuperarTotalesParcialesFormaPagoImpresora(serial, fechaActual)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesParcialesFormaPagoImpresora", "Serial: " & serial & ", Fecha: " & fechaActual, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesParcialesFormaPagoImpresora", "Serial: " & serial & ", Fecha: " & fechaActual, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesParcialesProductosImpresora(ByVal serial As String, ByVal fechaActual As DateTime) As DataSet
        Try
            Return ODatos.RecuperarTotalesParcialesProductosImpresora(serial, fechaActual)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesParcialesProductosImpresora", "Serial: " & serial & ", Fecha: " & fechaActual, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesParcialesProductosImpresora", "Serial: " & serial & ", Fecha: " & fechaActual, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarOrigenFidelizacion(ByVal descripcion As String)
        Try
            ODatos.InsertarOrigenFidelizacion(descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarOrigenFidelizacion", "Descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarOrigenFidelizacion", "Descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ExisteOrigenFidelizacion(ByVal descripcion As String) As Boolean
        Try
            Return ODatos.ExisteOrigenFidelizacion(descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteOrigenFidelizacion", "Descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteOrigenFidelizacion", "Descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarContraseñaAdmin(ByVal clave As String) As Boolean
        Try
            Return ODatos.ValidarContraseñaAdmin(clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarContraseñaAdmin", "Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarContraseñaAdmin", "Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarPuntosATarjeta(ByVal numero As String, ByVal puntos As Int32, ByVal idOrigen As Int32, ByVal referencia As String, ByVal idCampaña As Int32, ByVal fecha As DateTime)
        Try
            ODatos.InsertarPuntosATarjeta(numero, puntos, idOrigen, referencia, idCampaña, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPuntosATarjeta", "Numero: " & numero & ", Puntos: " & puntos & ", Id Origen: " & idOrigen & ", Referencia: " & referencia & ", Id Campaña: " & idCampaña & ", Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPuntosATarjeta", "Numero: " & numero & ", Puntos: " & puntos & ", Id Origen: " & idOrigen & ", Referencia: " & referencia & ", Id Campaña: " & idCampaña & ", Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarPagoPredeterminado(ByVal contrato As String, ByVal valor As Decimal) As Decimal
        Try
            Return ODatos.RecuperarPagoPredeterminado(contrato, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPagoPredeterminado", "Contrato: " & contrato & ", Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPagoPredeterminado", "Contrato: " & contrato & ", Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteContrato(ByVal numero As String) As Boolean
        Try
            Return ODatos.ExisteContrato(numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteContrato", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteContrato", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub FidelizarVentaPeru(ByVal recibo As Int64, ByVal idRedFidelizacion As Short, ByVal numero As String)
        Try
            ODatos.FidelizarVentaPeru(recibo, idRedFidelizacion, numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FidelizarVentaPeru", "Recibo: " & recibo & " , Numero: " & numero & " , RedFidelizacion: " & idRedFidelizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FidelizarVentaPeru", "Recibo: " & recibo & " , Numero: " & numero & " , RedFidelizacion: " & idRedFidelizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub FidelizarVentaCanastilla(ByVal recibo As Int64, ByVal idRedFidelizacion As Short, ByVal numero As String, ByVal IdTipoIdentificacion As Int32)
        Try
            ODatos.FidelizarVentaCanastilla(recibo, idRedFidelizacion, numero, IdTipoIdentificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FidelizarVentaCanastilla", "Recibo: " & recibo & " , Numero: " & numero & " , RedFidelizacion: " & idRedFidelizacion & " , IdTipoIdentificacion: " & IdTipoIdentificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FidelizarVentaPeru", "Recibo: " & recibo & " , Numero: " & numero & " , RedFidelizacion: " & idRedFidelizacion & " , IdTipoIdentificacion: " & IdTipoIdentificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub FidelizarVenta(ByVal recibo As Int64, ByVal idRedFidelizacion As Short, ByVal numero As String)
        Try
            ODatos.FidelizarVenta(recibo, idRedFidelizacion, numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FidelizarVenta", "Recibo: " & recibo & " , Numero: " & numero & " , RedFidelizacion: " & idRedFidelizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FidelizarVenta", "Recibo: " & recibo & " , Numero: " & numero & " , RedFidelizacion: " & idRedFidelizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarPremioFidelizacionEnCampaña(ByVal idCampaña As Int32, ByVal idPremio As Int32)
        Try
            ODatos.InsertarPremioFidelizacionEnCampaña(idCampaña, idPremio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPremioFidelizacionEnCampaña", "Id Campaña: " & idCampaña & " , Id Premio: " & idPremio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPremioFidelizacionEnCampaña", "Id Campaña: " & idCampaña & " , Id Premio: " & idPremio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarPremioFidelizacionEnCampaña(ByVal idCampaña As Int32, ByVal idPremio As Int32)
        Try
            ODatos.EliminarPremioFidelizacionEnCampaña(idCampaña, idPremio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarPremioFidelizacionEnCampaña", "Id Campaña: " & idCampaña & " , Id Premio: " & idPremio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarPremioFidelizacionEnCampaña", "Id Campaña: " & idCampaña & " , Id Premio: " & idPremio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarPremioFidelizacion(ByVal descripcion As String, ByVal puntos As Int32)
        Try
            ODatos.InsertarPremioFidelizacion(descripcion, puntos)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPremioFidelizacion", "Descripcion: " & descripcion & " , Puntos: " & puntos, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPremioFidelizacion", "Descripcion: " & descripcion & " , Puntos: " & puntos, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ExistePremioFidelizacion(ByVal descripcion As String) As Boolean
        Try
            Return ODatos.ExistePremioFidelizacion(descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExistePremioFidelizacion", "Descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExistePremioFidelizacion", "Descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPuntosDisponiblesPorCampaña(ByVal idCampaña As Int32, ByVal numero As String) As Int32
        Try
            Return ODatos.RecuperarPuntosDisponiblesPorCampaña(idCampaña, numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuntosDisponiblesPorCampaña", "Id Campaña: " & idCampaña & ", Numero de Tarjeta: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuntosDisponiblesPorCampaña", "Id Campaña: " & idCampaña & ", Numero de Tarjeta: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPremioFidelizacion(ByVal idPremio As Int32) As IDataReader
        Try
            Return ODatos.RecuperarPremioFidelizacion(idPremio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPremioFidelizacion", "Premio: " & idPremio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPremioFidelizacion", "Premio: " & idPremio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarRastroCDC(ByVal identificador As Int64, ByVal tipoIdentificador As Char, ByVal falla As String)
        Try
            ODatos.InsertarRastroCDC(identificador, tipoIdentificador, falla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRastroCDC", "Identificador: " & identificador & ", Tipo Identificador: " & tipoIdentificador & ", Falla: " & falla, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRastroCDC", "Identificador: " & identificador & ", Tipo Identificador: " & tipoIdentificador & ", Falla: " & falla, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarCampaña(ByVal nombre As String, ByVal fechaInicial As Date, ByVal fechaFinal As Date, ByVal consumoMin As Int32, ByVal consumoRedimir As Int32, ByVal lapsoMaximo As Int32)
        Try
            ODatos.InsertarCampaña(nombre, fechaInicial, fechaFinal, consumoMin, consumoRedimir, lapsoMaximo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCampaña", "Nombre: " & nombre & "Fecha Inicial: " & fechaInicial & ", Fecha Final: " & fechaFinal & ", Consumo Min: " & consumoMin & ", Consumo A Redimir: " & consumoRedimir & ", Lapso Maximo: " & lapsoMaximo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCampaña", "Nombre: " & nombre & "Fecha Inicial: " & fechaInicial & ", Fecha Final: " & fechaFinal & ", Consumo Min: " & consumoMin & ", Consumo A Redimir: " & consumoRedimir & ", Lapso Maximo: " & lapsoMaximo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarCampañasActuales() As DataSet
        Try
            Return ODatos.RecuperarCampañasActuales()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCampañasActuales", "---", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCampañasActuales", "---", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsumosAcumulados(ByVal fechaInicial As Date, ByVal fechaFinal As Date, ByVal consumoMin As Int32, ByVal consumoRedimir As Int32, ByVal numero As String) As DataSet
        Try
            Return ODatos.RecuperarConsumosAcumulados(fechaInicial, fechaFinal, consumoMin, consumoRedimir, numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsumosAcumulados", "Fecha Inicial: " & fechaInicial & ", Fecha Final: " & fechaFinal & ", Consumo Min: " & consumoMin & ", Consumo A Redimir: " & consumoRedimir & ", Numero: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsumosAcumulados", "Fecha Inicial: " & fechaInicial & ", Fecha Final: " & fechaFinal & ", Consumo Min: " & consumoMin & ", Consumo A Redimir: " & consumoRedimir & ", Numero: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSaldos(ByVal numero As String, ByVal conductor As String) As DataSet
        Try
            Return ODatos.RecuperarSaldos(numero, conductor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaldos", "Numero: " & numero & ", Conductor: " & conductor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaldos", "Numero: " & numero & ", Conductor: " & conductor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ReCalcularSaldosTarjetas()
        Try
            ODatos.ReCalcularSaldosTarjetas()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ReCalcularSaldosTarjetas", "---", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ReCalcularSaldosTarjetas", "---", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarRedencion(ByVal numero As String, ByVal puntos As Int32, ByVal idCampaña As Int32, ByVal idPremio As String, ByVal observaciones As String)
        Try
            ODatos.InsertarRedencion(numero, puntos, idCampaña, idPremio, observaciones)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRedencion", "Numero: " & numero & ", Puntos: " & puntos & ", Campaña: " & idCampaña & ", Premio: " & idPremio & ", Observaciones: " & observaciones, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRedencion", "Numero: " & numero & ", Puntos: " & puntos & ", Campaña: " & idCampaña & ", Premio: " & idPremio & ", Observaciones: " & observaciones, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ExisteTarjeta(ByVal numero As String) As Boolean
        Try
            Return ODatos.ExisteTarjeta(numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteTarjeta", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteTarjeta", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ESFacturaPrepago(ByVal idFactura As Int32) As Boolean
        Try
            Return ODatos.ESFacturaPrepago(idFactura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESFacturaPrepago", "IdFactura: " & idFactura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESFacturaPrepago", "IdFactura: " & idFactura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ESFacturaTarjeta(ByVal idFactura As Int32) As Boolean
        Try
            Return ODatos.ESFacturaTarjeta(idFactura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESFacturaTarjeta", "IdFactura: " & idFactura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESFacturaTarjeta", "IdFactura: " & idFactura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ESVentaTarjeta(ByVal recibo As Int32) As Boolean
        Try
            Return ODatos.ESVentaTarjeta(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESVentaTarjeta", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESVentaTarjeta", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsUltimoTurnoDia(ByVal IdTurno As Int32) As Boolean
        Try
            Return ODatos.EsUltimoTurnoDia(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsUltimoTurnoDia", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsUltimoTurnoDia", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsUltimoTurnoDia(ByVal IdTurno As Int32, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.EsUltimoTurnoDia(IdTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsUltimoTurnoDia", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsUltimoTurnoDia", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsUltimoTurno(ByVal IdTurno As Int32) As Boolean
        Try
            Return ODatos.EsUltimoTurno(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsUltimoTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsUltimoTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsTurnoHorarioFinalizado(ByVal IdCara As Int16) As Boolean
        Try
            Return ODatos.EsTurnoHorarioFinalizado(IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsTurnoHorarioFinalizado", "IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsTurnoHorarioFinalizado", "IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ManejaVeederRoot() As Boolean
        Try
            Return ODatos.ManejaVeederRoot()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ManejaVeederRoot", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ManejaVeederRoot", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ManejaVeederRoot(ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ManejaVeederRoot(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ManejaVeederRoot", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ManejaVeederRoot", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ESCreditoCovinoc(ByVal placa As String, Optional ByVal IdEstacion As Int16 = 0) As Boolean
        Try
            If IdEstacion = 0 Then
                Return ODatos.ESCreditoCovinoc(placa)
            Else
                Return ODatos.ESCreditoCovinoc(placa, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "ESCreditoCovinoc", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ESCreditoCovinoc", "IdEstacion: " & IdEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "ESCreditoCovinoc", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ESCreditoCovinoc", "IdEstacion: " & IdEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function ESCreditoDeFinanciacionConsumo(ByVal placa As String) As Boolean
        Try
            Return ODatos.ESCreditoDeFinanciacionConsumo(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESCreditoDeFinanciacionConsumo", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESCreditoDeFinanciacionConsumo", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTipoCreditoPorPlaca(ByVal placa As String) As Int32
        Try
            Return ODatos.RecuperarTipoCreditoPorPlaca(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoCreditoPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoCreditoPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ESCreditoCovinocPorIdCredito(ByVal idCredito As Integer) As Boolean
        Try
            Return ODatos.ESCreditoCovinocPorIdCredito(idCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESPagoCreditoCovinoc", "idCredito: " & idCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESPagoCreditoCovinoc", "idCredito: " & idCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ESCreditoCovinocPorIdCredito(ByVal idCredito As Integer, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ESCreditoCovinocPorIdCredito(idCredito, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESPagoCreditoCovinoc", "IdEstacion: " & idEstacion & "idCredito: " & idCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESPagoCreditoCovinoc", "IdEstacion: " & idEstacion & "idCredito: " & idCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ESCreditoCovinoc(ByVal recibo As Long) As Boolean
        Try
            Return ODatos.ESCreditoCovinoc(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESCreditoCovinoc", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESCreditoCovinoc", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    'Public Function ESCreditoCovinoc(ByVal placa As String, ByVal IdEstacion As Short) As Boolean
    '    Try
    '        Return ODatos.ESCreditoCovinoc(placa, IdEstacion)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "ESCreditoCovinoc", "placa: " & placa & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
    '        Throw 
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "ESCreditoCovinoc", "placa: " & placa & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
    '        Throw 
    '    End Try
    'End Function

    Public Function ESCreditoFinanciera(ByVal placa As String) As Boolean
        Try
            Return ODatos.ESCreditoFinanciera(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESCreditoFinanciera", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESCreditoFinanciera", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarIdClienteCDC(ByVal placa As String, Optional ByVal idEstacion As Int16 = 0) As Int32
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarIdClienteCDC(placa)
            Else
                Return ODatos.RecuperarIdClienteCDC(placa, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarIdClienteCDC", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarIdClienteCDC", "IdEstacion " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarIdClienteCDC", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarIdClienteCDC", "IdEstacion " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarIdCreditoCDC(ByVal placa As String) As Int64
        Try
            Return ODatos.RecuperarIdCreditoCDC(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdCreditoCDC", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdCreditoCDC", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarTarjetaEnCampaña(ByVal idCampaña As Int32, ByVal numero As String, ByVal idPremio As Int32) As Boolean
        Try
            Return ODatos.ValidarTarjetaEnCampaña(idCampaña, numero, idPremio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTarjetaEnCampaña", "Id Campaña: " & idCampaña & ", Numero: " & numero & ", Id Premio: " & idPremio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTarjetaEnCampaña", "Id Campaña: " & idCampaña & ", Numero: " & numero & ", Id Premio: " & idPremio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub AsignarTarjetaAConductor(ByVal numero As String, ByVal documento As String)
        Try
            ODatos.AsignarTarjetaAConductor(numero, documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AsignarTarjetaAConductor", "Numero: " & numero & ", Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AsignarTarjetaAConductor", "Numero: " & numero & ", Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub InsertarTarjetaConsumo(ByVal numero As String, ByVal EsActiva As Boolean)
        Try
            ODatos.InsertarTarjetaConsumo(numero, EsActiva)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTarjetaConsumo", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTarjetaConsumo", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub EliminarTarjetaConsumo(ByVal idTarjeta As Integer)
        Try
            ODatos.EliminarTarjetaConsumo(idTarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarTarjetaConsumo", " idTarjeta: " & idTarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarTarjetaConsumo", " idTarjeta: " & idTarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarTarjeta(ByVal numero As String)
        Try
            ODatos.InsertarTarjeta(numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTarjeta", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTarjeta", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarTarjeta(ByVal numero As String)
        Try
            ODatos.EliminarTarjeta(numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarTarjeta", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarTarjeta", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarCliente(ByVal nuip As String, ByVal nombre As String, ByVal direccion As String, ByVal telefono As String, ByVal idFormaPago As Int16, ByVal idCiudad As Int32, ByVal precio As Decimal, ByVal descuento As Decimal, Optional ByVal Contacto As String = "")
        Try
            ODatos.InsertarCliente(nuip, nombre, direccion, telefono, idFormaPago, idCiudad, precio, descuento, COntacto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCliente", "Documento: " & nuip & " , Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono & " , IdFormaPago: " & idFormaPago & " , IdCiudad: " & idCiudad.ToString() & " , Precio: " & precio & " , Descuento: " & descuento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCliente", "Documento: " & nuip & " , Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono & " , IdFormaPago: " & idFormaPago & " , IdCiudad: " & idCiudad.ToString() & " , Precio: " & precio & " , Descuento: " & descuento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarClientesBuscar() As DataSet
        Try
            Return ODatos.RecuperarClientesBuscar()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClientesBuscar", "---", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClientesBuscar", "---", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function
    Public Function RecuperarClientePorId(ByVal idCliente As Int32) As IDataReader
        Try
            Return ODatos.RecuperarClientePorId(idCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClientePorId", "idCliente: " & idCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClientePorId", "idCliente: " & idCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarClientePorIdentificacion(ByVal Identificacion As String) As DataSet
        Try
            Return ODatos.RecuperarClientePorIdentificacion(Identificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClientePorIdentificacion", "Identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClientePorIdentificacion", "Identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarCliente(ByVal nuip As String, ByVal nombre As String, ByVal direccion As String, ByVal telefono As String, ByVal idFormaPago As Int16, ByVal idCiudad As Int32, ByVal precio As Decimal, ByVal descuento As Decimal, Optional ByVal Contacto As String = "")
        Try
            ODatos.ActualizarCliente(nuip, nombre, direccion, telefono, idFormaPago, idCiudad, precio, descuento, Contacto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCliente", "Documento: " & nuip & " , Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono & " , IdFormaPago: " & idFormaPago & " , IdCiudad: " & idCiudad.ToString() & " , Precio: " & precio & " , Descuento: " & descuento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCliente", "Documento: " & nuip & " , Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono & " , IdFormaPago: " & idFormaPago & " , IdCiudad: " & idCiudad.ToString() & " , Precio: " & precio & " , Descuento: " & descuento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function ExisteRomEnVentaParcial(ByVal Rom As String) As IDataReader
        Try
            Return ODatos.ExisteRomEnVentaParcial(Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteRomEnVentaParcial", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteRomEnVentaParcial", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteCliente(ByVal nuip As String) As Boolean
        Try
            Return ODatos.ExisteCliente(nuip)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteCliente", "Nuip: " & nuip, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteCliente", "Nuip: " & nuip, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCliente(ByVal nuip As String) As IDataReader
        Try
            Return ODatos.RecuperarCliente(nuip)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCliente", "Nuip: " & nuip, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCliente", "Nuip: " & nuip, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Sub InsertarClienteConductor(ByVal IdentificacionCliente As String, ByVal documentoConductor As String)
        Try
            ODatos.InsertarClienteConductor(IdentificacionCliente, documentoConductor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarConductor", "Documento: " & documentoConductor & " , Cliente: " & IdentificacionCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarConductor", "Documento: " & documentoConductor & "  Cliente: " & IdentificacionCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarConductor(ByVal documento As String, ByVal nombre As String, ByVal direccion As String, ByVal telefono As String, ByVal email As String, ByVal idCiudad As Int32, ByVal EsActivo As Boolean)
        Try
            ODatos.InsertarConductor(documento, nombre, direccion, telefono, email, idCiudad, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarConductor", "Documento: " & documento & " , Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Email: " & email & " , IdCiudad: " & idCiudad.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarConductor", "Documento: " & documento & " , Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Email: " & email & " , IdCiudad: " & idCiudad.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarConductor(ByVal documento As String, ByVal nombre As String, ByVal direccion As String, ByVal telefono As String, ByVal email As String, ByVal idCiudad As Int32, ByVal EsActivo As Boolean)
        Try
            ODatos.ActualizarConductor(documento, nombre, direccion, telefono, email, idCiudad, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarConductor", "Documento: " & documento & " , Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Email: " & email & " , IdCiudad: " & idCiudad.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarConductor", "Documento: " & documento & " , Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Email: " & email & " , IdCiudad: " & idCiudad.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub EliminarConductor(ByVal documento As String)
        Try
            ODatos.EliminarConductor(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarConductor", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarConductor", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ExisteConductor(ByVal documento As String) As Boolean
        Try
            Return ODatos.ExisteConductor(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteConductor", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteConductor", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsConductorAutorizado(ByVal DatoVehiculo As String, ByVal cara As String, ByVal Documento As String, ByVal esRom As Boolean) As Boolean
        Try
            Return ODatos.EsConductorAutorizado(DatoVehiculo, cara, Documento, esRom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "Helper EsConductorAutorizado", "Documento: " & Documento & " , Cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "Helper EsConductorAutorizado", "Documento: " & Documento & " , Cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIGV() As IDataReader
        Try
            Return ODatos.RecuperarIGV()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIGV", "--", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIGV", "--", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConductor(ByVal documento As String) As IDataReader
        Try
            Return ODatos.RecuperarConductor(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConductor", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConductor", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConductorPorTarjeta(ByVal numero As String) As IDataReader
        Try
            Return ODatos.RecuperarConductorPorTarjeta(numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConductorPorTarjeta", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConductorPorTarjeta", "Numero: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNumerosLoteriaPorRecibo(ByVal recibo As Int64, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarNumerosLoteriaPorRecibo(recibo)
            Else
                Return ODatos.RecuperarNumerosLoteriaPorRecibo(recibo, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarNumerosLoteriaPorRecibo", "Recibo: " & recibo, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarNumerosLoteriaPorRecibo", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarNumerosLoteriaPorRecibo", "Recibo: " & recibo, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarNumerosLoteriaPorRecibo", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarRecibosConPremiosPKE() As DataSet
        Try
            Return ODatos.RecuperarRecibosConPremiosPKE()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecibosConPremiosPKE", "---", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecibosConPremiosPKE", "---", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecibosConPremiosPKE(ByVal CDC As Int32) As DataSet
        Try
            Return ODatos.RecuperarRecibosConPremiosPKE(CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecibosConPremiosPKE", "---", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecibosConPremiosPKE", "---", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecibosConNumeroLoteria() As DataSet
        Try
            Return ODatos.RecuperarRecibosConNumeroLoteria()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecibosConNumeroLoteria", "---", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecibosConNumeroLoteria", "---", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecibosConNumeroLoteria(ByVal CDC As Int32) As DataSet
        Try
            Return ODatos.RecuperarRecibosConNumeroLoteria(CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecibosConNumeroLoteria", "---", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecibosConNumeroLoteria", "---", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNumerosLoteria(ByVal recibo As Int64) As DataSet
        Try
            Return ODatos.RecuperarNumerosLoteria(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNumerosLoteria", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNumerosLoteria", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub RegistrarRegla(ByVal idRegla As Int32, ByVal tipoVehiculo As String, ByVal requiereTarjeta As Boolean, ByVal mt3 As Int32, ByVal idFormaPago As Nullable(Of Int16), ByVal idProducto As Nullable(Of Int32))
        Try
            ODatos.RegistrarRegla(idRegla, tipoVehiculo, requiereTarjeta, mt3, idFormaPago, idProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RegistrarRegla", "Regla: " & idRegla & " , TipoVehiculo: " & tipoVehiculo & " , requiereTarjeta: " & requiereTarjeta & " , mt3: " & mt3 & " , FormaPago: " & idFormaPago.ToString() & " , Producto: " & idProducto.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RegistrarRegla", "Regla: " & idRegla & " , TipoVehiculo: " & tipoVehiculo & " , requiereTarjeta: " & requiereTarjeta & " , mt3: " & mt3 & " , FormaPago: " & idFormaPago.ToString() & " , Producto: " & idProducto.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub RegistrarSorteo(ByVal idSorteo As Int32, ByVal idRegla As Int32, ByVal fechaDesde As Date, ByVal fechaHasta As Date, ByVal loteria As String, ByVal fechaLoteria As Date)
        Try
            ODatos.RegistrarSorteo(idSorteo, idRegla, fechaDesde, fechaHasta, loteria, fechaLoteria)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RegistrarSorteo", "idSorteo: " & idSorteo & " , idRegla: " & idRegla & " , fechaDesde: " & fechaDesde & " , FechaHasta: " & fechaHasta & " , Loteria: " & loteria & ", Fecha Loteria: " & fechaLoteria, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RegistrarSorteo", "idSorteo: " & idSorteo & " , idRegla: " & idRegla & " , fechaDesde: " & fechaDesde & " , FechaHasta: " & fechaHasta & " , Loteria: " & loteria & ", Fecha Loteria: " & fechaLoteria, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub RegistrarHorarioSorteo(ByVal idSorteoHorario As Int32, ByVal idSorteo As Int32, ByVal horaInicial As DateTime, ByVal horaFinal As DateTime)
        Try
            ODatos.RegistrarHorarioSorteo(idSorteoHorario, idSorteo, horaInicial, horaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RegistrarHorarioSorteo", "idSorteoHorario: " & idSorteoHorario & " , idSorteo: " & idSorteo & " , horaInicial: " & horaInicial & " & horaFinal: " & horaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RegistrarHorarioSorteo", "idSorteoHorario: " & idSorteoHorario & " , idSorteo: " & idSorteo & " , horaInicial: " & horaInicial & " & horaFinal: " & horaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub RegistrarNumeroEnSorteo(ByVal idNumero As Int32, ByVal descripcion As String, ByVal idSorteo As Int32)
        Try
            ODatos.RegistrarNumeroEnSorteo(idNumero, descripcion, idSorteo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RegistrarNumeroEnSorteo", "idNumero: " & idNumero & " , descripcion: " & descripcion & " , idSorteo: " & idSorteo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RegistrarNumeroEnSorteo", "idNumero: " & idNumero & " , descripcion: " & descripcion & " , idSorteo: " & idSorteo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CancelarSorteo(ByVal idSorteo As Int32)
        Try
            ODatos.CancelarSorteo(idSorteo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CancelarSorteo", "idSorteo: " & idSorteo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CancelarSorteo", "idSorteo: " & idSorteo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub SincronizarSobreTasaCombustible(ByVal IdHistoricoSobreTasa As Int32, ByVal IdProducto As Int32, ByVal SobreTasa As Decimal, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime, ByVal esActivo As Boolean)
        Try
            ODatos.SincronizarSobreTasaCombustible(IdHistoricoSobreTasa, IdProducto, SobreTasa, fechaInicial, fechaFinal, esActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarDepartamento", "IdHistoricoSobreTasa: " & IdHistoricoSobreTasa & " , IdProducto: " & IdProducto & " , SobreTasa: " & SobreTasa & " , fechaInicial: " & fechaInicial & " , fechaFinal: " & fechaFinal & " , esActivo: " & esActivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarDepartamento", "IdHistoricoSobreTasa: " & IdHistoricoSobreTasa & " , IdProducto: " & IdProducto & " , SobreTasa: " & SobreTasa & " , fechaInicial: " & fechaInicial & " , fechaFinal: " & fechaFinal & " , esActivo: " & esActivo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub SincronizarSobreTasaCombustible(ByVal IdHistoricoSobreTasa As Int32, ByVal IdProducto As Int32, ByVal SobreTasa As Decimal, ByVal fechaInicial As DateTime, ByVal fechaFinal As DateTime, ByVal esActivo As Boolean, ByVal SobreTasaLeyFrontera As Decimal)
        Try
            ODatos.SincronizarSobreTasaCombustible(IdHistoricoSobreTasa, IdProducto, SobreTasa, fechaInicial, fechaFinal, esActivo, SobreTasaLeyFrontera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarDepartamento", "IdHistoricoSobreTasa: " & IdHistoricoSobreTasa & " , IdProducto: " & IdProducto & " , SobreTasa: " & SobreTasa & " , fechaInicial: " & fechaInicial & " , fechaFinal: " & fechaFinal & " , esActivo: " & esActivo & "SobreTasaLeyFrontera: " & SobreTasaLeyFrontera.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarDepartamento", "IdHistoricoSobreTasa: " & IdHistoricoSobreTasa & " , IdProducto: " & IdProducto & " , SobreTasa: " & SobreTasa & " , fechaInicial: " & fechaInicial & " , fechaFinal: " & fechaFinal & " , esActivo: " & esActivo & "SobreTasaLeyFrontera: " & SobreTasaLeyFrontera.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub SincronizarPrecioProductoCanastilla(ByVal CodProducto As Int32, ByVal PrecioVenta As Decimal, ByVal fechaInicial As DateTime)
        Try
            ODatos.SincronizarPrecioProductoCanastilla(CodProducto, PrecioVenta, fechaInicial)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarPrecioProductoCanastilla", "CodProducto: " & CodProducto & " , PrecioVenta: " & PrecioVenta & " , fechaInicial: " & fechaInicial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarPrecioProductoCanastilla", "CodProducto: " & CodProducto & " , PrecioVenta: " & PrecioVenta & " , fechaInicial: " & fechaInicial, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub SincronizarPrecioProductoCombustible(ByVal idProducto As Int32, ByVal precio As Decimal, ByVal precioLeyFrontera As Decimal, ByVal fechaHora As DateTime, ByVal idManguera As Nullable(Of Int16))
        Try
            ODatos.SincronizarPrecioProductoCombustible(idProducto, precio, precioLeyFrontera, fechaHora, idManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarPrecioProductoCombustible", "idProducto: " & idProducto & " , precio: " & precio & " , precioLeyFrontera: " & precioLeyFrontera & " , fechaHora: " & fechaHora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarPrecioProductoCombustible", "idProducto: " & idProducto & " , precio: " & precio & " , precioLeyFrontera: " & precioLeyFrontera & " , fechaHora: " & fechaHora, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub SincronizarDepartamento(ByVal idDpto As Int32, ByVal nombre As String)
        Try
            ODatos.SincronizarDepartamento(idDpto, nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarDepartamento", "idDpto: " & idDpto & " , Nombre: " & nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarDepartamento", "idDpto: " & idDpto & " , Nombre: " & nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub SincronizarEmpleado(ByVal idEmpleado As Int32, ByVal codigo As String, ByVal cedula As String, ByVal nombre As String, ByVal telefono As String, ByVal direccion As String, ByVal idCargo As Int32, ByVal clave As String, ByVal estado As Boolean)
        Try
            ODatos.SincronizarEmpleado(idEmpleado, codigo, cedula, nombre, telefono, direccion, idCargo, clave, estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarEmpleado", "idEmpleado: " & idEmpleado & " , codigo: " & codigo & " , cedula: " & cedula & " , Nombre: " & nombre & " , telefono: " & telefono & " , Direccion: " & direccion & " , idCargo: " & idCargo & " , Clave: " & clave & " , Estado: " & estado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarEmpleado", "idEmpleado: " & idEmpleado & " , codigo: " & codigo & " , cedula: " & cedula & " , Nombre: " & nombre & " , telefono: " & telefono & " , Direccion: " & direccion & " , idCargo: " & idCargo & " , Clave: " & clave & " , Estado: " & estado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub SincronizarCliente(ByVal idCliente As Int32, ByVal nombre As String, ByVal documento As String, ByVal direccion As String, ByVal telefono As String, ByVal idFormaPago As Int32, ByVal idCiudad As Int32, ByVal precio As Double, ByVal descuento As Double)
        Try
            ODatos.SincronizarCliente(idCliente, nombre, documento, direccion, telefono, idFormaPago, idCiudad, precio, descuento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarCliente", "idCliente: " & idCliente & " , nombre: " & nombre & " , documento: " & documento & " , direccion: " & direccion & " , telefono: " & telefono & " , idFormaPago: " & idFormaPago & " , idCiudad: " & idCiudad & " , precio: " & precio & " , descuento: " & descuento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarCliente", "idCliente: " & idCliente & " , nombre: " & nombre & " , documento: " & documento & " , direccion: " & direccion & " , telefono: " & telefono & " , idFormaPago: " & idFormaPago & " , idCiudad: " & idCiudad & " , precio: " & precio & " , descuento: " & descuento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub SincronizarVehiculo(ByVal idVehiculo As Int32, ByVal precio As Double, ByVal fechaProximoMantenimiento As String, ByVal descuento As Double, ByVal placa As String, ByVal modelo As String, ByVal tipo As String, ByVal idFormaPago As Int16, ByVal porcentajeCredito As Double, ByVal idCausalBloqueo As Int16, ByVal idFinanciera As Int32, ByVal idCliente As Int32)
        Try
            ODatos.SincronizarVehiculo(idVehiculo, precio, fechaProximoMantenimiento, descuento, placa, modelo, tipo, idFormaPago, porcentajeCredito, idCausalBloqueo, idFinanciera, idCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarVehiculo", "idVehiculo: " & idVehiculo & " , precio: " & precio & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , descuento: " & descuento & " , placa: " & placa & " , modelo: " & modelo & " , tipo: " & tipo & " , idFormaPago: " & idFormaPago & " , porcentajeCredito: " & porcentajeCredito & " , idCausalBloqueo: " & idCausalBloqueo & " , idFinanciera: " & idFinanciera & " , idCliente " & idCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarVehiculo", "idVehiculo: " & idVehiculo & " , precio: " & precio & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , descuento: " & descuento & " , placa: " & placa & " , modelo: " & modelo & " , tipo: " & tipo & " , idFormaPago: " & idFormaPago & " , porcentajeCredito: " & porcentajeCredito & " , idCausalBloqueo: " & idCausalBloqueo & " , idFinanciera: " & idFinanciera & " , idCliente " & idCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub SincronizarIdentificador(ByVal idIdentificador As Int32, ByVal rom As String, ByVal tipo As Int16, ByVal activo As Boolean, ByVal idVehiculo As Int32)
        Try
            ODatos.SincronizarIdentificador(idIdentificador, rom, tipo, activo, idVehiculo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarIdentificador", "idIdentificador: " & idIdentificador & " , rom: " & rom & " , tipo: " & tipo & " , activo: " & activo & " , idVehiculo: " & idVehiculo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarIdentificador", "idIdentificador: " & idIdentificador & " , rom: " & rom & " , tipo: " & tipo & " , activo: " & activo & " , idVehiculo: " & idVehiculo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub SincronizarBloqueo(ByVal placa As String, ByVal activo As Boolean)
        Try
            ODatos.SincronizarBloqueo(placa, activo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarBloqueo", "placa: " & placa & " , activo: " & activo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarBloqueo", "placa: " & placa & " , activo: " & activo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub SincronizarFinanciera(ByVal idFinanciera As Int32, ByVal nombre As String)
        Try
            ODatos.SincronizarFinanciera(idFinanciera, nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarFinanciera", "idFinanciera: " & idFinanciera & " , nombre: " & nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarFinanciera", "idFinanciera: " & idFinanciera & " , nombre: " & nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub SincronizarCiudad(ByVal idCiudad As Int32, ByVal codigo As String, ByVal nombre As String, ByVal idDpto As Int32)
        Try
            ODatos.SincronizarCiudad(idCiudad, codigo, nombre, idDpto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarCiudad", "idCiudad: " & idCiudad & " , codigo: " & codigo & " , nombre: " & nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarCiudad", "idCiudad: " & idCiudad & " , codigo: " & codigo & " , nombre: " & nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub SincronizarFormaPago(ByVal idFormaPago As Int16, ByVal descripcion As String, ByVal nroCopias As Int32)
        Try
            ODatos.SincronizarFormaPago(idFormaPago, descripcion, nroCopias)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarFormaPago", "idFormaPago: " & idFormaPago & " , descripcion: " & descripcion & " , nroCopias: " & nroCopias, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarFormaPago", "idFormaPago: " & idFormaPago & " , descripcion: " & descripcion & " , nroCopias: " & nroCopias, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub SincronizarMotivo(ByVal idCausal As Int16, ByVal descripcion As String, ByVal codigo As String)
        Try
            ODatos.SincronizarMotivo(idCausal, descripcion, codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarMotivo", "idCausal: " & idCausal & " , descripcion: " & descripcion & " , codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarMotivo", "idCausal: " & idCausal & " , descripcion: " & descripcion & " , codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub SincronizarTipoProducto(ByVal idTipo As Int16, ByVal nombre As String)
        Try
            ODatos.SincronizarTipoProducto(idTipo, nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarTipoProducto", "idTipo: " & idTipo & " , nombre: " & nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarTipoProducto", "idTipo: " & idTipo & " , nombre: " & nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub SincronizarProducto(ByVal idProducto As Int32, ByVal precio As Double, ByVal nombre As String, ByVal tipo As Int32)
        Try
            ODatos.SincronizarProducto(idProducto, precio, nombre, tipo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarProducto", "idProducto: " & idProducto & " , precio: " & precio & " , nombre: " & nombre & " , Tipo: " & tipo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarProducto", "idProducto: " & idProducto & " , precio: " & precio & " , nombre: " & nombre & " , Tipo: " & tipo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarPrecioProducto(ByVal idProducto As Int32, ByVal precioNivel1 As Double)
        Try
            ODatos.ActualizarPrecioProducto(idProducto, precioNivel1)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarPrecioProducto", "idProducto: " & idProducto & " , precioNivel1: " & precioNivel1, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarPrecioProducto", "idProducto: " & idProducto & " , precioNivel1: " & precioNivel1, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarIdClientePorRecibo(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True, Optional ByVal idEstacion As Int16 = 0) As Int32
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarIdClientePorRecibo(recibo, esVentaRegistrada)
            Else
                Return ODatos.RecuperarIdClientePorRecibo(recibo, idEstacion, esVentaRegistrada)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarIdClientePorRecibo", "recibo: " & recibo, "FallaStoredProcedure")

            Else
                LogFallas.ReportarError(ex, "RecuperarIdClientePorRecibo", "IdEstacion: " & idEstacion & "recibo: " & recibo, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarIdClientePorRecibo", "recibo: " & recibo, "FallaStoredProcedure")

            Else
                LogFallas.ReportarError(ex, "RecuperarIdClientePorRecibo", "IdEstacion: " & idEstacion & "recibo: " & recibo, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarIdentificadorPorId(ByVal ididentificador As Integer) As IDataReader
        Try
            Return ODatos.RecuperarIdentificadorPorId(ididentificador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadorPorId", "ididentificador: " & ididentificador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadorPorId", "ididentificador: " & ididentificador, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEntidadesFinancieras() As IDataReader
        Try
            Return ODatos.RecuperarEntidadesFinancieras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEntidadesFinancieras", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEntidadesFinancieras", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecaudosFinancieraPorFecha(ByVal Financiera As Int16, ByVal Fecha As DateTime) As DataTable
        Try
            Return ODatos.RecuperarRecaudosFinancieraPorFecha(Financiera, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudosFinancieraPorFecha", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudosFinancieraPorFecha", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ActualizarFechaEnvioFinanciera(ByVal Financiera As Int16, ByVal Fecha As DateTime)
        Try
            ODatos.ActualizarFechaEnvioFinanciera(Financiera, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFechaEnvioFinanciera", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFechaEnvioFinanciera", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarRegistroPorMaquina(ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarRegistroPorMaquina(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRegistroPorMaquina", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRegistroPorMaquina", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDiscriminacionTerminal(ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarDiscriminacionTerminal(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDiscriminacionTerminal", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDiscriminacionTerminal", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesPorFormaPago(ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorFormaPago(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFormaPago", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFormaPago", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTipoIvaTarifa() As IDataReader
        Try
            Return ODatos.RecuperarTipoIvaTarifa()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoIvaTarifa", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoIvaTarifa", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPagosPorTarifaIva(ByVal fecha As String, ByVal tipoIva As Int32) As IDataReader
        Try
            Return ODatos.RecuperarPagosPorTarifaIva(fecha, tipoIva)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPagosPorTarifaIva", "fecha: " & fecha & " , " & tipoIva, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPagosPorTarifaIva", "fecha: " & fecha & " , " & tipoIva, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMensajes() As IDataReader
        Try
            Return ODatos.RecuperarMensajes()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajes", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajes", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarMensajes(ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarMensajes(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajes", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajes", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosPrestadorServicio() As IDataReader
        Try
            Return ODatos.RecuperarDatosPrestadorServicio()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosPrestadorServicio", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosPrestadorServicio", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarDatosPrestadorServicio(ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarDatosPrestadorServicio(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosPrestadorServicio", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosPrestadorServicio", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPrestadorServicioActual() As String
        Try
            Return ODatos.RecuperarPrestadorServicioActual()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrestadorServicioActual", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrestadorServicioActual", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductos() As IDataReader
        Try
            Return ODatos.RecuperarProductos()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductos(ByVal IdEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarProductos(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosPorTipo(ByVal SolicitanLectura As Boolean) As DataSet
        Try
            Return ODatos.RecuperarProductosPorTipo(SolicitanLectura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosPorTipo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosPorTipo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarProductosPorTipo(ByVal SolicitanLectura As Boolean, ByVal IdEstacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarProductosPorTipo(SolicitanLectura, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosPorTipo", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosPorTipo", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarProductosAConfigurar(ByVal SolicitanLectura As Boolean) As DataSet
        Try
            Return ODatos.RecuperarProductosAConfigurar(SolicitanLectura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosAConfigurar", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosAConfigurar", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosAConfigurar(ByVal SolicitanLectura As Boolean, ByVal IdEstacion As Int32) As DataSet
        Try
            Return ODatos.RecuperarProductosAConfigurar(SolicitanLectura, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosAConfigurar", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosAConfigurar", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosDataset() As DataSet
        Try
            Return ODatos.RecuperarProductosDataset()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosPorCara(ByVal cara As Short) As IDataReader
        Try
            Return ODatos.RecuperarProductosPorCara(cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosPorCara", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosPorCara", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosPorTurno(ByVal idTurno As Int32) As DataSet
        Try
            Return ODatos.RecuperarProductosPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosPorTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosPorTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarHistoricoPrecio(ByVal idProducto As Int32, ByVal IdEstacion As Integer) As IDataReader
        Try
            Return ODatos.RecuperarHistoricoPrecio(idProducto, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHistoricoPrecio", "IdProducto: " & idProducto & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHistoricoPrecio", "IdProducto: " & idProducto & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarHistoricoSobreTasa() As DataTable
        Try
            Return ODatos.RecuperarHistoricoSobreTasa()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHistoricoSobreTasa", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHistoricoSobreTasa", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarHistoricoPrecio(ByVal idProducto As Int32) As IDataReader
        Try
            Return ODatos.RecuperarHistoricoPrecio(idProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHistoricoPrecio", "IdProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHistoricoPrecio", "IdProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub EliminarHistoricoPrecio(ByVal idProducto As Int32, ByVal fecha As DateTime)
        Try
            ODatos.EliminarHistoricoPrecio(idProducto, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarHistoricoPrecio", "IdProducto: " & idProducto & " , Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarHistoricoPrecio", "IdProducto: " & idProducto & " , Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarHorarioAtencion(ByVal horaInicial As DateTime, ByVal horaFinal As DateTime)
        Try
            ODatos.ActualizarHorarioAtencion(horaInicial, horaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarHorarioAtencion", "horaInicial: " & horaInicial & " , horaFinal: " & horaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarHorarioAtencion", "horaInicial: " & horaInicial & " , horaFinal: " & horaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarHorarioAtencion() As IDataReader
        Try
            Return ODatos.RecuperarHorarioAtencion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarHorarioAtencion", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarHorarioAtencion", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarHistoricoPrecio(ByVal idProducto As Int32, ByVal fechaOld As Nullable(Of DateTime), ByVal fecha As DateTime, ByVal precio As Double)
        Try
            ODatos.ActualizarHistoricoPrecio(idProducto, fechaOld, fecha, precio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarHistoricoPrecio", "idProducto: " & idProducto & " , fecha: " & fecha & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarHistoricoPrecio", "idProducto: " & idProducto & " , fecha: " & fecha & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarHistoricoPrecio(ByVal idProducto As Int32, ByVal fechaOld As Nullable(Of DateTime), ByVal fecha As DateTime, ByVal precio As Double, ByVal PrecioAuxiliar As Double)
        Try
            ODatos.ActualizarHistoricoPrecio(idProducto, fechaOld, fecha, precio, PrecioAuxiliar)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarHistoricoPrecio", "idProducto: " & idProducto & " , fecha: " & fecha & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarHistoricoPrecio", "idProducto: " & idProducto & " , fecha: " & fecha & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarHistoricoPrecio(ByVal idHistoricoPrecio As Nullable(Of Int32), ByVal idProducto As Int32, ByVal fechaOld As Nullable(Of DateTime), ByVal fecha As DateTime, ByVal precio As Double, ByVal PrecioAuxiliar As Double, ByVal idManguera As Nullable(Of Int16), ByVal cedulaAdmin As String, ByVal claveAutorizacion As String)
        Try
            ODatos.ActualizarHistoricoPrecio(idHistoricoPrecio, idProducto, fechaOld, fecha, precio, PrecioAuxiliar, idManguera, cedulaAdmin, claveAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarHistoricoPrecio", "idProducto: " & idProducto & " , fecha: " & fecha & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarHistoricoPrecio", "idProducto: " & idProducto & " , fecha: " & fecha & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub ActualizarHistoricoPrecio(ByVal idHistoricoPrecio As Nullable(Of Int32), ByVal idProducto As Int32, ByVal fechaOld As Nullable(Of DateTime), ByVal fecha As DateTime, ByVal precio As Double, ByVal PrecioAuxiliar As Double, ByVal idManguera As Nullable(Of Int16), ByVal cedulaAdmin As String, ByVal claveAutorizacion As String, ByVal IdEstacion As Integer)
        Try
            ODatos.ActualizarHistoricoPrecio(idHistoricoPrecio, idProducto, fechaOld, fecha, precio, PrecioAuxiliar, idManguera, cedulaAdmin, claveAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarHistoricoPrecio", "idProducto: " & idProducto & " , fecha: " & fecha & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarHistoricoPrecio", "idProducto: " & idProducto & " , fecha: " & fecha & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarProductoPorCodigo(ByVal codigo As Int32, ByVal Existencias As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarProductoPorCodigo(codigo, Existencias)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductoPorCodigo", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductoPorCodigo", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductoPorCodigoCanastilla(ByVal codigo As Int32, ByVal Existencias As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarProductoPorCodigoCanastilla(codigo, Existencias)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductoPorCodigoCanastilla", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductoPorCodigoCanastilla", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ActualizarDocumentoCanastilla(ByVal Prefijo As String, ByVal Numero As String, ByVal Documento As String) As Int32
        Try
            Return ODatos.ActualizarDocumentoCanastilla(Prefijo, Numero, Documento)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDocumento", "Prefijo: " & Prefijo & " , Numero: " & Numero & " , Documento: " & Documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDocumento", "Prefijo: " & Prefijo & " , Numero: " & Numero & " , Documento: " & Documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub AnularFactura(ByVal recibo As Int64)
        Try
            ODatos.AnularFactura(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AnularFactura", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AnularFactura", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarDocumento(ByVal recibo As Int64, ByVal idFormaPago As Short, ByVal tipoDocumento As Integer, ByVal numero As String, ByRef anulado As Int64, ByRef nuevo As Int64, ByVal Franquicia As Integer)
        Try
            Dim oInformacionAnulacion As InformacionAnulacion = ODatos.ActualizarDocumento(recibo, idFormaPago, tipoDocumento, numero, Franquicia)
            anulado = oInformacionAnulacion.DocumentoAnulado
            nuevo = oInformacionAnulacion.DocumentoNuevo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDocumento", "recibo: " & recibo & " , Numero: " & numero & " , Anulado: " & anulado & " , Nuevo: " & nuevo & "Franquicia: " & Franquicia.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDocumento", "recibo: " & recibo & " , Numero: " & numero & " , Anulado: " & anulado & " , Nuevo: " & nuevo & "Franquicia: " & Franquicia.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function RecuperarTurnoFidelizacionManual(ByVal cedula As String) As String
        Try
            Return ODatos.RecuperarTurnoFidelizacionManual(cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoFidelizacionManual", "Cedula: " & cedula, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoFidelizacionManual", "Cedula: " & cedula, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarDocumento(ByVal recibo As Int64, ByVal idFormaPago As Short, ByVal tipoDocumento As Integer, ByVal numero As String, ByRef anulado As Int64, ByRef nuevo As Int64, ByVal Franquicia As Integer, ByVal NroConfirmacion As String)
        Try
            Dim oInformacionAnulacion As InformacionAnulacion = ODatos.ActualizarDocumento(recibo, idFormaPago, tipoDocumento, numero, Franquicia, NroConfirmacion)
            anulado = oInformacionAnulacion.DocumentoAnulado
            nuevo = oInformacionAnulacion.DocumentoNuevo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDocumento", "recibo: " & recibo & " , Numero: " & numero & " , Anulado: " & anulado & " , Nuevo: " & nuevo & "Franquicia: " & Franquicia.ToString & "NroConfirmacion: " & NroConfirmacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDocumento", "recibo: " & recibo & " , Numero: " & numero & " , Anulado: " & anulado & " , Nuevo: " & nuevo & "Franquicia: " & Franquicia.ToString & "NroConfirmacion: " & NroConfirmacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarDocumento(ByVal recibo As Int64, ByVal idFormaPago As Short, ByVal tipoDocumento As Integer, ByVal numero As String, ByRef anulado As Int64, ByRef nuevo As Int64, ByVal Franquicia As Integer, ByVal NroConfirmacion As String, ByVal tipoDocumentoEmitir As Int32)
        Try
            Dim oInformacionAnulacion As InformacionAnulacion = ODatos.ActualizarDocumento(recibo, idFormaPago, tipoDocumento, numero, Franquicia, NroConfirmacion, tipoDocumentoEmitir)
            anulado = oInformacionAnulacion.DocumentoAnulado
            nuevo = oInformacionAnulacion.DocumentoNuevo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDocumento", "recibo: " & recibo & " , Numero: " & numero & " , Anulado: " & anulado & " , Nuevo: " & nuevo & "Franquicia: " & Franquicia.ToString & "NroConfirmacion: " & NroConfirmacion & "TipoDocumentoEmitir: " & tipoDocumentoEmitir, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDocumento", "recibo: " & recibo & " , Numero: " & numero & " , Anulado: " & anulado & " , Nuevo: " & nuevo & "Franquicia: " & Franquicia.ToString & "NroConfirmacion: " & NroConfirmacion & "TipoDocumentoEmitir: " & tipoDocumentoEmitir, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub ActualizarDocumentoCanastilla(ByVal recibo As Int64, ByVal idFormaPago As Short, ByVal tipoDocumento As Integer, ByVal numero As String, ByRef anulado As Int64, ByRef nuevo As Int64, ByVal Franquicia As Integer, ByVal NroConfirmacion As String, ByVal tipoDocumentoEmitir As Int32)
        Try
            Dim oInformacionAnulacion As InformacionAnulacion = ODatos.ActualizarDocumentoCanastillaPeru(recibo, idFormaPago, tipoDocumento, numero, Franquicia, NroConfirmacion, tipoDocumentoEmitir)
            anulado = oInformacionAnulacion.DocumentoAnulado
            nuevo = oInformacionAnulacion.DocumentoNuevo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDocumentoCanastilla", "recibo: " & recibo & " , Numero: " & numero & " , Anulado: " & anulado & " , Nuevo: " & nuevo & "Franquicia: " & Franquicia.ToString & "NroConfirmacion: " & NroConfirmacion & "TipoDocumentoEmitir: " & tipoDocumentoEmitir, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDocumentoCanastilla", "recibo: " & recibo & " , Numero: " & numero & " , Anulado: " & anulado & " , Nuevo: " & nuevo & "Franquicia: " & Franquicia.ToString & "NroConfirmacion: " & NroConfirmacion & "TipoDocumentoEmitir: " & tipoDocumentoEmitir, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarDocumento(ByVal recibo As Int64, ByVal idFormaPago As Short, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal nroVale As String, ByRef anulado As Int64, ByRef nuevo As Int64)
        Try
            Dim oInformacionAnulacion As InformacionAnulacion = ODatos.ActualizarDocumento(recibo, idFormaPago, tipoDocumento, documento, nroVale)
            anulado = oInformacionAnulacion.DocumentoAnulado
            nuevo = oInformacionAnulacion.DocumentoNuevo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDocumento", "recibo: " & recibo & " , Documento: " & documento & " , Anulado: " & anulado & " , Nuevo: " & nuevo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDocumento", "recibo: " & recibo & " , Documento: " & documento & " , Anulado: " & anulado & " , Nuevo: " & nuevo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarPremios(ByVal placa As String, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarPremios(placa)
            Else
                Return ODatos.RecuperarPremios(placa, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ActualizarDocumento", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ActualizarDocumento", "IdEstacion: " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ActualizarDocumento", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ActualizarDocumento", "IdEstacion: " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarProtocolo(ByVal idProtocolo As Int32) As IDataReader
        Try
            Return ODatos.RecuperarProtocolo(idProtocolo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProtocolo", "idProtocolo: " & idProtocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProtocolo", "idProtocolo: " & idProtocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub ActualizarPuerto(ByVal idPuerto As Int32, ByVal puerto As String)
        Try
            ODatos.ActualizarPuerto(idPuerto, puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarPuerto", "idPuerto: " & idPuerto & " , Puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarPuerto", "idPuerto: " & idPuerto & " , Puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub




    Public Sub ActualizarPuerto(ByVal idPuerto As Int32, ByVal puerto As String, ByVal IdEstacion As Integer)

        Try
            ODatos.ActualizarPuerto(idPuerto, puerto, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarPuerto", "idPuerto: " & idPuerto & " , Puerto: " & puerto & " , IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarPuerto", "idPuerto: " & idPuerto & " , Puerto: " & puerto & " , IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarPuerto(ByVal puerto As String)
        Try
            ODatos.InsertarPuerto(puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPuerto", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPuerto", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub





    Public Sub InsertarPuerto(ByVal puerto As String, ByVal IdEstacion As Integer)
        Try
            ODatos.InsertarPuerto(puerto, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPuerto", "puerto: " & puerto & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPuerto", "puerto: " & puerto & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub EliminarRedLector(ByVal idOneWire As Int32)
        Try
            ODatos.EliminarRedLector(idOneWire)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarRedLector", "idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarRedLector", "idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarPuertoRedOneWire(ByVal idOneWire As Int32) As String
        Try
            Return ODatos.RecuperarPuertoRedOneWire(idOneWire)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuertoRedOneWire", "idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertoRedOneWire", "idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarPuerto(ByVal idPuerto As Int32)
        Try
            ODatos.EliminarPuerto(idPuerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarPuerto", "idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarPuerto", "idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarTurnoHorario(ByVal idTurnoHorario As Int32)
        Try
            ODatos.EliminarTurnoHorario(idTurnoHorario)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarTurnoHorario", "idTurnoHorario: " & idTurnoHorario, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarTurnoHorario", "idTurnoHorario: " & idTurnoHorario, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarConsecutivo(ByVal tabla As String, ByVal consecutivo As Integer)
        Try
            ODatos.ActualizarConsecutivo(tabla, consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarConsecutivo", "Tabla: " & tabla & " , Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarConsecutivo", "Tabla: " & tabla & " , Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarConsecutivo(ByVal tabla As String, ByVal consecutivo As Int64)
        Try
            ODatos.ActualizarConsecutivo(tabla, consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarConsecutivo", "Tabla: " & tabla & " , Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarConsecutivo", "Tabla: " & tabla & " , Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstacion(ByVal idEstacion As Int16, ByVal codigo As String, ByVal nombre As String, ByVal nit As String, ByVal direccion As String, ByVal telefono As String, ByVal idCiudad As Int32, ByVal CodigoMenoCash As String, Optional ByVal RazonSocial As String = "")
        Try
            ODatos.ActualizarEstacion(idEstacion, codigo, nombre, nit, direccion, telefono, idCiudad, CodigoMenoCash, RazonSocial)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstacion", "idEstacion: " & idEstacion & " , codigo: " & codigo & " , Nombre: " & nombre & " , Nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad & " , Razon Social: " & RazonSocial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstacion", "idEstacion: " & idEstacion & " , codigo: " & codigo & " , Nombre: " & nombre & " , Nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad & " , Razon Social: " & RazonSocial, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstacion(ByVal idEstacion As Int16, ByVal codigo As String, ByVal nombre As String, ByVal nit As String, ByVal direccion As String, ByVal telefono As String, ByVal idCiudad As Int32, ByVal NumeroRegistro As String, ByVal RepresentanteLegal As String, ByVal IdRepresentanteLegal As String)
        Try
            ODatos.ActualizarEstacion(idEstacion, codigo, nombre, nit, direccion, telefono, idCiudad, NumeroRegistro, RepresentanteLegal, IdRepresentanteLegal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstacion", "idEstacion: " & idEstacion & " , codigo: " & codigo & " , Nombre: " & nombre & " , Nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad & " , NumeroRegistro: " & NumeroRegistro & " , RepresentanteLegal: " & RepresentanteLegal & " , IdRepresentanteLegal: " & IdRepresentanteLegal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstacion", "idEstacion: " & idEstacion & " , codigo: " & codigo & " , Nombre: " & nombre & " , Nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad & " , NumeroRegistro: " & NumeroRegistro & " , RepresentanteLegal: " & RepresentanteLegal & " , IdRepresentanteLegal: " & IdRepresentanteLegal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstacionFSPeru(ByVal idEstacion As Int16, ByVal codigo As String, ByVal nombre As String, ByVal nit As String, ByVal direccion As String, ByVal telefono As String, ByVal idCiudad As Int32, ByVal TipoDeCambio As Decimal)
        Try
            ODatos.ActualizarEstacionFSPeru(idEstacion, codigo, nombre, nit, direccion, telefono, idCiudad, TipoDeCambio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstacion", "idEstacion: " & idEstacion & " , codigo: " & codigo & " , Nombre: " & nombre & " , Nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad & " , TipoDeCambio: " & TipoDeCambio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstacion", "idEstacion: " & idEstacion & " , codigo: " & codigo & " , Nombre: " & nombre & " , Nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad & " , TipoDeCambio: " & TipoDeCambio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    'Public Sub ActualizarFormasPago(ByVal idFormaPago As Int32, ByVal FirmaMensaje As Boolean, ByVal EsActivo As Boolean)
    '    Try
    '        ODatos.ActualizarFormasPago(idFormaPago, FirmaMensaje, EsActivo)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , FirmaMensaje: " & FirmaMensaje & " , EsActivo: " & EsActivo, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , FirmaMensaje: " & FirmaMensaje & " , EsActivo: " & EsActivo, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Sub

    Public Sub ActualizarFormasPago(ByVal idFormaPago As Int32, ByVal FirmaMensaje As Boolean, ByVal EsActivo As Boolean, ByVal AplicaPagoExtraordinario As Boolean)
        Try
            ODatos.ActualizarFormasPago(idFormaPago, FirmaMensaje, EsActivo, AplicaPagoExtraordinario)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , FirmaMensaje: " & FirmaMensaje & " , EsActivo: " & EsActivo & ", AplicaPagoExtraordinario: " & AplicaPagoExtraordinario, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , FirmaMensaje: " & FirmaMensaje & " , EsActivo: " & EsActivo & ", AplicaPagoExtraordinario: " & AplicaPagoExtraordinario, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarFormaPago(ByVal idFormaPago As Int16, ByVal descripcion As String, ByVal numeroCopias As Int32)
        Try
            ODatos.ActualizarFormaPago(idFormaPago, descripcion, numeroCopias)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , Descripcion: " & descripcion & " , Numero Copias: " & numeroCopias, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , Descripcion: " & descripcion & " , Numero Copias: " & numeroCopias, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarFormaPago(ByVal idFormaPago As Int16, ByVal Incremento As Decimal, ByVal IdTipoIncremento As Int32)
        Try
            ODatos.ActualizarFormaPago(idFormaPago, Incremento, IdTipoIncremento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , Incremento: " & Incremento & " , IdTipoIncremento: " & IdTipoIncremento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , Incremento: " & Incremento & " , IdTipoIncremento: " & IdTipoIncremento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarFormasPago(ByVal idFormaPago As Int32, ByVal FirmaMensaje As Boolean, ByVal EsActivo As Boolean, ByVal IdEstacion As Integer)
        Try
            ODatos.ActualizarFormasPago(idFormaPago, FirmaMensaje, EsActivo, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , FirmaMensaje: " & FirmaMensaje & " , EsActivo: " & EsActivo & ", AplicaPagoExtraordinario: " & EsActivo & ", IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , FirmaMensaje: " & FirmaMensaje & " , EsActivo: " & EsActivo & ", AplicaPagoExtraordinario: " & EsActivo & ", IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstacionMexico(ByVal idEstacion As Int16, ByVal codigo As String, ByVal nombre As String, ByVal nit As String, ByVal direccion As String, ByVal direccionFiscal As String, ByVal telefono As String, ByVal idCiudad As Int32)
        Try
            ODatos.ActualizarEstacionMexico(idEstacion, codigo, nombre, nit, direccion, direccionFiscal, telefono, idCiudad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstacionMexico", "idEstacion: " & idEstacion & " , codigo: " & codigo & " , Nombre: " & nombre & " , Nit: " & nit & " , Direccion: " & direccion & " , Direccion Fiscal: " & direccionFiscal & " , Telefono: " & telefono & " , Ciudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstacionMexico", "idEstacion: " & idEstacion & " , codigo: " & codigo & " , Nombre: " & nombre & " , Nit: " & nit & " , Direccion: " & direccion & " , Direccion Fiscal: " & direccionFiscal & " , Telefono: " & telefono & " , Ciudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarEstacion(ByVal codigo As String, ByVal nombre As String, ByVal nit As String, ByVal direccion As String, ByVal telefono As String, ByVal idCiudad As Int32, ByVal IdTipoEds As Int32, ByVal ManejaLeyFrontera As Boolean)
        Try
            ODatos.InsertarEstacion(codigo, nombre, nit, direccion, telefono, idCiudad, IdTipoEds, ManejaLeyFrontera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEstacion", "codigo: " & codigo & " , nombre: " & nombre & " , nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEstacion", "codigo: " & codigo & " , nombre: " & nombre & " , nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad & " , IdTipoEds: " & IdTipoEds.ToString & " , ManejaLeyFrontera: " & ManejaLeyFrontera.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarEstacion(ByVal codigo As String, ByVal nombre As String, ByVal nit As String, ByVal direccion As String, ByVal telefono As String, ByVal idCiudad As Int32, ByVal CodigoEstacionMenoCash As String)
        Try
            ODatos.InsertarEstacion(codigo, nombre, nit, direccion, telefono, idCiudad, CodigoEstacionMenoCash)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEstacion", "codigo: " & codigo & " , nombre: " & nombre & " , nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad & " , CodigoEstacionMenoCash: " & CodigoEstacionMenoCash, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEstacion", "codigo: " & codigo & " , nombre: " & nombre & " , nit: " & nit & " , Direccion: " & direccion & " , Telefono: " & telefono & " , Ciudad: " & idCiudad & " , CodigoEstacionMenoCash: " & CodigoEstacionMenoCash, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    'Public Sub ActualizarVentaImpresa(ByVal Recibo As Long, Optional ByVal idEstacion As Int16 = 0)
    '    Try
    '        If idEstacion = 0 Then
    '            ODatos.ActualizarVentaImpresa(Recibo)
    '        Else
    '            ODatos.ActualizarVentaImpresa(Recibo, idEstacion)
    '        End If

    '    Catch ex As SqlClient.SqlException
    '        If idEstacion = 0 Then
    '            LogFallas.ReportarError(ex, "ActualizarVentaImpresa", "Recibo: " & Recibo, "FallaStoredProcedure")
    '        Else
    '            LogFallas.ReportarError(ex, "ActualizarVentaImpresa", "IdEstacion: " & idEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
    '        End If

    '        Throw
    '    Catch ex As System.Exception
    '        If idEstacion = 0 Then
    '            LogFallas.ReportarError(ex, "ActualizarVentaImpresa", "Recibo: " & Recibo, "FallaStoredProcedure")
    '        Else
    '            LogFallas.ReportarError(ex, "ActualizarVentaImpresa", "IdEstacion: " & idEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
    '        End If
    '        Throw
    '    End Try
    'End Sub


    Public Sub ActualizarImpresora(ByVal idImpresora As Int32, ByVal descripcion As String, ByVal IdEstacion As Integer)
        Try
            ODatos.ActualizarImpresora(idImpresora, descripcion, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarImpresora", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarImpresora", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub





    Public Sub ActualizarImpresora(ByVal idImpresora As Int32, ByVal descripcion As String, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarImpresora(idImpresora, descripcion, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarImpresora", "idImpresora: " & idImpresora & " , descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarImpresora", "idImpresora: " & idImpresora & " , descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub ActualizarImpresora(ByVal idImpresora As Int32, ByVal descripcion As String)
        Try
            ODatos.ActualizarImpresora(idImpresora, descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarImpresora", "idImpresora: " & idImpresora & " , descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarImpresora", "idImpresora: " & idImpresora & " , descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarImpresora(ByVal descripcion As String)
        Try
            ODatos.InsertarImpresora(descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarImpresora", "descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarImpresora", "descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub





    Public Sub InsertarImpresora(ByVal descripcion As String, ByVal IdEstacion As Integer)
        Try
            ODatos.InsertarImpresora(descripcion, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarImpresora", "descripcion: " & descripcion & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarImpresora", "descripcion: " & descripcion & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarImpresoraPeru(ByVal idImpresora As Int32, ByVal descripcion As String, ByVal serial As String, ByVal prefijo As String, ByVal consecutivoDesde As Int32, ByVal consecutivoHasta As Int32, ByVal consecutivoActual As Int32, ByVal autorizacion As String, ByVal ConsecutivoBoleta As Int32)
        Try
            ODatos.ActualizarImpresoraPeru(idImpresora, descripcion, serial, prefijo, consecutivoDesde, consecutivoHasta, consecutivoActual, autorizacion, ConsecutivoBoleta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarImpresoraPeru", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , serial: " & serial & " , prefijo: " & prefijo & " , consecutivoDesde: " & consecutivoDesde & " , consecutivoHasta: " & consecutivoHasta & " , ConsecutivoActual: " & consecutivoActual & " , Autorizacion: " & autorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarImpresoraPeru", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , serial: " & serial & " , prefijo: " & prefijo & " , consecutivoDesde: " & consecutivoDesde & " , consecutivoHasta: " & consecutivoHasta & " , ConsecutivoActual: " & consecutivoActual & " , Autorizacion: " & autorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarImpresoraPeru(ByVal idImpresora As Int32, ByVal descripcion As String, ByVal serial As String, ByVal autorizacion As String)
        Try
            ODatos.ActualizarImpresoraPeru(idImpresora, descripcion, serial, autorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarImpresoraPeru", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarImpresoraPeru", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    'Public Overloads Sub ActualizarImpresoraChile(ByVal idImpresora As Int32, ByVal descripcion As String, ByVal serial As String, ByVal autorizacion As String, ByVal codigo As String)
    '    Try
    '        ODatos.ActualizarImpresoraChile(idImpresora, descripcion, serial, autorizacion, codigo)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "ActualizarImpresoraChile", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion & " , Codigo: " & codigo, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "ActualizarImpresoraChile", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion & " , Codigo: " & codigo, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Sub

    Public Overloads Sub ActualizarImpresoraChile(ByVal idImpresora As Int32, ByVal descripcion As String, ByVal serial As String, ByVal autorizacion As String, ByVal codigo As String,
                 ByVal TipoImpresora As Int32, ByVal NroCaja As String, ByVal Puerto As Nullable(Of Integer))
        Try
            ODatos.ActualizarImpresoraChile(idImpresora, descripcion, serial, autorizacion, codigo, TipoImpresora, NroCaja, Puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarImpresoraChile", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion & " , Codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarImpresoraChile", "idImpresora: " & idImpresora & " , descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion & " , Codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarImpresoraPeru(ByVal descripcion As String, ByVal serial As String, ByVal prefijo As String, ByVal consecutivoDesde As Int32, ByVal consecutivoHasta As Int32, ByVal consecutivoActual As Int32, ByVal autorizacion As String, ByVal ConsecutivoBoleta As Int32)
        Try
            ODatos.InsertarImpresoraPeru(descripcion, serial, prefijo, consecutivoDesde, consecutivoHasta, consecutivoActual, autorizacion, ConsecutivoBoleta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarImpresoraPeru", "Descripcion: " & descripcion & " , serial: " & serial & " , prefijo: " & prefijo & " , consecutivoDesde: " & consecutivoDesde & " , consecutivoHasta: " & consecutivoHasta & " , ConsecutivoActual: " & consecutivoActual & " , Autorizacion: " & autorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarImpresoraPeru", "Descripcion: " & descripcion & " , serial: " & serial & " , prefijo: " & prefijo & " , consecutivoDesde: " & consecutivoDesde & " , consecutivoHasta: " & consecutivoHasta & " , ConsecutivoActual: " & consecutivoActual & " , Autorizacion: " & autorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarImpresoraPeru(ByVal descripcion As String, ByVal serial As String, ByVal autorizacion As String)
        Try
            ODatos.InsertarImpresoraPeru(descripcion, serial, autorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarImpresoraPeru", "Descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarImpresoraPeru", "Descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    'Public Overloads Sub InsertarImpresoraChile(ByVal descripcion As String, ByVal serial As String, ByVal autorizacion As String, ByVal codigo As String)
    '    Try
    '        ODatos.InsertarImpresoraChile(descripcion, serial, autorizacion, codigo)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "InsertarImpresoraChile", "Descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion & " , Codigo: " & codigo, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "InsertarImpresoraChile", "Descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion & " , Codigo: " & codigo, "FallaStoredProcedure")
    '        Throw
    '    End Try

    'End Sub


    Public Overloads Sub InsertarImpresoraChile(ByVal descripcion As String, ByVal serial As String, ByVal autorizacion As String, ByVal codigo As String,
               ByVal TipoImpresora As Int32, ByVal NroCaja As String, Puerto As Nullable(Of Integer))
        Try
            ODatos.InsertarImpresoraChile(descripcion, serial, autorizacion, codigo, TipoImpresora, NroCaja, Puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarImpresoraChile", "Descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion & " , Codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarImpresoraChile", "Descripcion: " & descripcion & " , serial: " & serial & " , Autorizacion: " & autorizacion & " , Codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub EliminarImpresora(ByVal idImpresora As Int32)
        Try
            ODatos.EliminarImpresora(idImpresora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarImpresora", "IdImpresora: " & idImpresora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarImpresora", "IdImpresora: " & idImpresora, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarConsecutivoImpresora(ByVal IdImpresoraConsecutivo As Int32)
        Try
            ODatos.EliminarConsecutivoImpresora(IdImpresoraConsecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarConsecutivoImpresora", "IdImpresoraConsecutivo: " & IdImpresoraConsecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarConsecutivoImpresora", "IdImpresoraConsecutivo: " & IdImpresoraConsecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarImpuestoPeru(ByVal idImpuesto As Int32, ByVal nombre As String, ByVal porcentaje As Double, ByVal formaAplicacion As String, ByVal activo As Boolean)
        Try
            ODatos.ActualizarImpuestoPeru(idImpuesto, nombre, porcentaje, formaAplicacion, activo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarImpuestoPeru", "IdImpuesto: " & idImpuesto & " , Nombre: " & nombre & " , porcentaje: " & porcentaje & " , formaAplicacion: " & formaAplicacion & " , Activo: " & activo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarImpuestoPeru", "IdImpuesto: " & idImpuesto & " , Nombre: " & nombre & " , porcentaje: " & porcentaje & " , formaAplicacion: " & formaAplicacion & " , Activo: " & activo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarImpuestoChile(ByVal idImpuesto As Int32, ByVal valor As Decimal)
        Try
            ODatos.ActualizarImpuestoChile(idImpuesto, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarImpuestoChile", "IdImpuesto: " & idImpuesto & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarImpuestoChile", "IdImpuesto: " & idImpuesto & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function AplicaSolicitarMediosPago(ByVal Recibo As Long) As Boolean

        Try
            Return ODatos.AplicaSolicitarMediosPago(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AplicaSolicitarMediosPago", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AplicaSolicitarMediosPago", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub InsertarImpuestoPeru(ByVal nombre As String, ByVal porcentaje As Double, ByVal formaAplicacion As String, ByVal activo As Boolean)
        Try
            ODatos.InsertarImpuestoPeru(nombre, porcentaje, formaAplicacion, activo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarImpuestoPeru", "Nombre: " & nombre & " , porcentaje: " & porcentaje & " , formaAplicacion: " & formaAplicacion & " , Activo: " & activo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarImpuestoPeru", "Nombre: " & nombre & " , porcentaje: " & porcentaje & " , formaAplicacion: " & formaAplicacion & " , Activo: " & activo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarImpuestoPeru(ByVal idImpuesto As Int32)
        Try
            ODatos.EliminarImpuestoPeru(idImpuesto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarImpuestoPeru", "idImpuesto: " & idImpuesto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarImpuestoPeru", "idImpuesto: " & idImpuesto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function forImpuestosPeru() As DataSet
        Try
            Return ODatos.RecuperarImpuestosPeru
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpuestosPeru", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpuestosPeru", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpuestosChile() As DataSet
        Try
            Return ODatos.RecuperarImpuestosChile()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpuestosChile", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpuestosChile", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    'Public Function RecuperarTiposVehiculoChile() As IDataReader
    '    Try
    '        Return ODatos.RecuperarTiposVehiculoChile()
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "RecuperarTiposVehiculoChile", "-", "FallaStoredProcedure")
    '        Throw 
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "RecuperarTiposVehiculoChile", "-", "FallaStoredProcedure")
    '        Throw 
    '    End Try
    'End Function






    Public Sub SincronizarImpuestosChileTerpel(ByVal IdImpuesto As Integer, ByVal Valor As Decimal, ByVal FechaHora As DateTime)
        Try
            ODatos.SincronizarImpuestosChileTerpel(IdImpuesto, Valor, FechaHora)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarImpuestosChileTerpel", "IdImpuesto: " & IdImpuesto & " Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarImpuestosChileTerpel", "IdImpuesto: " & IdImpuesto & " Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Function ValidarVentaContadoChilePorCara(ByVal Cara As Integer) As Boolean
        Try
            Return ODatos.ValidarVentaContadoChilePorCara(Cara)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVentaContadoChile", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVentaContadoChile", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub ValidarVentaCreditoManual(ByVal recibo As Int64)
        Try
            ODatos.ValidarVentaCreditoManual(recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVentaCreditoManual", "Recibo : " & recibo.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVentaCreditoManual", "Recibo: " & recibo.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function ValidarVentaContadoChilePorRecibo(ByVal Recibo As Integer) As Boolean
        Try
            Return ODatos.ValidarVentaContadoChilePorRecibo(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVentaContadoChilePorRecibo", "Recibo : " & Recibo.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVentaContadoChilePorRecibo", "Recibo: " & Recibo.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpuestoPeru(ByVal idImpuesto As Int32) As IDataReader
        Try
            Return ODatos.RecuperarImpuestoPeru(idImpuesto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpuestoPeru", "idImpuesto: " & idImpuesto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpuestoPeru", "idImpuesto: " & idImpuesto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormaAplicacionPeru() As DataSet
        Try
            Return ODatos.RecuperarFormaAplicacionPeru
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaAplicacionPeru", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaAplicacionPeru", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSincronizaciones() As IDataReader
        Try
            Return ODatos.RecuperarSincronizaciones
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSincronizaciones", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSincronizaciones", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSincronizaciones(ByVal cdc As Integer) As IDataReader
        Try
            Return ODatos.RecuperarSincronizaciones(cdc)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSincronizaciones", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSincronizaciones", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCDCS() As DataTable
        Try
            Return ODatos.RecuperarCDCS()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCDCS", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCDCS", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsecutivo() As IDataReader
        Try
            Return ODatos.RecuperarConsecutivo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsecutivo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsecutivo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsecutivo(ByVal tabla As String) As Int64
        Try
            Return ODatos.RecuperarConsecutivo(tabla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsecutivo", "Tabla: " & tabla, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsecutivo", "Tabla: " & tabla, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsecutivos() As DataSet
        Try
            Return ODatos.RecuperarConsecutivos
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsecutivos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsecutivos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsecutivosPorFecha(ByVal Fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarConsecutivosPorFecha(Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsecutivosPorFecha", "Fecha: " & Fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsecutivosPorFecha", "Fecha: " & Fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDepartamentos() As DataSet
        Try
            Return ODatos.RecuperarDepartamentos
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDepartamentos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDepartamentos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEstacionConfigurador() As DataSet
        Try
            Return ODatos.RecuperarEstacionConfigurador()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstacionConfigurador", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstacionConfigurador", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEstaciones() As DataSet
        Try
            Return ODatos.RecuperarEstaciones
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstaciones", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstaciones", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarEstacionesPorId(ByVal IdEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarEstacionesPorId(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstaciones", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstaciones", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMunicipios() As DataSet
        Try
            Return ODatos.RecuperarMunicipios
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMunicipios", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMunicipios", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMunicipiosPorDepartamento(ByVal idDpto As Int32) As DataSet
        Try
            Return ODatos.RecuperarMunicipiosPorDepartamento(idDpto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMunicipiosPorDepartamento", "idDpto: " & idDpto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMunicipiosPorDepartamento", "idDpto: " & idDpto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMangueras() As IDataReader
        Try
            Return ODatos.RecuperarMangueras
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMangueras", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMangueras", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarMangueras(ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarMangueras(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "IdEstacion: " & idEstacion & "RecuperarMangueras", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "IdEstacion: " & idEstacion & "RecuperarMangueras", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarManguerasPorIsla(ByVal IdIsla As Int16) As IDataReader
        Try

            Return ODatos.RecuperarManguerasPorIsla(IdIsla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasPorIsla", "IdIsla: " & IdIsla.ToString, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasPorIsla", "IdIsla: " & IdIsla.ToString, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Function RecuperarManguerasPorTanque(ByVal codTanque As String) As IDataReader
        Try
            Return ODatos.RecuperarManguerasPorTanque(codTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasPorTanque", "CodTanque: " & codTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasPorTanque", "CodTanque: " & codTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarManguerasPorTanque(ByVal codTanque As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarManguerasPorTanque(codTanque, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasPorTanque", "IdEstacion: " & idEstacion & "CodTanque: " & codTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasPorTanque", "IdEstacion: " & idEstacion & "CodTanque: " & codTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarManguerasConfigurador(ByVal idProducto As Int32) As DataSet
        Try
            Return ODatos.RecuperarManguerasConfigurador(idProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasConfigurador", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasConfigurador", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function








    Public Function RecuperarManguerasConfigurador(ByVal idProducto As Int32, ByVal Idestacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarManguerasConfigurador(idProducto, Idestacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasConfigurador", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasConfigurador", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function








    Public Function RecuperarCantidadMangueras() As Int32
        Try
            Return ODatos.RecuperarCantidadMangueras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCantidadSurtidores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCantidadSurtidores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCantidadMangueras(ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.RecuperarCantidadMangueras(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCantidadSurtidores", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCantidadSurtidores", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesComplementariosPorFecha(ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarTotalesComplementariosPorFecha(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFecha", "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFecha", "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesComplementariosPorFecha(ByVal fecha As String, ByVal EsCombustible As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarTotalesComplementariosPorFecha(fecha, EsCombustible)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFecha", "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFecha", "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesComplementariosPorFecha(ByVal fecha As String, ByVal EsCombustible As Boolean, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesComplementariosPorFecha(fecha, EsCombustible, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFecha", "IdEstacion: " & IdEstacion & "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFecha", "IdEstacion: " & IdEstacion & "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesComplementariosPorFechaDia(ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarTotalesComplementariosPorFechaDia(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFechaDia", "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFechaDia", "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesComplementariosPorFechaDia(ByVal fecha As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesComplementariosPorFechaDia(fecha, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFechaDia", "IdEstacion: " & idEstacion & "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorFechaDia", "IdEstacion: " & idEstacion & "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesPorFecha(ByVal fecha As String, ByVal producto As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorFecha(fecha, producto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFecha", "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFecha", "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecargasPrepagoPorDia(ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarRecargasPrepagoPorDia(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecargasPrepagoPorDia", "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecargasPrepagoPorDia", "fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesPorFecha(ByVal fecha As String, ByVal producto As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorFecha(fecha, producto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFecha", "IdEstacion: " & idEstacion & "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFecha", "IdEstacion: " & idEstacion & "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesPorFechaDia(ByVal fecha As String, ByVal producto As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorFechaDia(fecha, producto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaDia", "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaDia", "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesPorFechaDia(ByVal fecha As String, ByVal producto As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorFechaDia(fecha, producto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaDia", "IdEstacion: " & idEstacion & "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaDia", "IdEstacion: " & idEstacion & "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesPorFechaFormaPago(ByVal fecha As String, ByVal producto As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorFechaFormaPago(fecha, producto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaFormaPago", "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaFormaPago", "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesPorFechaFormaPago(ByVal fecha As String, ByVal producto As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorFechaFormaPago(fecha, producto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaFormaPago", "IdEstacion: " & idEstacion & "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaFormaPago", "IdEstacion: " & idEstacion & "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesPorFechaFormaPagoDia(ByVal fecha As String, ByVal producto As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorFechaFormaPagoDia(fecha, producto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaFormaPagoDia", "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaFormaPagoDia", "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesPorFechaFormaPagoDia(ByVal fecha As String, ByVal producto As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorFechaFormaPagoDia(fecha, producto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaFormaPagoDia", "IdEstacion: " & idEstacion & "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorFechaFormaPagoDia", "IdEstacion: " & idEstacion & "fecha: " & fecha & " , producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLecturasPorMangueraFecha(ByVal idManguera As Int32, ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarLecturasPorMangueraFecha(idManguera, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraFecha", "idManguera: " & idManguera & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraFecha", "idManguera: " & idManguera & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLecturasPorMangueraFechaDia(ByVal idManguera As Int32, ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarLecturasPorMangueraFechaDia(idManguera, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraFechaDia", "idManguera: " & idManguera & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraFechaDia", "idManguera: " & idManguera & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarLecturasPorMangueraFechaDia(ByVal idManguera As Int32, ByVal fecha As String, ByVal idestacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarLecturasPorMangueraFechaDia(idManguera, fecha, idestacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraFechaDia", "IdEstacion: " & idestacion & "idManguera: " & idManguera & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraFechaDia", "IdEstacion: " & idestacion & "idManguera: " & idManguera & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub CargarBackup(ByVal ruta As String)
        Try
            ODatos.CargarBackup(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarBackup", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarBackup", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CargarBackupCDIGas(ByVal ruta As String)
        Try
            ODatos.CargarBackupCDIGas(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarBackupCDIGas", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarBackupCDIGas", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CargarBackupCombustible(ByVal ruta As String)
        Try
            ODatos.CargarBackupCombustible(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarBackupCombustible", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarBackupCombustible", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EjecutarScriptActualizacion(ByVal script As String, ByVal usuario As String, ByVal clave As String, ByVal tiempoEsperaSQL As Int32, ByVal BD As String)
        Try
            ODatos.EjecutarScriptActualizacion(script, usuario, clave, tiempoEsperaSQL, BD)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EjecutarScriptActualizacion", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EjecutarScriptActualizacion", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CargarGanaMillones(ByVal ruta As String)
        Try
            ODatos.CargarGanaMillones(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarGanaMillones", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarGanaMillones", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CargarGanaMillonesCombustible(ByVal ruta As String)
        Try
            ODatos.CargarGanaMillonesCombustible(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarGanaMillonesCombustible", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarGanaMillonesCombustible", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CargarKitEscolar(ByVal ruta As String)
        Try
            ODatos.CargarKitEscolar(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarKitEscolar", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarKitEscolar", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CargarKitEscolarCombustible(ByVal ruta As String)
        Try
            ODatos.CargarKitEscolarCombustible(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarKitEscolarCombustible", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarKitEscolarCombustible", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarLecturasParaArchivo(ByVal fInicio As String, ByVal fFin As String) As DataSet
        Try
            Return ODatos.RecuperarLecturasParaArchivo(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReversionesParaArchivo(ByVal fInicio As String, ByVal fFin As String) As DataSet
        Try
            Return ODatos.RecuperarReversionesParaArchivo(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReversionesParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReversionesParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarPagosParaArchivo(ByVal fInicio As String, ByVal fFin As String) As DataSet
        Try
            Return ODatos.RecuperarPagosParaArchivo(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPagosParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPagosParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ExportarRazonSocial() As DataSet
        Try
            Return ODatos.ExportarRazonSocial()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExportarRazonSocial", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExportarRazonSocial", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentasParaArchivo(ByVal fInicio As String, ByVal fFin As String) As DataSet
        Try
            Return ODatos.RecuperarVentasParaArchivo(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasFidelizadasParaArchivo(ByVal fInicio As DateTime, ByVal fFin As DateTime) As DataSet
        Try
            Return ODatos.RecuperarVentasFidelizadasParaArchivo(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasFidelizadasParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasFidelizadasParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarVentasFidelizadasParaArchivo(ByVal fInicio As DateTime, ByVal fFin As DateTime, ByVal TimeOut As Integer) As DataSet
        Try
            Return ODatos.RecuperarVentasFidelizadasParaArchivo(fInicio, fFin, TimeOut)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasFidelizadasParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasFidelizadasParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarVentasGenexParaArchivo(ByVal fInicio As DateTime, ByVal fFin As DateTime) As DataSet
        Try
            Return ODatos.RecuperarVentasGenexParaArchivo(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasGenexParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasGenexParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarVentasGenexParaArchivo(ByVal fInicio As DateTime, ByVal fFin As DateTime, ByVal TimeOut As Integer) As DataSet
        Try
            Return ODatos.RecuperarVentasGenexParaArchivo(fInicio, fFin, TimeOut)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasGenexParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasGenexParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarPGNVentasDiarias(ByVal fInicio As DateTime, ByVal fFin As DateTime) As DataSet
        Try
            Return ODatos.RecuperarPGNVentasDiarias(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPGNVentasDiarias", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPGNVentasDiarias", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarPGNVentasDiarias(ByVal fInicio As DateTime, ByVal fFin As DateTime, ByVal TimeOut As Integer) As DataSet
        Try
            Return ODatos.RecuperarPGNVentasDiarias(fInicio, fFin, TimeOut)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPGNVentasDiarias", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPGNVentasDiarias", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarVentasFidelizadasBonoParaArchivo(ByVal fInicio As DateTime, ByVal fFin As DateTime) As DataSet
        Try
            Return ODatos.RecuperarVentasFidelizadasBonoParaArchivo(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasFidelizadasBonoParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasFidelizadasBonoParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasFidelizadasBonoParaArchivo(ByVal fInicio As DateTime, ByVal fFin As DateTime, ByVal TimeOut As Integer) As DataSet
        Try
            Return ODatos.RecuperarVentasFidelizadasBonoParaArchivo(fInicio, fFin, TimeOut)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasFidelizadasBonoParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasFidelizadasBonoParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaReversion() As Int32
        Try
            Return ODatos.RecuperarUltimaReversion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaReversion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaReversion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaReversion(ByVal CDC As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimaReversion(CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaReversion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaReversion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdModificacionPorReciboVenta(ByVal Recibo As Int64) As Int32
        Try
            Return ODatos.RecuperarIdModificacionPorReciboVenta(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdModificacionPorReciboVenta", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdModificacionPorReciboVenta", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdPagoPorIdRecaudoCDC(ByVal IdRecaudo As Int32) As Int32
        Try
            Return ODatos.RecuperarIdPagoPorIdRecaudoCDC(IdRecaudo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdPagoPorIdRecaudoCDC", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdPagoPorIdRecaudoCDC", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoPagoExtraordinario() As Int32
        Try
            Return ODatos.RecuperarUltimoPagoExtraordinario()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoPagoExtraordinario", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoPagoExtraordinario", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoPagoSRE() As Int32
        Try
            Return ODatos.RecuperarUltimoPagoSRE()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoPagoSRE", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoPagoSRE", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoGerenciamiento() As Int32
        Try
            Return ODatos.RecuperarUltimoGerenciamiento()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoGerenciamiento", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoGerenciamiento", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoCupon() As Int32
        Try
            Return ODatos.RecuperarUltimoCupon()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoCupon", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoCupon", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboPorNumeroCara(ByVal numero As String, ByVal prefijo As String) As Int64
        Try
            Return ODatos.RecuperarReciboPorNumeroCara(numero, prefijo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorNumeroCara", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorNumeroCara", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarReciboPorNumeroCaraCanastilla(ByVal numero As String, ByVal prefijo As String) As Int64
        Try
            Return ODatos.RecuperarReciboPorNumeroCaraCanastilla(numero, prefijo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorNumeroCaraCanastilla", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorNumeroCaraCanastilla", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboCanastillaPeru(ByVal numero As String, ByVal prefijo As String) As Int64
        Try
            Return ODatos.RecuperarReciboCanastillaPeru(numero, prefijo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboCanastillaPeru", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboCanastillaPeru", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboParaBonoFidelizacion(ByVal numero As String, ByVal prefijo As String) As Int64
        Try
            Return ODatos.RecuperarReciboParaBonoFidelizacion(numero, prefijo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboParaBonoFidelizacion", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboParaBonoFidelizacion", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ValidarAlertaDocumentoAnulado(ByVal numero As String, ByVal prefijo As String)
        Try
            ODatos.ValidarAlertaDocumentoAnulado(numero, prefijo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarAlertaDocumentoAnulado", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarAlertaDocumentoAnulado", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarUltimaLectura() As Int32
        Try
            Return ODatos.RecuperarUltimaLectura()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaLectura", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaLectura", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoIdModificacion() As Int32
        Try
            Return ODatos.RecuperarUltimoIdModificacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoIdModificacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoIdModificacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoIdRedencionBono() As Int32
        Try
            Return ODatos.RecuperarUltimoIdRedencionBono()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoIdRedencionBono", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoIdRedencionBono", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoIdAnulacionRedencionBono() As Int64
        Try
            Return ODatos.RecuperarUltimoIdAnulacionRedencionBono()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoIdAnulacionRedencionBono", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoIdAnulacionRedencionBono", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboPorIdModificacionVenta(ByVal IdModificacion As Int32) As Int64
        Try
            Return ODatos.RecuperarReciboPorIdModificacionVenta(IdModificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorIdModificacionVenta", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorIdModificacionVenta", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaLectura(ByVal CDC As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimaLectura(CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaLectura", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaLectura", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarUltimaLecturaCRM(ByVal CDC As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimaLecturaCRM(CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaLecturaCRM", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaLecturaCRM", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaFactura() As Int32
        Try
            Return ODatos.RecuperarUltimaFactura()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaFactura", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaFactura", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaFacturacionCanastilla() As Int32
        Try
            Return ODatos.RecuperarUltimaFacturacionCanastilla()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaFacturacionCanastilla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaFacturacionCanastilla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaFacturacionCombustible() As Int32
        Try
            Return ODatos.RecuperarUltimaFacturacionCombustible()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaFacturacionCombustible", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaFacturacionCombustible", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoCheque() As Int32
        Try
            Return ODatos.RecuperarUltimoCheque()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoCheque", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoCheque", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoTurnoTrabajo() As Int32
        Try
            Return ODatos.RecuperarUltimoTurnoTrabajo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoTrabajo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoTrabajo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoTrasladoCombustible() As Int32
        Try
            Return ODatos.RecuperarUltimoTrasladoCombustible()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoTrasladoCombustible", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoTrasladoCombustible", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoTrasladoCanastilla() As Int32
        Try
            Return ODatos.RecuperarUltimoTrasladoCanastilla()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoTrasladoCanastilla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoTrasladoCanastilla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaAlarmaSobreTasa() As Int32
        Try
            Return ODatos.RecuperarUltimaAlarmaSobreTasa()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaAlarmaSobreTasa", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaAlarmaSobreTasa", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaAlarmaVeederRoot() As Int32
        Try
            Return ODatos.RecuperarUltimaAlarmaVeederRoot()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaAlarmaVeederRoot", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaAlarmaVeederRoot", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaVentaCanastilla() As Int32
        Try
            Return ODatos.RecuperarUltimaVentaCanastilla()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaVentaCanastilla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaVentaCanastilla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaNotaCredito() As Int32
        Try
            Return ODatos.RecuperarUltimaNotaCredito()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaNotaCredito", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaNotaCredito", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaNotaCreditoTerpel() As Int32
        Try
            Return ODatos.RecuperarUltimaNotaCreditoTerpel()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaNotaCreditoTerpel", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaNotaCreditoTerpel", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Function RecuperarLectoresPorPuerto(ByVal idPuerto As Int32) As DataSet
        Try
            Return ODatos.RecuperarLectoresPorPuerto(idPuerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLectoresPorPuerto", "idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLectoresPorPuerto", "idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    'Public Function RecuperarLectoresRedOneWire(ByVal puerto As String) As ArrayList
    '    Dim oTmexHelper As New TmexHelper

    '    Try
    '        Dim Lectores As ArrayList

    '        oTmexHelper.IniciarSesion(puerto, TypeAdapter.DS9097U)
    '        Lectores = oTmexHelper.BuscarLectores(puerto)

    '        Return Lectores
    '    Catch
    '        Throw
    '    Finally
    '        oTmexHelper.FinalizarSesion()
    '    End Try

    'End Function


    Function RecuperarLectoresPorPuerto(ByVal idPuerto As Int32, ByVal IdEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarLectoresPorPuerto(idPuerto, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLectoresPorPuerto", "idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLectoresPorPuerto", "idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarLector(ByVal idLector As Int32)
        Try
            ODatos.EliminarLector(idLector)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarLector", "idLector: " & idLector, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarLector", "idLector: " & idLector, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarLector(ByVal rom As String, ByVal idOneWire As Int32)
        Try
            ODatos.InsertarLector(rom, idOneWire)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLector", "rom: " & rom & " , IdOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLector", "rom: " & rom & " , IdOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarLector(ByVal rom As String, ByVal idOneWire As Int32, ByVal IdEstacion As Int16)
        Try
            ODatos.InsertarLector(rom, idOneWire, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLector", "rom: " & rom & " , IdOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLector", "rom: " & rom & " , IdOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarLector(ByVal idLector As Int32, ByVal rom As String, ByVal idOneWire As Int32)
        Try
            ODatos.ActualizarLector(idLector, rom, idOneWire)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarLector", "idLector: " & idLector & " , rom: " & rom & " ,idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarLector", "idLector: " & idLector & " , rom: " & rom & " ,idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarTurnoHorario(ByVal horaInicio As Date, ByVal horaFin As Date, ByVal numeroTurno As Int16)
        Try
            ODatos.InsertarTurnoHorario(horaInicio, horaFin, numeroTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTurnoHorario", "horaInicio: " & horaInicio & " , horaFin: " & horaFin & " ,numeroTurno: " & numeroTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTurnoHorario", "horaInicio: " & horaInicio & " , horaFin: " & horaFin & " ,numeroTurno: " & numeroTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarTurnoHorario(ByVal idTurnoHorario As Int32, ByVal horaInicio As Date, ByVal horaFin As Date, ByVal numeroTurno As Int16)
        Try
            ODatos.InsertarTurnoHorario(idTurnoHorario, horaInicio, horaFin, numeroTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTurnoHorario", "horaInicio: " & horaInicio & " , horaFin: " & horaFin & " ,numeroTurno: " & numeroTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTurnoHorario", "horaInicio: " & horaInicio & " , horaFin: " & horaFin & " ,numeroTurno: " & numeroTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarTurnoHorario(ByVal idTurnoHorario As Int32, ByVal horaInicio As Date, ByVal horaFin As Date, ByVal numeroTurno As Int16, ByVal Ajustes As Boolean)
        Try
            ODatos.InsertarTurnoHorario(idTurnoHorario, horaInicio, horaFin, numeroTurno, Ajustes)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTurnoHorario", "horaInicio: " & horaInicio & " , horaFin: " & horaFin & " ,numeroTurno: " & numeroTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTurnoHorario", "horaInicio: " & horaInicio & " , horaFin: " & horaFin & " ,numeroTurno: " & numeroTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarTurnoHorario(ByVal idTurnoHorario As Int32, ByVal horaInicio As Date, ByVal horaFin As Date, ByVal numeroTurno As Int16, ByVal Ajustes As Boolean, ByVal IdEstacion As Int16)
        Try
            ODatos.InsertarTurnoHorario(idTurnoHorario, horaInicio, horaFin, numeroTurno, Ajustes, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTurnoHorario", "horaInicio: " & horaInicio & " , horaFin: " & horaFin & " ,numeroTurno: " & numeroTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTurnoHorario", "horaInicio: " & horaInicio & " , horaFin: " & horaFin & " ,numeroTurno: " & numeroTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarTurnosHorario() As DataSet
        Try
            Return ODatos.RecuperarTurnosHorario()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosHorario", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosHorario", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnosHorario(ByVal IdEstacion As Int32) As DataSet
        Try
            Return ODatos.RecuperarTurnosHorario(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosHorario", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosHorario", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarListaTurnosHorario() As DataSet
        Try
            Return ODatos.RecuperarListaTurnosHorario()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarListaTurnosHorario", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarListaTurnosHorario", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub EliminarCaraLector(ByVal idCaraLector As Int32)
        Try
            ODatos.EliminarCaraLector(idCaraLector)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarCaraLector", "idCaraLector: " & idCaraLector, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarCaraLector", "idCaraLector: " & idCaraLector, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarCaraLector(ByVal idPuerto As Int32, ByVal IdCara As Int32)
        Try
            ODatos.InsertarCaraLector(idPuerto, IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCaraLector", "IdCara: " & IdCara & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCaraLector", "IdCara: " & IdCara & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarRedSurtidor(ByVal idProtocolo As Int32, ByVal idPuerto As Int32, ByVal caraInicial As Int32)
        Try
            ODatos.InsertarRedSurtidor(idProtocolo, idPuerto, caraInicial)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRedSurtidor", "IdProtocolo: " & idProtocolo & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRedSurtidor", "IdProtocolo: " & idProtocolo & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarRedSurtidor(ByVal idProtocolo As Int32, ByVal idPuerto As Int32, ByVal Eco As Boolean)
        Try
            ODatos.InsertarRedSurtidor(idProtocolo, idPuerto, Eco)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRedSurtidor", "IdProtocolo: " & idProtocolo & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRedSurtidor", "IdProtocolo: " & idProtocolo & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarRedSurtidor(ByVal idProtocolo As Int32, ByVal idPuerto As Int32, ByVal Eco As Boolean, ByVal IdEstacion As Int16)
        Try
            ODatos.InsertarRedSurtidor(idProtocolo, idPuerto, Eco, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRedSurtidor", "IdProtocolo: " & idProtocolo & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRedSurtidor", "IdProtocolo: " & idProtocolo & " ,IdPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMultiplicadorProtocolo(ByVal idFactor As Int32, ByVal idProtocolo As Int32, ByVal idProducto As Int32, ByVal factorPrecio As Int32)
        Try
            ODatos.ActualizarMultiplicadorProtocolo(idFactor, idProtocolo, idProducto, factorPrecio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMultiplicadorProtocolo", "idFactor: " & idFactor & " ,idProtocolo: " & idProtocolo & " , idProducto: " & idProducto & " , factorPrecio: " & factorPrecio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMultiplicadorProtocolo", "idFactor: " & idFactor & " ,idProtocolo: " & idProtocolo & " , idProducto: " & idProducto & " , factorPrecio: " & factorPrecio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMultiplicadorProtocolo(ByVal idFactor As Int32, ByVal idProtocolo As Int32, ByVal idProducto As Int32, ByVal factorPrecio As Int32, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarMultiplicadorProtocolo(idFactor, idProtocolo, idProducto, factorPrecio, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMultiplicadorProtocolo", "idFactor: " & idFactor & " ,idProtocolo: " & idProtocolo & " , idProducto: " & idProducto & " , factorPrecio: " & factorPrecio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMultiplicadorProtocolo", "idFactor: " & idFactor & " ,idProtocolo: " & idProtocolo & " , idProducto: " & idProducto & " , factorPrecio: " & factorPrecio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarMultiplicadorProtocolo(ByVal idProtocolo As Int32, ByVal idProducto As Int32, ByVal factorPrecio As Int32)
        Try
            ODatos.InsertarMultiplicadorProtocolo(idProtocolo, idProducto, factorPrecio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMultiplicadorProtocolo", "idProtocolo: " & idProtocolo & " , idProducto: " & idProducto & " , factorPrecio: " & factorPrecio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMultiplicadorProtocolo", "idProtocolo: " & idProtocolo & " , idProducto: " & idProducto & " , factorPrecio: " & factorPrecio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarMultiplicadorProtocolo(ByVal idProtocolo As Int32, ByVal idProducto As Int32, ByVal factorPrecio As Int32, ByVal IdEstacion As Int16)
        Try
            ODatos.InsertarMultiplicadorProtocolo(idProtocolo, idProducto, factorPrecio, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMultiplicadorProtocolo", "idProtocolo: " & idProtocolo & " , idProducto: " & idProducto & " , factorPrecio: " & factorPrecio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMultiplicadorProtocolo", "idProtocolo: " & idProtocolo & " , idProducto: " & idProducto & " , factorPrecio: " & factorPrecio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarCaraLector(ByVal idCaraLector As Int32, ByVal idCara As Int32, ByVal idPuerto As Int32)
        Try
            ODatos.ActualizarCaraLector(idCaraLector, idCara, idPuerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCaraLector", "idCaraLector: " & idCaraLector & " ,idCara: " & idCara & " , idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCaraLector", "idCaraLector: " & idCaraLector & " ,idCara: " & idCara & " , idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw

        End Try
    End Sub
    Public Sub ActualizarRedSurtidor(ByVal idRed As Int32, ByVal idProtocolo As Int32, ByVal idPuerto As Int32, ByVal caraInicial As Int32)
        Try
            ODatos.ActualizarRedSurtidor(idRed, idProtocolo, idPuerto, caraInicial)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarRedSurtidor", "idRed: " & idRed & " ,idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto & " , CaraInicial: " & caraInicial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarRedSurtidor", "idRed: " & idRed & " ,idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto & " , CaraInicial: " & caraInicial, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarRedSurtidor(ByVal idRed As Int32, ByVal idProtocolo As Int32, ByVal idPuerto As Int32, ByVal Eco As Boolean)
        Try
            ODatos.ActualizarRedSurtidor(idRed, idProtocolo, idPuerto, Eco)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarRedSurtidor", "idRed: " & idRed & " ,idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto & " , Eco: " & Eco, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarRedSurtidor", "idRed: " & idRed & " ,idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto & " , Eco: " & Eco, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarRedSurtidor(ByVal idRed As Int32, ByVal idProtocolo As Int32, ByVal idPuerto As Int32, ByVal Eco As Boolean, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarRedSurtidor(idRed, idProtocolo, idPuerto, Eco, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarRedSurtidor", "idRed: " & idRed & " ,idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto & " , Eco: " & Eco, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarRedSurtidor", "idRed: " & idRed & " ,idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto & " , Eco: " & Eco, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarRedSurtidor(ByVal idProtocolo As Int32, ByVal idPuerto As Int32)
        Try
            ODatos.EliminarRedSurtidor(idProtocolo, idPuerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarRedSurtidor", "idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarRedSurtidor", "idProtocolo: " & idProtocolo & " , idPuerto: " & idPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarMultiplicadorProtocolo(ByVal idFactor As Int32)
        Try
            ODatos.EliminarMultiplicadorProtocolo(idFactor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarMultiplicadorProtocolo", "idFactor: " & idFactor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarMultiplicadorProtocolo", "idFactor: " & idFactor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarCapturador(ByVal puerto As String, ByVal isla As Int32)
        Try
            ODatos.InsertarCapturador(puerto, isla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCapturador", "puerto: " & puerto & " , isla: " & isla, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCapturador", "puerto: " & puerto & " , isla: " & isla, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub ActualizarTarjetaConsumo(ByVal IdTarjetaConsumo As Integer, ByVal Numero As String, ByVal EsActiva As Boolean)
        Try
            ODatos.ActualizarTarjetaConsumo(IdTarjetaConsumo, Numero, EsActiva)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTarjetaConsumo", "Numero: " & Numero & " , EsActiva: " & EsActiva, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTarjetaConsumo", "Numero: " & Numero & " , EsActiva: " & EsActiva, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarCapturador(ByVal idCapturador As Int32, ByVal puerto As String, ByVal isla As Int32)
        Try
            ODatos.ActualizarCapturador(idCapturador, puerto, isla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCapturador", "idCapturador: " & idCapturador & " , puerto: " & puerto & " ,Isla: " & isla, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCapturador", "idCapturador: " & idCapturador & " , puerto: " & puerto & " ,Isla: " & isla, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarCapturador(ByVal idCapturador As Int32)
        Try
            ODatos.EliminarCapturador(idCapturador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarCapturador", "idCapturador: " & idCapturador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarCapturador", "idCapturador: " & idCapturador, "FallaStoredProcedure")
            Throw
        End Try
    End Sub




    Public Function RecuperarIdTarjetaPorNumero(ByVal tarjeta As String) As Integer
        Try
            Return ODatos.RecuperarIdTarjetaPorNumero(tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdTarjetaPorNumero", "tarjeta: " & tarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdTarjetaPorNumero", "tarjeta: " & tarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ActualizarOneWire(ByVal idOneWire As Int32, ByVal puerto As String)
        Try
            ODatos.ActualizarOneWire(idOneWire, puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarOneWire", "idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarOneWire", "idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarOneWire(ByVal idOneWire As Int32, ByVal puerto As String, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarOneWire(idOneWire, puerto, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarOneWire", "idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarOneWire", "idOneWire: " & idOneWire, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarOneWire(ByVal puerto As String)
        Try
            ODatos.InsertarOneWire(puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarOneWire", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarOneWire", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarOneWire(ByVal puerto As String, ByVal IdEstacion As Int16)
        Try
            ODatos.InsertarOneWire(puerto, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarOneWire", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarOneWire", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarProtocolo(ByVal nombre As String, ByVal pathLibreria As String)
        Try
            ODatos.InsertarProtocolo(nombre, pathLibreria)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarProtocolo", "nombre: " & nombre & " , pathLibreria: " & pathLibreria, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarProtocolo", "nombre: " & nombre & " , pathLibreria: " & pathLibreria, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub GuardarResolucionPrepago(ByVal numero As Integer, ByVal fecha As String, ByVal consecutivo As Integer)
        Try
            ODatos.GuardarResolucionPrepago(numero, fecha, consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "GuardarResolucionPrepago", "numero: " & numero & " , fecha: " & fecha & " , consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "GuardarResolucionPrepago", "numero: " & numero & " , fecha: " & fecha & " , consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarProtocolo(ByVal nombre As String, ByVal pathLibreria As String, ByVal AplicaBloqueo As Boolean)
        Try
            ODatos.InsertarProtocolo(nombre, pathLibreria, AplicaBloqueo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarProtocolo", "nombre: " & nombre & " , pathLibreria: " & pathLibreria & " , AplicaBloqueo: " & AplicaBloqueo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarProtocolo", "nombre: " & nombre & " , pathLibreria: " & pathLibreria & " , AplicaBloqueo: " & AplicaBloqueo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarProtocolo(ByVal id As Int32, ByVal nombre As String, ByVal pathLibreria As String)
        Try
            ODatos.ActualizarProtocolo(id, nombre, pathLibreria)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarProtocolo", "id: " & id & " , nombre: " & nombre & " , pathLibreria: " & pathLibreria, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarProtocolo", "id: " & id & " , nombre: " & nombre & " , pathLibreria: " & pathLibreria, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarProtocolo(ByVal idProtocolo As Int32)
        Try
            ODatos.EliminarProtocolo(idProtocolo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarProtocolo", "idProtocolo: " & idProtocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarProtocolo", "idProtocolo: " & idProtocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarParametro(ByVal nombre As String, ByVal valor As String)
        Try
            ODatos.ActualizarParametro(nombre, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarParametro", "nombre: " & nombre & " , valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarParametro", "nombre: " & nombre & " , valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarParametro(ByVal nombre As String, ByVal valor As String, ByVal Idestacion As Int32)
        Try
            ODatos.ActualizarParametro(nombre, valor, Idestacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarParametro", "nombre: " & nombre & " , valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarParametro", "nombre: " & nombre & " , valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarSincronizacion(ByVal tabla As String, ByVal valor As String, ByVal CDC As Integer)
        Try
            ODatos.ActualizarSincronizacion(tabla, valor, CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSincronizacion", "Tabla: " & tabla & " , valor: " & valor & " , " & CDC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSincronizacion", "Tabla: " & tabla & " , valor: " & valor & " , " & CDC, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarSincronizacionCRM(ByVal tabla As String, ByVal valor As String, ByVal CDC As Integer)
        Try
            ODatos.ActualizarSincronizacionCRM(tabla, valor, CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSincronizacionCRM", "Tabla: " & tabla & " , valor: " & valor & " , " & CDC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSincronizacionCRM", "Tabla: " & tabla & " , valor: " & valor & " , " & CDC, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarSincronizacion(ByVal tabla As String, ByVal valor As String)
        Try
            ODatos.ActualizarSincronizacion(tabla, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSincronizacion", "Tabla: " & tabla & " , valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSincronizacion", "Tabla: " & tabla & " , valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub ActualizarSincronizacionMexico(ByVal tabla As String, ByVal valor As String)
        Try
            ODatos.ActualizarSincronizacionMexico(tabla, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSincronizacionMexico", "Tabla: " & tabla & " , valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSincronizacionMexico", "Tabla: " & tabla & " , valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Function RecuperarCopiasPorFormaCanastilla(ByVal recibo As Int64) As Int32
        Try
            Return ODatos.RecuperarCopiasPorFormaCanastilla(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCopiasPorForma", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCopiasPorForma", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub InsertarVentaEnKardex(ByVal Recibo As Double)
        Try
            ODatos.InsertarVentaEnKardex(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaEnKardex", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaEnKardex", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub


    Function RecuperarCopiasPorForma(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As Int32
        Try
            Return ODatos.RecuperarCopiasPorForma(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCopiasPorForma", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCopiasPorForma", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Function RecuperarCopiasPorForma(ByVal recibo As Int64, ByVal idEstacion As Int16, Optional ByVal esVentaRegistrada As Boolean = True) As Int32
        Try
            Return ODatos.RecuperarCopiasPorForma(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCopiasPorForma", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCopiasPorForma", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Function RecuperarCopiasPorForma(ByVal recibo As Int64, ByVal IdEstacion As Integer, Optional ByVal esVentaRegistrada As Boolean = True) As Int32
        Try
            Return ODatos.RecuperarCopiasPorForma(recibo, IdEstacion, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCopiasPorForma", "recibo: " & recibo & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCopiasPorForma", "recibo: " & recibo & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Function RecuperarTipoDocumentoVenta(ByVal recibo As Int64) As Int16
        Try
            Return ODatos.RecuperarTipoDocumentoVenta(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoDocumentoVenta", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoDocumentoVenta", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPuertos() As DataSet
        Try
            Return ODatos.RecuperarPuertos
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuertos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarPuertosImpresora() As DataTable
        Try
            Return ODatos.RecuperarPuertos.Tables(0)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuertosImpresora", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertosImpresora", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarPuertos(ByVal IdEstacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarPuertos(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuertos", "IdEstacion:" & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertos", "IdEstacion:" & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarSincronizacion() As DataSet
        Try
            Return ODatos.RecuperarSincronizacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSincronizacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSincronizacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSincronizacion(ByVal CDC As Integer) As DataSet
        Try
            Return ODatos.RecuperarSincronizacion(CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSincronizacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSincronizacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarSincronizacionCRM(ByVal CDC As Integer) As DataSet
        Try
            Return ODatos.RecuperarSincronizacionCRM(CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSincronizacionCRM", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSincronizacionCRM", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarSincronizacion(ByVal CDC As Integer, ByVal IdEstacion As Int32) As DataSet
        Try
            Return ODatos.RecuperarSincronizacion(CDC, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSincronizacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSincronizacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSincronizacionMexico() As DataSet
        Try
            Return ODatos.RecuperarSincronizacionMexico()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSincronizacionMexico", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSincronizacionMexico", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRedSurtidores() As DataSet
        Try
            Return ODatos.RecuperarRedSurtidores
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRedSurtidores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRedSurtidores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRedSurtidores(ByVal IdEstacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarRedSurtidores(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRedSurtidores", "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRedSurtidores", "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarPuerto(ByVal puerto As Integer) As IDataReader
        Try
            Return ODatos.RecuperarPuerto(puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoSurtidores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoSurtidores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTipoSurtidores() As IDataReader
        Try
            Return ODatos.RecuperarTipoSurtidores
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoSurtidores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoSurtidores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarRedLectores(ByVal IdEstacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarRedLectores(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRedLectores", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRedLectores", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarRedLectores() As DataSet
        Try
            Return ODatos.RecuperarRedLectores
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRedLectores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRedLectores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarResolucionPrepago() As IDataReader
        Try
            Return ODatos.RecuperarResolucionPrepago
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarResolucionPrepago", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarResolucionPrepago", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarConfiguracionParametros() As IDataReader
        Try
            Return ODatos.RecuperarConfiguracionParametros
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConfiguracionParametros", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConfiguracionParametros", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConfiguracionParametros(ByVal IdEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarConfiguracionParametros(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConfiguracionParametros", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConfiguracionParametros", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarSurtidor()
        Try
            ODatos.InsertarSurtidor()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSurtidor", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSurtidor", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarSurtidorFullStation(ByVal CantidadSurtidores As Int32)
        Try
            ODatos.InsertarSurtidorFullStation(CantidadSurtidores)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSurtidor", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSurtidor", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarSurtidorFullStation(ByVal CantidadSurtidores As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarSurtidorFullStation(CantidadSurtidores, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSurtidor", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSurtidor", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub VincularSurtidorTurno(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String)
        Try
            ODatos.VincularSurtidorTurno(empleado, clave, surtidores)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "VincularSurtidorTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "VincularSurtidorTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub VincularSurtidorTurno(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String, ByVal idEstacion As Int16)
        Try
            ODatos.VincularSurtidorTurno(empleado, clave, surtidores, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "VincularSurtidorTurno", "IdEstacion: " & IdEstacion & "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "VincularSurtidorTurno", "IdEstacion: " & IdEstacion & "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Function InsertarPagoExtraOrdinario(ByVal empleado As String, ByVal clave As String, ByVal placa As String, ByVal valor As String) As Int32
        Try
            Return ODatos.InsertarPagoExtraOrdinario(empleado, clave, placa, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinario", "empleado: " & empleado & " , clave: " & clave & " , placa: " & placa & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinario", "empleado: " & empleado & " , clave: " & clave & " , placa: " & placa & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarPagoExtraOrdinarioPorCredito(ByVal empleado As String, ByVal clave As String, ByVal credito As Integer, ByVal valor As String, ByVal idFinanciera As Int32, ByVal placa As String) As Int32
        Try
            Return ODatos.InsertarPagoExtraOrdinario(empleado, clave, placa, credito, valor, idFinanciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioPorIdentificador", "empleado: " & empleado & " , clave: " & clave & " , credito: " & credito & " , Valor: " & valor & " , IdFinanciera: " & idFinanciera & " , Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioPorIdentificador", "empleado: " & empleado & " , clave: " & clave & " , credito: " & credito & " , Valor: " & valor & " , IdFinanciera: " & idFinanciera & " , Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarPagoExtraOrdinarioPorCredito(ByVal empleado As String, ByVal clave As String, ByVal credito As Integer, ByVal valor As String, ByVal idFinanciera As Int32, ByVal placa As String, ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.InsertarPagoExtraOrdinario(empleado, clave, placa, credito, valor, idFinanciera, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioPorIdentificador", "IdEstacion: " & IdEstacion & "empleado: " & empleado & " , clave: " & clave & " , credito: " & credito & " , Valor: " & valor & " , IdFinanciera: " & idFinanciera & " , Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioPorIdentificador", "IdEstacion: " & IdEstacion & "empleado: " & empleado & " , clave: " & clave & " , credito: " & credito & " , Valor: " & valor & " , IdFinanciera: " & idFinanciera & " , Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarPagoExtraOrdinarioPorVenta(ByVal empleado As String, ByVal clave As String, ByVal recibo As Int64, ByVal credito As Integer, ByVal valor As String, ByVal idFinanciera As Int32) As Int32
        Dim Placa As String = ""
        Try
            Placa = ODatos.RecuperarPlacaPorRecibo(recibo)
            Return ODatos.InsertarPagoExtraOrdinario(empleado, clave, Placa.Trim, credito, valor, idFinanciera, recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioPorVenta", "empleado: " & empleado & " , clave: " & clave & " , recibo: " & recibo & " , " & credito & " , Valor: " & valor & " , IdFinanciera: " & idFinanciera & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioPorVenta", "empleado: " & empleado & " , clave: " & clave & " , recibo: " & recibo & " , " & credito & " , Valor: " & valor & " , IdFinanciera: " & idFinanciera & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function InsertarPagoExtraOrdinarioPorVentaTerpel(ByVal empleado As String, ByVal clave As String, ByVal recibo As Int64, ByVal credito As Integer, ByVal valor As String, ByVal idFinanciera As Int32) As Int32
        Dim Placa As String = ""
        Try
            Placa = ODatos.RecuperarPlacaPorRecibo(recibo)
            Return ODatos.InsertarPagoExtraOrdinario(empleado, clave, Placa.Trim, credito, valor, idFinanciera, recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioPorVenta", "empleado: " & empleado & " , clave: " & clave & " , recibo: " & recibo & " , " & credito & " , Valor: " & valor & " , IdFinanciera: " & idFinanciera & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoExtraOrdinarioPorVenta", "empleado: " & empleado & " , clave: " & clave & " , recibo: " & recibo & " , " & credito & " , Valor: " & valor & " , IdFinanciera: " & idFinanciera & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCaraPorTiquete(ByVal recibo As Int64) As String
        Try
            Return ODatos.RecuperarCaraPorTiquete(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCaraPorTiquete", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCaraPorTiquete", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpresoraPorTiquete(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As String
        Try
            Return ODatos.RecuperarImpresoraPorTiquete(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTiquete", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTiquete", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarImpresoraPorTiqueteChile(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As IDataReader
        Try
            Return ODatos.RecuperarImpresoraPorTiqueteChile(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTiquete", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTiquete", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarImpresoraPorTiquete(ByVal recibo As Int64, ByVal IdEstacion As Integer, Optional ByVal esVentaRegistrada As Boolean = True) As String
        Try
            Return ODatos.RecuperarImpresoraPorTiquete(recibo, IdEstacion, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTiquete", "Recibo: " & recibo & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTiquete", "Recibo: " & recibo & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function





    Public Sub DesvincularSurtidorTurno(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String)
        Try
            ODatos.DesvincularSurtidorTurno(empleado, clave, surtidores)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "DesvincularSurtidorTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "DesvincularSurtidorTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub DesvincularSurtidorTurno(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String, ByVal idEstacion As Int16)
        Try
            ODatos.DesvincularSurtidorTurno(empleado, clave, surtidores, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "DesvincularSurtidorTurno", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "DesvincularSurtidorTurno", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CancelarProcesoTurno(ByVal idCara As Int16, ByVal estado As Boolean, ByVal idEstacion As Int16)
        Try
            ODatos.CancelarProcesoTurno(idCara, estado, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CancelarProcesoTurno", "IdEstacion: " & idEstacion & "IdCara: " & idCara & " , Estado: " & IIf(estado, "Cierre", "Apertura").ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CancelarProcesoTurno", "IdEstacion: " & idEstacion & "IdCara: " & idCara & " , Estado: " & IIf(estado, "Cierre", "Apertura").ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CancelarProcesoTurno(ByVal idCara As Int16, ByVal estado As Boolean)
        Try
            ODatos.CancelarProcesoTurno(idCara, estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CancelarProcesoTurno", "IdCara: " & idCara & " , Estado: " & IIf(estado, "Cierre", "Apertura").ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CancelarProcesoTurno", "IdCara: " & idCara & " , Estado: " & IIf(estado, "Cierre", "Apertura").ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ConsultarCredencialesEmpleado(ByVal Cedula As String) As String
        Try
            Return ODatos.ConsultarCredencialesEmpleado(Cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ConsultarCredencialesEmpleado", "Cedula: " & Cedula, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ConsultarCredencialesEmpleado", "Cedula: " & Cedula, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function CerrarTurno(ByVal empleado As String, ByVal clave As String, ByRef surtidores As String, ByVal SurtidoresACerrar As String) As Int32
        Try
            Return ODatos.CerrarTurno(empleado, clave, surtidores, SurtidoresACerrar)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CerrarTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , SurtidoresACerrar: " & SurtidoresACerrar, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , SurtidoresACerrar: " & SurtidoresACerrar, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub CerrarTurnoAutomatico(ByVal idTurno As Int32, ByRef surtidores As String)
        Try
            ODatos.CerrarTurnoAutomatico(idTurno, surtidores)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CerrarTurnoAutomatico", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarTurnoAutomatico", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CerrarTurnoValidacion(ByVal empleado As String, ByVal clave As String, ByRef surtidores As String, ByRef idTurno As Int32)
        Try
            ODatos.CerrarTurnoValidacion(empleado, clave, surtidores, idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CerrarTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub CerrarTurnoValidacion(ByVal empleado As String, ByVal clave As String, ByRef surtidores As String, ByRef idTurno As Int32, ByRef idEstacion As Int16)
        Try
            ODatos.CerrarTurnoValidacion(empleado, clave, surtidores, idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CerrarTurno", "IdEstacion: " & IdEstacion & "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarTurno", "IdEstacion: " & IdEstacion & "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub CerrarTurnoValidacion(ByRef surtidores As String, ByRef idTurno As Int32, ByRef idTurnoAutomatico As Int32)
        Try
            ODatos.CerrarTurnoValidacion(surtidores, idTurno, idTurnoAutomatico)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CerrarTurno", "surtidores: " & surtidores & " , IdTurnoAutomatico: " & idTurnoAutomatico, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarTurno", "surtidores: " & surtidores & " , IdTurnoAutomatico: " & idTurnoAutomatico, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub CerrarTurnoValidacion(ByRef surtidores As String, ByRef idTurno As Int32, ByRef idTurnoAutomatico As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.CerrarTurnoValidacion(surtidores, idTurno, idTurnoAutomatico, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CerrarTurno", "IdEstacion: " & idEstacion & "surtidores: " & surtidores & " , IdTurnoAutomatico: " & idTurnoAutomatico, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarTurno", "IdEstacion: " & idEstacion & "surtidores: " & surtidores & " , IdTurnoAutomatico: " & idTurnoAutomatico, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function CerrarTurnoTrabajoValidacion(ByVal empleado As String) As Int32
        Try
            Return ODatos.CerrarTurnoTrabajoValidacion(empleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CerrarTurnoTrabajoValidacion", "empleado: " & empleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarTurnoTrabajoValidacion", "empleado: " & empleado, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function CerrarTurnoTrabajoValidacion(ByVal empleado As String, ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.CerrarTurnoTrabajoValidacion(empleado, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CerrarTurnoTrabajoValidacion", "IdEstacion: " & idEstacion & "empleado: " & empleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CerrarTurnoTrabajoValidacion", "IdEstacion: " & idEstacion & "empleado: " & empleado, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function AbrirTurno(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String, ByVal delta As Int32) As Int32
        Try
            Return ODatos.AbrirTurno(empleado, clave, surtidores, delta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AbrirTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AbrirTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarCierreTurnoParcialSurtidor(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String) As Int32
        Try
            ODatos.ValidarCierreTurnoParcialSurtidor(empleado, clave, surtidores)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreTurnoParcialSurtidor", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreTurnoParcialSurtidor", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub IniciarSesion(ByVal empleado As String, ByVal clave As String, ByVal puerto As String)
        Try
            ODatos.IniciarSesion(empleado, clave, puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "IniciarSesion", "empleado: " & empleado & " , clave: " & clave & " , puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "IniciarSesion", "empleado: " & empleado & " , clave: " & clave & " , puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub IniciarSesion(ByVal empleado As String, ByVal clave As String, ByVal puerto As String, ByVal idEstacion As Int16)
        Try
            ODatos.IniciarSesion(empleado, clave, puerto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "IniciarSesion", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , clave: " & clave & " , puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "IniciarSesion", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , clave: " & clave & " , puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function EsPrimerTurnoAbierto() As Boolean
        Try
            Return ODatos.EsPrimerTurnoAbierto()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsPrimerTurnoAbierto", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsPrimerTurnoAbierto", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function AbrirTurnoValidacion(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String, ByVal delta As Int32) As Int32
        Try
            Return ODatos.AbrirTurnoValidacion(empleado, clave, surtidores, delta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AbrirTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AbrirTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function AbrirTurnoValidacionTerpel(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String, ByVal delta As Int32, ByVal esAutoServicio As Boolean) As Int32
        Try
            Return ODatos.AbrirTurnoValidacionTerpel(empleado, clave, surtidores, delta, esAutoServicio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AbrirTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta & " , EsAutoServicio: " & esAutoServicio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AbrirTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta & " , EsAutoServicio: " & esAutoServicio, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function AbrirTurnoValidacionTerpel(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String, ByVal delta As Int32, ByVal esAutoServicio As Boolean, ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.AbrirTurnoValidacionTerpel(empleado, clave, surtidores, delta, esAutoServicio, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AbrirTurno", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta & " , EsAutoServicio: " & esAutoServicio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AbrirTurno", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta & " , EsAutoServicio: " & esAutoServicio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function AbrirTurnoTrabajoValidacion(ByVal empleado As String, ByVal clave As String, ByVal delta As Int32, ByVal tipoTurno As Byte) As Int32
        Try
            Return ODatos.AbrirTurnoTrabajoValidacion(empleado, clave, delta, tipoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AbrirTurnoTrabajoValidacion", "empleado: " & empleado & " , clave: " & clave & " , Delta: " & delta & ", tipoTurno: " & tipoTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AbrirTurnoTrabajoValidacion", "empleado: " & empleado & " , clave: " & clave & " , Delta: " & delta & ", tipoTurno: " & tipoTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function AbrirTurnoApoyo(ByVal empleado As String, ByVal clave As String) As Int32
        Try
            Return ODatos.AbrirTurnoApoyo(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AbrirTurnoApoyo", "empleado: " & empleado & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AbrirTurnoApoyo", "empleado: " & empleado & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsEmpleadoTurnoApoyo(ByVal empleado As String, ByVal clave As String) As Int32
        Try
            Return ODatos.EsEmpleadoTurnoApoyo(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsEmpleadoTurnoApoyo", "empleado: " & empleado & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsEmpleadoTurnoApoyo", "empleado: " & empleado & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function AbrirTurnoTrabajoValidacion(ByVal empleado As String, ByVal clave As String, ByVal delta As Int32, ByVal tipoTurno As Byte, ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.AbrirTurnoTrabajoValidacion(empleado, clave, delta, tipoTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AbrirTurnoTrabajoValidacion", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , clave: " & clave & " , Delta: " & delta & ", tipoTurno: " & tipoTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AbrirTurnoTrabajoValidacion", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , clave: " & clave & " , Delta: " & delta & ", tipoTurno: " & tipoTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function AbrirTurnoValidacionGazel(ByVal empleado As String, ByVal clave As String, ByVal surtidores As String, ByVal delta As Int32, ByVal lecturaTeleCorrector As Nullable(Of Decimal)) As Int32
        Try
            Return ODatos.AbrirTurnoValidacionGazel(empleado, clave, surtidores, delta, lecturaTeleCorrector)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AbrirTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AbrirTurno", "empleado: " & empleado & " , clave: " & clave & " , surtidores: " & surtidores & " , Delta: " & delta, "FallaStoredProcedure")
            Throw
        End Try
    End Function





    'Comentariado Por Cambios Optimizacion Lectura de Chips

    'Public Function ESAutorizado(ByVal cara As Byte, ByVal tipoValidacion As ETipoValidacion, Optional ByVal EsGasolina As Boolean = False) As InformacionVehiculo

    '    Try
    '        'Recuperar el lector asociado a la cara
    '        Dim Lector As String = ODatos.RecuperarLectorPorCara(cara)

    '        'Recupera los datos del boton
    '        Dim Datos As DS1992
    '        Dim DatosConfirmacion As DS1992
    '        Dim iIntentos As Int16 = 0
    '        Dim blnReintentar As Boolean = True
    '        Dim oInformacion As InformacionChip
    '        Dim oInformacionConfirmacion As InformacionChip
    '        Dim iReintentosConfirmacion As Int16 = 0
    '        Dim EsTwoFish As Boolean = False
    '        Dim EsServipunto As Boolean = False
    '        Dim NumeroIntentos As Int32 = CInt(ODatos.RecuperarParametro("LecturaChipReintentos"))
    '        Dim Delay As Int32 = CInt(ODatos.RecuperarParametro("LecturaChipDelay"))
    '        Dim EsChipLeido As Boolean = False
    '        Dim numred As Int32
    '        Dim Confirmacion As Boolean = CBool(ODatos.RecuperarParametro("ConfirmarLecturaChip"))
    '        Dim AutorizacionRemoting As Boolean = CBool(ODatos.RecuperarParametro("AutorizacionRemota"))

    '        numred = RecuperarRedLector(Lector)
    '        Try
    '            While blnReintentar
    '                Try
    '                    If Not EsGasolina Then
    '                        Try
    '                            If CBool(ODatos.RecuperarParametro("Suic")) Then
    '                                EsTwoFish = False
    '                                EsServipunto = True

    '                                LogCategorias.Clear()
    '                                LogCategorias.Agregar("Ibutton")
    '                                LogPropiedades.Clear()
    '                                LogPropiedades.Agregar("Cara", cara.ToString)
    '                                gasolutions.Fabrica.LogIt.Loguear("Intenta leer por primera vez Suic", LogPropiedades, LogCategorias)

    '                                'Pone el lector en la cola de autorizacion
    '                                LogCategorias.Clear()
    '                                LogCategorias.Agregar("IbuttonCola")
    '                                LogPropiedades.Clear()
    '                                LogPropiedades.Agregar("Lector", Lector)
    '                                LogPropiedades.Agregar("Cara", cara.ToString)
    '                                LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
    '                                gasolutions.Fabrica.LogIt.Loguear("Encolo un nuevo lector", LogPropiedades, LogCategorias)

    '                                ColasLectores(numred.ToString).colLecturasPendientes.Enqueue(Lector)

    '                                Datos = RecuperarDatosBoton(Lector, Delay)

    '                                Try
    '                                    'Retorna la informacion luego de la desencripcion
    '                                    LogCategorias.Clear()
    '                                    LogCategorias.Agregar("Ibutton")
    '                                    LogPropiedades.Clear()
    '                                    LogPropiedades.Agregar("Cara", cara.ToString)
    '                                    gasolutions.Fabrica.LogIt.Loguear("Desencripta la informacion por primera vez Suic", LogPropiedades, LogCategorias)

    '                                    oInformacion = RecuperarInformacion(Datos)
    '                                Catch
    '                                    Throw
    '                                End Try

    '                                If Confirmacion Then
    '                                    LogCategorias.Clear()
    '                                    LogCategorias.Agregar("IbuttonCola")
    '                                    LogPropiedades.Clear()
    '                                    LogPropiedades.Agregar("Lector", Lector)
    '                                    LogPropiedades.Agregar("Cara", cara.ToString)
    '                                    LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
    '                                    gasolutions.Fabrica.LogIt.Loguear("Encolo un nuevo lector", LogPropiedades, LogCategorias)

    '                                    ColasLectores(numred.ToString).colLecturasPendientes.Enqueue(Lector)

    '                                    LogCategorias.Clear()
    '                                    LogCategorias.Agregar("Ibutton")
    '                                    LogPropiedades.Clear()
    '                                    LogPropiedades.Agregar("Cara", cara.ToString)
    '                                    gasolutions.Fabrica.LogIt.Loguear("Intenta leer por segunda vez Suic", LogPropiedades, LogCategorias)

    '                                    DatosConfirmacion = RecuperarDatosBoton(Lector, Delay)

    '                                    Try
    '                                        LogCategorias.Clear()
    '                                        LogCategorias.Agregar("Ibutton")
    '                                        LogPropiedades.Clear()
    '                                        LogPropiedades.Agregar("Cara", cara.ToString)
    '                                        gasolutions.Fabrica.LogIt.Loguear("Desencripta la informacion por segunda vez Suic", LogPropiedades, LogCategorias)

    '                                        oInformacionConfirmacion = RecuperarInformacion(DatosConfirmacion)
    '                                    Catch
    '                                        Throw
    '                                    End Try
    '                                End If
    '                                EsChipLeido = True
    '                            Else
    '                                Throw New POSstation.Tmex.TmexVersionException
    '                            End If
    '                        Catch ex As POSstation.Tmex.TmexVersionException
    '                            LogCategorias.Clear()
    '                            LogCategorias.Agregar("Ibutton")
    '                            LogPropiedades.Clear()
    '                            LogPropiedades.Agregar("Cara", cara.ToString)
    '                            gasolutions.Fabrica.LogIt.Loguear("El chip no está en formato Servipunto", LogPropiedades, LogCategorias)

    '                            If CBool(ODatos.RecuperarParametro("TwoFish")) Then
    '                                EsTwoFish = True
    '                                EsServipunto = False

    '                                LogCategorias.Clear()
    '                                LogCategorias.Agregar("IbuttonCola")
    '                                LogPropiedades.Clear()
    '                                LogPropiedades.Agregar("Lector", Lector)
    '                                LogPropiedades.Agregar("Cara", cara.ToString)
    '                                LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
    '                                gasolutions.Fabrica.LogIt.Loguear("Encolo un nuevo lector", LogPropiedades, LogCategorias)

    '                                ColasLectores(numred.ToString).colLecturasPendientes.Enqueue(Lector)

    '                                LogCategorias.Clear()
    '                                LogCategorias.Agregar("Ibutton")
    '                                LogPropiedades.Clear()
    '                                LogPropiedades.Agregar("Cara", cara.ToString)
    '                                gasolutions.Fabrica.LogIt.Loguear("Intenta leer por primera vez TwoFish", LogPropiedades, LogCategorias)

    '                                oInformacion = RecuperarDatosBotonSuic(Lector, Delay)

    '                                If Confirmacion Then
    '                                    LogCategorias.Clear()
    '                                    LogCategorias.Agregar("Ibutton")
    '                                    LogPropiedades.Clear()
    '                                    LogPropiedades.Agregar("Cara", cara.ToString)
    '                                    gasolutions.Fabrica.LogIt.Loguear("Intenta leer por segunda vez TwoFish", LogPropiedades, LogCategorias)

    '                                    LogCategorias.Clear()
    '                                    LogCategorias.Agregar("IbuttonCola")
    '                                    LogPropiedades.Clear()
    '                                    LogPropiedades.Agregar("Lector", Lector)
    '                                    LogPropiedades.Agregar("Cara", cara.ToString)
    '                                    LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
    '                                    gasolutions.Fabrica.LogIt.Loguear("Encolo un nuevo lector", LogPropiedades, LogCategorias)

    '                                    ColasLectores(numred.ToString).colLecturasPendientes.Enqueue(Lector)
    '                                    oInformacionConfirmacion = RecuperarDatosBotonSuic(Lector, Delay)
    '                                End If
    '                                EsChipLeido = True
    '                            End If
    '                        End Try
    '                    Else
    '                        LogCategorias.Clear()
    '                        LogCategorias.Agregar("IbuttonCola")
    '                        LogPropiedades.Clear()
    '                        LogPropiedades.Agregar("Lector", Lector)
    '                        LogPropiedades.Agregar("Cara", cara.ToString)
    '                        LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
    '                        gasolutions.Fabrica.LogIt.Loguear("Encolo un nuevo lector", LogPropiedades, LogCategorias)

    '                        ColasLectores(numred.ToString).colLecturasPendientes.Enqueue(Lector)

    '                        LogCategorias.Clear()
    '                        LogCategorias.Agregar("Ibutton")
    '                        LogPropiedades.Clear()
    '                        LogPropiedades.Agregar("Cara", cara.ToString)
    '                        gasolutions.Fabrica.LogIt.Loguear("Intenta leer por primera vez Gasolina", LogPropiedades, LogCategorias)

    '                        oInformacion = RecuperarDatosBotonGasolina(Lector, Delay)


    '                        'Como no hago confirmación con el rom igualo la variable
    '                        oInformacionConfirmacion = oInformacion

    '                        EsChipLeido = True
    '                    End If

    '                    Try
    '                        If Not EsChipLeido Then
    '                            LogCategorias.Clear()
    '                            LogCategorias.Agregar("Ibutton")
    '                            LogPropiedades.Clear()
    '                            LogPropiedades.Agregar("Cara", cara.ToString)
    '                            gasolutions.Fabrica.LogIt.Loguear("El chip no se encuentra en formato conocido", LogPropiedades, LogCategorias)

    '                            iIntentos = CShort(NumeroIntentos + 1)
    '                            Throw New GasolutionsException("El chip no se encuentra en formato conocido")
    '                        Else
    '                            If Confirmacion Then
    '                                While oInformacion.Placa <> oInformacionConfirmacion.Placa
    '                                    LogCategorias.Clear()
    '                                    LogCategorias.Agregar("Ibutton")
    '                                    LogPropiedades.Clear()
    '                                    LogPropiedades.Agregar("Cara", cara.ToString)
    '                                    gasolutions.Fabrica.LogIt.Loguear("Las Placas no coinciden", LogPropiedades, LogCategorias)

    '                                    If iReintentosConfirmacion > 9 Then
    '                                        LogCategorias.Clear()
    '                                        LogCategorias.Agregar("Ibutton")
    '                                        LogPropiedades.Clear()
    '                                        LogPropiedades.Agregar("Cara", cara.ToString)
    '                                        gasolutions.Fabrica.LogIt.Loguear("Lectura De Chip Inestable", LogPropiedades, LogCategorias)

    '                                        Throw New GasolutionsException("Lectura De Chip Inestable")
    '                                    Else
    '                                        If EsServipunto Then
    '                                            LogCategorias.Clear()
    '                                            LogCategorias.Agregar("Ibutton")
    '                                            LogPropiedades.Clear()
    '                                            LogPropiedades.Agregar("Cara", cara.ToString)
    '                                            gasolutions.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) leer por primera vez Suic ", iReintentosConfirmacion), LogPropiedades, LogCategorias)

    '                                            Datos = RecuperarDatosBoton(Lector, Delay)

    '                                            LogCategorias.Clear()
    '                                            LogCategorias.Agregar("Ibutton")
    '                                            LogPropiedades.Clear()
    '                                            LogPropiedades.Agregar("Cara", cara.ToString)
    '                                            gasolutions.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) desencriptar por primera vez Suic ", iReintentosConfirmacion), LogPropiedades, LogCategorias)

    '                                            oInformacion = RecuperarInformacion(Datos)

    '                                            LogCategorias.Clear()
    '                                            LogCategorias.Agregar("Ibutton")
    '                                            LogPropiedades.Clear()
    '                                            LogPropiedades.Agregar("Cara", cara.ToString)
    '                                            gasolutions.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) leer por segunda vez Suic ", iReintentosConfirmacion), LogPropiedades, LogCategorias)

    '                                            DatosConfirmacion = RecuperarDatosBoton(Lector, Delay)

    '                                            LogCategorias.Clear()
    '                                            LogCategorias.Agregar("Ibutton")
    '                                            LogPropiedades.Clear()
    '                                            LogPropiedades.Agregar("Cara", cara.ToString)
    '                                            gasolutions.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) desencriptar por segunda vez Suic ", iReintentosConfirmacion), LogPropiedades, LogCategorias)

    '                                            oInformacionConfirmacion = RecuperarInformacion(Datos)
    '                                        ElseIf EsTwoFish Then
    '                                            LogCategorias.Clear()
    '                                            LogCategorias.Agregar("Ibutton")
    '                                            LogPropiedades.Clear()
    '                                            LogPropiedades.Agregar("Cara", cara.ToString)
    '                                            gasolutions.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) leer por primera vez TwoFish ", iReintentosConfirmacion), LogPropiedades, LogCategorias)

    '                                            oInformacion = RecuperarDatosBotonSuic(Lector, Delay)

    '                                            LogCategorias.Clear()
    '                                            LogCategorias.Agregar("Ibutton")
    '                                            LogPropiedades.Clear()
    '                                            LogPropiedades.Agregar("Cara", cara.ToString)
    '                                            gasolutions.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) leer por segunda vez TwoFish ", iReintentosConfirmacion), LogPropiedades, LogCategorias)

    '                                            oInformacionConfirmacion = RecuperarDatosBotonSuic(Lector, Delay)
    '                                        End If 
    '                                    End If
    '                                End While
    '                            End If
    '                        End If
    '                    Catch Ex As System.Exception
    '                        LogCategorias.Clear()
    '                        LogCategorias.Agregar("Ibutton")
    '                        LogPropiedades.Clear()
    '                        LogPropiedades.Agregar("Cara", cara.ToString)
    '                        LogPropiedades.Agregar("Mensaje", Ex.Message)
    '                        gasolutions.Fabrica.LogIt.Loguear("Error recuperando informacion", LogPropiedades, LogCategorias)

    '                        Throw New GasolutionsException("Error recuperando informacion: " & Ex.Message)
    '                    End Try

    '                    blnReintentar = False
    '                Catch Ex As System.Exception

    '                    LogFallas.ReportarError(Ex, "EsAutorizado", "Cara: " & cara, "Ibutton")

    '                    iIntentos = CShort(iIntentos + 1)

    '                    System.Threading.Thread.Sleep(Delay)

    '                    If iIntentos > NumeroIntentos Then
    '                        Throw New GasolutionsException("Error leyendo chip: " & Ex.Message)
    '                    End If
    '                End Try
    '            End While
    '        Catch
    '            Throw
    '        End Try

    '        Try
    '            Dim OInfoVehiculos As InformacionVehiculo
    '            If tipoValidacion = ETipoValidacion.BaseDatos Then
    '                If ODatos.ExisteVehiculo(oInformacion.Placa) Then
    '                    OInfoVehiculos = ESAutorizadoBase(oInformacion, Datos)

    '                    If OInfoVehiculos.Autorizado Then
    '                        Return OInfoVehiculos
    '                    Else
    '                        If AutorizacionRemoting = True And Not EsGasolina Then
    '                            OInfoVehiculos = ESAutorizadoCDC(oInformacion, Datos)
    '                            Return OInfoVehiculos
    '                        Else
    '                            Throw New GasolutionsException("Error Validando vehiculo en la Base de Datos")
    '                        End If
    '                    End If
    '                Else
    '                    If AutorizacionRemoting = True And Not EsGasolina Then
    '                        OInfoVehiculos = ESAutorizadoCDC(oInformacion, Datos)
    '                        Return OInfoVehiculos
    '                    Else
    '                        Throw New GasolutionsException("Error Validando vehiculo en la Base de Datos")
    '                    End If
    '                End If
    '            ElseIf tipoValidacion = ETipoValidacion.Chip Then
    '                OInfoVehiculos = ESAutorizadoChip(oInformacion)
    '                If OInfoVehiculos.Autorizado = True Then
    '                    Return OInfoVehiculos
    '                Else
    '                    Throw New GasolutionsException(OInfoVehiculos.CausaNegacion)
    '                End If

    '            ElseIf tipoValidacion = ETipoValidacion.Ambas Then
    '                OInfoVehiculos = ESAutorizadoChip(oInformacion)
    '                If OInfoVehiculos.Autorizado = True Then
    '                    Return OInfoVehiculos
    '                Else
    '                    If ODatos.ExisteVehiculo(oInformacion.Placa) Then
    '                        OInfoVehiculos = ESAutorizadoBase(oInformacion, Datos)
    '                        If OInfoVehiculos.Autorizado Then
    '                            Return OInfoVehiculos
    '                        Else
    '                            If AutorizacionRemoting = True And Not EsGasolina Then
    '                                OInfoVehiculos = ESAutorizadoCDC(oInformacion, Datos)
    '                                Return OInfoVehiculos
    '                            Else
    '                                Throw New GasolutionsException("Error Validando vehiculo en la Base de Datos")
    '                            End If
    '                        End If
    '                    Else
    '                        If AutorizacionRemoting = True And Not EsGasolina Then
    '                            OInfoVehiculos = ESAutorizadoCDC(oInformacion, Datos)
    '                            Return OInfoVehiculos
    '                        Else
    '                            Throw New GasolutionsException("Error Validando vehiculo en la Base de Datos")
    '                        End If
    '                    End If
    '                End If
    '            End If
    '        Catch ex As System.Exception
    '            Throw 
    '        End Try
    '    Catch Ex As System.Exception
    '        LogFallas.ReportarError(Ex, "ESAutorizador", "-", "ProcesoAutorizacion")
    '        Throw New GasolutionsException("Error Validando vehiculo: " & Ex.Message)
    '    End Try
    'End Function

    Public Function RecuperarLectorPorCara(ByVal cara As Byte) As String
        Try
            Return ODatos.RecuperarLectorPorCara(cara)
        Catch
            Throw
        End Try
    End Function


    Public Function InsertarVentaGazel(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal presionLLenado As Decimal, ByVal descuentoPromocionalCliente As Decimal, ByVal esPorcentualPromocionCliente As Boolean, ByVal idDescuentoPromocionalCliente As Nullable(Of Int32), ByVal EsVentaFidelizada As Boolean) As Int64
        Try
            Return ODatos.InsertarVentaGazel(cara, lecturaFinal, precio, CDec(cantidad), CDec(valor), producto, GUIDVenta, presionLLenado, descuentoPromocionalCliente, esPorcentualPromocionCliente, idDescuentoPromocionalCliente, EsVentaFidelizada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGazel", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & "Presion LLenado: " & presionLLenado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGazel", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & "Presion LLenado: " & presionLLenado, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    'Public Function InsertarVenta(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal cantidad As Decimal, ByVal valor As Decimal, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal manguera As Integer, ByVal kilometraje As String, Optional ByVal EsPagoConBono As Boolean = False) As Int64
    '    Try
    '        Return ODatos.InsertarVenta(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, manguera, kilometraje, EsPagoConBono)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "InsertarVenta2", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "InsertarVenta2", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Function

    Public Function InsertarVenta(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal cantidad As Decimal, ByVal valor As Decimal, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal manguera As Integer, ByVal kilometraje As String, ByVal documento As String, ByVal documentoAux As String, ByVal TipoIdentificacion As Integer, ByVal idFormaPago As Short, ByVal Nivel As String, ByVal placaSegundaria As String, Optional ByVal EsPagoConBono As Boolean = False) As Int64
        Try
            Return ODatos.InsertarVenta(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, manguera, kilometraje, documento, documentoAux, TipoIdentificacion, idFormaPago, Nivel, placaSegundaria, EsPagoConBono)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaFSColombia", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & ", documento: " & documento & ", documentoAux: " & documentoAux & ", TipoIdentificacion:" & TipoIdentificacion & ", idFormaPago: " & idFormaPago & ", Nivel: " & Nivel & ", placaSegundaria: " & placaSegundaria, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaFSColombia", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & ", documento: " & documento & ", documentoAux: " & documentoAux & ", TipoIdentificacion:" & TipoIdentificacion & ", idFormaPago: " & idFormaPago & ", Nivel: " & Nivel & ", placaSegundaria: " & placaSegundaria, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function InsertarVentaReintentoSauce(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal cantidad As Decimal, ByVal valor As Decimal, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal manguera As Integer, ByVal kilometraje As String, ByVal documento As String, ByVal documentoAux As String, ByVal TipoIdentificacion As Integer, ByVal idFormaPago As Short, Optional ByVal EsPagoConBono As Boolean = False) As Int64
        Try
            Return ODatos.InsertarVentaReintentoSauce(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, manguera, kilometraje, documento, documentoAux, TipoIdentificacion, idFormaPago, EsPagoConBono)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaFSColombia", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & ", documento: " & documento & ", documentoAux: " & documentoAux & ", TipoIdentificacion:" & TipoIdentificacion & ", idFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaFSColombia", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & ", documento: " & documento & ", documentoAux: " & documentoAux & ", TipoIdentificacion:" & TipoIdentificacion & ", idFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function InsertarVentaFullstation(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal cantidad As Decimal, ByVal valor As Decimal, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal manguera As Integer, ByVal kilometraje As String, ByVal idFormaPagoP As Int16, ByVal autorizacion As String) As Int64
        Try
            Return ODatos.InsertarVentaFullstation(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, manguera, kilometraje, idFormaPagoP, autorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaFullstation", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaFullstation", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaGT(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal cantidad As Decimal, ByVal valor As Decimal, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal presionLLenado As Decimal, ByVal manguera As Integer, ByVal lecturaInicialSurtidor As Decimal, ByVal IdEstacion As Integer) As Int64
        Try
            Return ODatos.InsertarVentaGT(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, presionLLenado, manguera, lecturaInicialSurtidor, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVenta", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , PresionLlenado: " & presionLLenado & " , Manguera: " & manguera & " , LI. Surtidor: " & lecturaInicialSurtidor & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVenta", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , PresionLlenado: " & presionLLenado & " , Manguera: " & manguera & " , LI. Surtidor: " & lecturaInicialSurtidor & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function InsertarVentaGT(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal cantidad As Decimal, ByVal valor As Decimal, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal presionLLenado As Decimal, ByVal manguera As Integer, ByVal lecturaInicialSurtidor As Decimal) As Int64
        Try
            Return ODatos.InsertarVentaGT(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, presionLLenado, manguera, lecturaInicialSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVenta", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , PresionLlenado: " & presionLLenado & " , Manguera: " & manguera & " , LI. Surtidor: " & lecturaInicialSurtidor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVenta", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , PresionLlenado: " & presionLLenado & " , Manguera: " & manguera & " , LI. Surtidor: " & lecturaInicialSurtidor, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function InsertarVentaReintento(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal idFormaPagoP As Int16, ByVal autorizacion As String, ByVal presionLLenado As Decimal, ByVal descuentoPromocionalCliente As Decimal, ByVal esPorcentualPromocionCliente As Boolean, ByVal idDescuentoPromocionalCliente As Nullable(Of Int32), ByVal EsVentaFidelizada As Boolean) As Int64
        Try
            Return ODatos.InsertarVentaReintento(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, idFormaPagoP, autorizacion, presionLLenado, descuentoPromocionalCliente, esPorcentualPromocionCliente, idDescuentoPromocionalCliente, EsVentaFidelizada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintento", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , FormaPagoP: " & idFormaPagoP & ", Autorizacion: " & autorizacion & "Presion LLenado: " & presionLLenado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintento", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , FormaPagoP: " & idFormaPagoP & ", Autorizacion: " & autorizacion & "Presion LLenado: " & presionLLenado, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaReintentoGazel(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal presionLLenado As Decimal, ByVal descuentoPromocionalCliente As Decimal, ByVal esPorcentualPromocionCliente As Boolean, ByVal idDescuentoPromocionalCliente As Nullable(Of Int32), ByVal EsVentaFidelizada As Boolean) As Int64
        Try
            Return ODatos.InsertarVentaReintentoGazel(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, presionLLenado, descuentoPromocionalCliente, esPorcentualPromocionCliente, idDescuentoPromocionalCliente, EsVentaFidelizada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintentoGazel", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & "Presion LLenado: " & presionLLenado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintentoGazel", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & "Presion LLenado: " & presionLLenado, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaReintentoGT(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal cantidad As Decimal, ByVal valor As Decimal, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal presionLLenado As Decimal, ByVal manguera As Integer, ByVal lecturaInicialSurtidor As Decimal) As Int64
        Try
            Return ODatos.InsertarVentaReintentoGT(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, presionLLenado, manguera, lecturaInicialSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintento", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , PresionLlenado: " & presionLLenado & " , Manguera: " & manguera & " , LI. Surtidor: " & lecturaInicialSurtidor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintento", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , PresionLlenado: " & presionLLenado & " , Manguera: " & manguera & " , LI. Surtidor: " & lecturaInicialSurtidor, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function InsertarVentaReintentoGT(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal cantidad As Decimal, ByVal valor As Decimal, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal presionLLenado As Decimal, ByVal manguera As Integer, ByVal lecturaInicialSurtidor As Decimal, ByVal IdEstacion As Integer) As Int64
        Try
            Return ODatos.InsertarVentaReintentoGT(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, presionLLenado, manguera, lecturaInicialSurtidor, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintento", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , PresionLlenado: " & presionLLenado & " , Manguera: " & manguera & " , LI. Surtidor: " & lecturaInicialSurtidor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintento", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , PresionLlenado: " & presionLLenado & " , Manguera: " & manguera & " , LI. Surtidor: " & lecturaInicialSurtidor, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Sub InsertarVentaGasStation(ByVal Recibo As Int64, ByVal Fecha As DateTime, ByVal HoraInicio As DateTime, ByVal HoraFin As DateTime, ByVal Placa As String, ByVal Precio As Int32, ByVal Cantidad As Decimal, ByVal Valor As Decimal, ByVal AbonoCredito As Decimal, ByVal Descuento As Decimal, ByVal ProximoMantimiento As DateTime, ByVal Apertura As DateTime, ByVal NumeroTurno As Int16, ByVal NombreEmpleado As String, ByVal NombreProducto As String, ByVal Cara As String, ByVal Surtidor As String, ByVal DocumentoCliente As String, ByVal NombreCliente As String, ByVal NumeroTarjetaFidelizada As String, ByVal IdTurno As Int32, ByVal IdManguera As Int16)
        Try
            ODatos.InsertarVentaGasStation(Recibo, Fecha, HoraInicio, HoraFin, Placa, Precio, Cantidad, Valor, AbonoCredito, Descuento, ProximoMantimiento, Apertura, NumeroTurno, NombreEmpleado, NombreProducto, Cara, Surtidor, DocumentoCliente, NombreCliente, NumeroTarjetaFidelizada, IdTurno, IdManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGasStation", "recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGasStation", "recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVentaGasStation(ByVal Recibo As Int64, ByVal Fecha As DateTime, ByVal HoraInicio As DateTime, ByVal HoraFin As DateTime, ByVal Placa As String, ByVal Precio As Int32, ByVal Cantidad As Decimal, ByVal Valor As Decimal, ByVal AbonoCredito As Decimal, ByVal Descuento As Decimal, ByVal ProximoMantimiento As DateTime, ByVal Apertura As DateTime, ByVal NumeroTurno As Int16, ByVal NombreEmpleado As String, ByVal NombreProducto As String, ByVal Cara As String, ByVal Surtidor As String, ByVal DocumentoCliente As String, ByVal NombreCliente As String, ByVal NumeroTarjetaFidelizada As String, ByVal IdTurno As Int32, ByVal IdManguera As Int16, ByVal LecturaInicial As Decimal, ByVal LecturaFinal As Decimal, ByVal RUC As String, ByVal NumeroDocumento As String, ByVal Numero As String, ByVal SerialImpresora As String, ByVal Serie As String, ByVal Igv As Decimal, ByVal BaseImponible As Decimal, ByVal Estado As String, ByVal IdDocumento As Int64, ByVal Impresora As String, ByVal RazonSocial As String, ByVal TipoDocumento As String)
        Try
            ODatos.InsertarVentaGasStation(Recibo, Fecha, HoraInicio, HoraFin, Placa, Precio, Cantidad, Valor, AbonoCredito, Descuento, ProximoMantimiento, Apertura, NumeroTurno, NombreEmpleado, NombreProducto, Cara, Surtidor, DocumentoCliente, NombreCliente, NumeroTarjetaFidelizada, IdTurno, IdManguera, LecturaInicial, LecturaFinal, RUC, NumeroDocumento, Numero, SerialImpresora, Serie, Igv, BaseImponible, Estado, IdDocumento, Impresora, RazonSocial, TipoDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGasStation", "recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGasStation", "recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarImagenesVentas(Optional ByVal idEstacion As Int16 = 0)
        Try
            If idEstacion = 0 Then
                ODatos.InsertarImagenesVentas()
            Else
                ODatos.InsertarImagenesVentas(idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "InsertarImagenesVentas", "-", "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "InsertarImagenesVentas", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "InsertarImagenesVentas", "-", "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "InsertarImagenesVentas", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Sub


    Public Sub InsertarVentaFormaPagoTmpChile(ByVal recibo As Int64, ByVal idFormaPago As Int16, ByVal valor As Double, ByVal documento As String, ByVal tipoLectura As Nullable(Of Int32), ByVal nroConfirmacion As String, ByVal MontoMedioPago As Double, ByVal borrarTemporal As Boolean, ByVal NumAutorizacionCheque As Nullable(Of Long), ByVal Placa As String, ByVal NumeroCheque As String, ByVal NumeroValidacion As String, ByVal RUT As String)
        Try
            ODatos.InsertarVentaFormaPagoTmp(recibo, idFormaPago, valor, documento, tipoLectura, nroConfirmacion, MontoMedioPago, borrarTemporal, NumAutorizacionCheque, Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaFormaPagoTmp", "recibo: " & recibo & " , valor: " & valor & " , documento: " & documento & " , nroConfirmacion: " & nroConfirmacion & " Monto: " & MontoMedioPago.ToString & " , borrarTemporal: " & borrarTemporal & ", Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaFormaPagoTmp", "recibo: " & recibo & " , valor: " & valor & " , documento: " & documento & " , nroConfirmacion: " & nroConfirmacion & " Monto: " & MontoMedioPago.ToString & " , borrarTemporal: " & borrarTemporal & ", Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub InsertarVentaFormaPagoTmp(ByVal recibo As Int64, ByVal idFormaPago As Int16, ByVal valor As Double, ByVal documento As String, ByVal tipoLectura As Nullable(Of Int32), ByVal nroConfirmacion As String, ByVal MontoMedioPago As Double, ByVal borrarTemporal As Boolean, ByVal NumAutorizacionCheque As Nullable(Of Long), ByVal Placa As String)
        Try
            ODatos.InsertarVentaFormaPagoTmp(recibo, idFormaPago, valor, documento, tipoLectura, nroConfirmacion, MontoMedioPago, borrarTemporal, NumAutorizacionCheque, Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaFormaPagoTmp", "recibo: " & recibo & " , valor: " & valor & " , documento: " & documento & " , nroConfirmacion: " & nroConfirmacion & " Monto: " & MontoMedioPago.ToString & " , borrarTemporal: " & borrarTemporal & ", Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaFormaPagoTmp", "recibo: " & recibo & " , valor: " & valor & " , documento: " & documento & " , nroConfirmacion: " & nroConfirmacion & " Monto: " & MontoMedioPago.ToString & " , borrarTemporal: " & borrarTemporal & ", Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVentaFormaPagoCanastillaTmp(ByVal recibo As Int64, ByVal idFormaPago As Int16, ByVal valor As Double, ByVal referencia As String, ByVal borrarTemporal As Boolean)
        Try
            ODatos.InsertarVentaFormaPagoCanastillaTmp(recibo, idFormaPago, valor, referencia, borrarTemporal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaFormaPagoTmp", "recibo: " & recibo & " , idFormaPago: " & idFormaPago & " , valor: " & valor & " , referencia: " & referencia & " , borrarTemporal: " & borrarTemporal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaFormaPagoTmp", "recibo: " & recibo & " , idFormaPago: " & idFormaPago & " , valor: " & valor & " , referencia: " & referencia & " , borrarTemporal: " & borrarTemporal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarVentaPeru(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal producto As Int32, ByVal idFormaPago As Short) As Int64
        Try
            Return ODatos.InsertarVentaPeru(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, producto, idFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaPeru(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal nroVale As String, ByVal montoValePromocional As Decimal, ByVal nombrePromocion As String) As Int64
        Try
            Return ODatos.InsertarVentaPeru(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, producto, idFormaPago, nroVale, montoValePromocional, nombrePromocion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaPeru(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal EsPagoConBono As Boolean) As Int64
        Try
            Return ODatos.InsertarVentaPeru(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, producto, idFormaPago, EsPagoConBono)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    'Public Function InsertarVentaPeruFullstation(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer) As Int64
    '    Try
    '        Return ODatos.InsertarVentaPeruFullStation(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Function


    'Public Function InsertarVentaPeruFullstation(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As Integer) As Int64
    '    Try
    '        Return ODatos.InsertarVentaPeruFullStation(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Function


    Public Function RecuperarPlacaAutorizacionCodigoCredito(ByVal Autorizacion As Integer) As String
        Try
            Return ODatos.RecuperarPlacaAutorizacionCodigoCredito(Autorizacion)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaAutorizacionCodigoCredito", "Autorizacion: " & Autorizacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    'Public Function InsertarVentaPeruFullstation(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As Integer, ByVal CodigoAutorizacion As Nullable(Of Integer)) As Int64
    '    Try
    '        Return ODatos.InsertarVentaPeruFullStation(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje, CodigoAutorizacion)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Function
    Public Function InsertarVentaChileFullStation(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As String, ByVal CodigoAutorizacion As Nullable(Of Integer), ByVal RUTConductor As String, ByVal ConsumoMes As Double, NumeroContrato As String, TarjetaPrepago As String, FechaContratoPrepago As DateTime, KilometrajeCDC As String, EsPrepago As Boolean, Saldo As Decimal) As Int64
        Try
            Return ODatos.InsertarVentaChileFullStation(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje, CodigoAutorizacion, RUTConductor, ConsumoMes, NumeroContrato, TarjetaPrepago, FechaContratoPrepago, KilometrajeCDC, EsPrepago, Saldo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaChile", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "RUTConductor: " & RUTConductor & "ConsumoMes: " & ConsumoMes & "NumeroContrato: " & NumeroContrato & "TarjetaPrepago: " & TarjetaPrepago & "FechaContratoPrepago: " & FechaContratoPrepago.ToString & "KilometrajeCDC: " & KilometrajeCDC & "EsPrepago: " & EsPrepago & "Saldo: " & Saldo.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaChile", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "RUTConductor: " & RUTConductor & "ConsumoMes: " & ConsumoMes & "NumeroContrato: " & NumeroContrato & "TarjetaPrepago: " & TarjetaPrepago & "FechaContratoPrepago: " & FechaContratoPrepago.ToString & "KilometrajeCDC: " & KilometrajeCDC & "EsPrepago: " & EsPrepago & "Saldo: " & Saldo.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarVentaPeruFullstation(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As String, ByVal CodigoAutorizacion As Nullable(Of Integer), ByVal NroConfirmacion As String, ByVal RucDescuento As String) As Int64
        Try
            Return ODatos.InsertarVentaPeruFullStation(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje, CodigoAutorizacion, NroConfirmacion, RucDescuento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "NroConfirmacion: " & NroConfirmacion & "RucDescuento: " & RucDescuento & " Kilometraje: " & Kilometraje, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "NroConfirmacion: " & NroConfirmacion & "RucDescuento: " & RucDescuento & " Kilometraje: " & Kilometraje, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaReintentoPeruFullstation(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As Integer, ByVal CodigoAutorizacion As Nullable(Of Integer), ByVal NroConfirmacion As String, ByVal RucDescuento As String) As Int64
        Try
            Return ODatos.InsertarVentaReintentoFullStation(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje, CodigoAutorizacion, NroConfirmacion, RucDescuento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "NroConfirmacion: " & NroConfirmacion & "RucDescuento: " & RucDescuento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "NroConfirmacion: " & NroConfirmacion & "RucDescuento: " & RucDescuento, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    'Public Function InsertarVentaPeruFullstationBolivia(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As Integer, ByVal CodigoAutorizacion As Nullable(Of Integer), ByVal NombreCliente As String, ByVal Pais As String, ByVal Autorizacion As String, ByVal NumeroPlaca As String) As Int64
    '    Try
    '        Return ODatos.InsertarVentaPeruFullstationBolivia(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje, CodigoAutorizacion, NombreCliente, Pais, Autorizacion, NumeroPlaca)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Function


    Public Function InsertarVentaPeruFullstationBolivia(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As Integer, ByVal CodigoAutorizacion As Nullable(Of Integer), ByVal NombreCliente As String, ByVal Pais As String, ByVal Autorizacion As String, ByVal NumeroPlaca As String, ByVal TipoEnvase As Integer, ByVal NumeroVale As String, ByVal numeroFactura As String, ByVal DUI As String, TAG As String) As Int64
        Try
            Return ODatos.InsertarVentaPeruFullstationBolivia(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje, CodigoAutorizacion, NombreCliente, Pais, Autorizacion, NumeroPlaca, TipoEnvase, NumeroVale, numeroFactura, DUI, TAG)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString & "Numero Vale: " & NumeroVale & " , Numero Factura :" & numeroFactura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString & "Numero Vale: " & NumeroVale & " , NumeroFactura: " & numeroFactura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaPeruFullstationBolivia(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As Integer, ByVal CodigoAutorizacion As Nullable(Of Integer), ByVal NombreCliente As String, ByVal Pais As String, ByVal Autorizacion As String, ByVal NumeroPlaca As String, ByVal TipoEnvase As Integer, ByVal NumeroVale As String, ByVal numeroFactura As String, ByVal DUI As String, TAG As String, ByVal idempleado As String, ByVal tagRFID As String) As Int64
        Try
            Return ODatos.InsertarVentaPeruFullstationBolivia(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje, CodigoAutorizacion, NombreCliente, Pais, Autorizacion, NumeroPlaca, TipoEnvase, NumeroVale, numeroFactura, DUI, TAG, idempleado, tagRFID)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString & "Numero Vale: " & NumeroVale & " , Numero Factura :" & numeroFactura & " , tag RFID :" & tagRFID, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString & "Numero Vale: " & NumeroVale & " , NumeroFactura: " & numeroFactura & " , tag RFID :" & tagRFID, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaReintentoFSBolivia(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As Integer, ByVal CodigoAutorizacion As Nullable(Of Integer), ByVal NombreCliente As String, ByVal Pais As String, ByVal Autorizacion As String, ByVal NumeroPlaca As String, ByVal TipoEnvase As Integer, ByVal NumeroVale As String, ByVal numeroFactura As String, Tag As String) As Int64
        Try
            Return ODatos.InsertarVentaReintentoFSBolivia(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje, CodigoAutorizacion, NombreCliente, Pais, Autorizacion, NumeroPlaca, TipoEnvase, NumeroVale, numeroFactura, Tag)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintentoFSBolivia", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString & "Numero Vale: " & NumeroVale & " , Numero Factura :" & numeroFactura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintentoFSBolivia", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString & "Numero Vale: " & NumeroVale & " , NumeroFactura: " & numeroFactura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaReintentoFSBolivia(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal documentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer, ByVal LecturaInicial As Decimal, ByVal EsPagoConBono As Boolean, ByVal IdFranquicia As Integer, ByVal Kilometraje As Integer, ByVal CodigoAutorizacion As Nullable(Of Integer), ByVal NombreCliente As String, ByVal Pais As String, ByVal Autorizacion As String, ByVal NumeroPlaca As String, ByVal TipoEnvase As Integer, ByVal NumeroVale As String, ByVal numeroFactura As String, Tag As String, ByVal idempleado As String, ByVal tagRFID As String) As Int64
        Try
            Return ODatos.InsertarVentaReintentoFSBolivia(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, documentoAux, producto, idFormaPago, TipoIdentificacion, manguera, LecturaInicial, EsPagoConBono, IdFranquicia, Kilometraje, CodigoAutorizacion, NombreCliente, Pais, Autorizacion, NumeroPlaca, TipoEnvase, NumeroVale, numeroFactura, Tag, idempleado, tagRFID)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintentoFSBolivia", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString & "Numero Vale: " & NumeroVale & " , Numero Factura :" & numeroFactura & " , tag RFID :" & tagRFID, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintentoFSBolivia", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , DocumentoAux: " & documentoAux & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera & " , LecturaInicial: " & LecturaInicial & "IdFranquicia: " & IdFranquicia.ToString & "Kilometraje: " & Kilometraje.ToString & "Pais: " & Pais.ToString & "Autorizacion: " & Autorizacion.ToString & "NumeroPlaca: " & NumeroPlaca.ToString & "Numero Vale: " & NumeroVale & " , NumeroFactura: " & numeroFactura & " , tag RFID :" & tagRFID, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaReintentoPeru(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal producto As Int32, ByVal idFormaPago As Short) As Int64
        Try
            Return ODatos.InsertarVentaReintentoPeru(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, producto, idFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintentoPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintentoPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaReintentoPeru(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal nroVale As String, ByVal montoValePromocional As Decimal, ByVal nombrePromocion As String) As Int64
        Try
            Return ODatos.InsertarVentaReintentoPeru(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, producto, idFormaPago, nroVale, montoValePromocional, nombrePromocion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintentoPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintentoPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaReintentoPeru(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal EsPagoConBono As Boolean) As Int64
        Try
            Return ODatos.InsertarVentaReintentoPeru(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, producto, idFormaPago, EsPagoConBono)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintentoPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintentoPeru", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , Documento: " & documento & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaReintentoPeruFullStation(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal tipoDocumento As Integer, ByVal documento As String, ByVal DocumentoAux As String, ByVal producto As Int32, ByVal idFormaPago As Short, ByVal TipoIdentificacion As Integer, ByVal manguera As Integer) As Int64
        Try
            Return ODatos.InsertarVentaReintentoPeruFullStation(cara, lecturaFinal, precio, cantidad, valor, tipoDocumento, documento, producto, idFormaPago, TipoIdentificacion, manguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaReintentoPeruFullstation", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Documento: " & documento & " , DocumentoAux: " & DocumentoAux & " , Producto: " & producto & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaReintentoPeruFullstation", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Documento: " & documento & " , DocumentoAux: " & DocumentoAux & " , Producto: " & producto & " , IdFormaPago: " & idFormaPago & " , TipoIdentificacion: " & TipoIdentificacion & " , manguera: " & manguera, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaMexico(ByVal cara As Int16, ByVal lecturaFinal As Decimal, ByVal precio As String, ByVal cantidad As Double, ByVal valor As Double, ByVal producto As Int32, ByVal GUIDVenta As String, ByVal numeroTarjeta As String, ByVal ecopeso As Decimal) As Int64
        Try
            Return ODatos.InsertarVentaMexico(cara, lecturaFinal, precio, cantidad, valor, producto, GUIDVenta, numeroTarjeta, ecopeso)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaMexico", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , Numero Tarjeta: " & numeroTarjeta & " , Ecopeso: " & ecopeso, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaMexico", "cara: " & cara & " , lecturaFinal: " & lecturaFinal & " , precio: " & precio & " , cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & producto & " , GuidVenta: " & GUIDVenta & " , Numero Tarjeta: " & numeroTarjeta & " , Ecopeso: " & ecopeso, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub RecuperarEstadoVehiculo(ByVal rom As String, ByVal placa As String, ByVal EsGasolina As Boolean)
        Try
            ODatos.RecuperarEstadoVehiculo(rom, placa, EsGasolina)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstadoVehiculo", "rom: " & rom & "placa: " & placa & "EsGasolina: " & EsGasolina.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstadoVehiculo", "rom: " & rom & "placa: " & placa & "EsGasolina: " & EsGasolina.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    'Public Function ESAutorizadoBase(ByVal oInformacion As InformacionChip, ByVal datos As DS1992, ByVal EsGasolina As Boolean) As InformacionVehiculo
    '    Dim OInformacionVehiculo As New InformacionVehiculo
    '    OInformacionVehiculo.Placa = oInformacion.Placa
    '    OInformacionVehiculo.Fecha = oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
    '    OInformacionVehiculo.Rom = oInformacion.Rom
    '    OInformacionVehiculo.Contrato = oInformacion.Contrato
    '    OInformacionVehiculo.Formato = oInformacion.Formato


    '    Try
    '        ODatos.RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa, EsGasolina)
    '        OInformacionVehiculo.Autorizado = True
    '        Return OInformacionVehiculo
    '    Catch EX As SqlClient.SqlException
    '        LogFallas.ReportarError(EX, "ESAutorizadoBase", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento & ", Rom: " & oInformacion.Rom, "AutorizacionBD")
    '        OInformacionVehiculo.Autorizado = False
    '        OInformacionVehiculo.CausaNegacion = EX.Message
    '        Return OInformacionVehiculo
    '    Catch EX As System.Exception
    '        LogFallas.ReportarError(EX, "ESAutorizadoBase", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento & ", Rom: " & oInformacion.Rom, "AutorizacionBD")
    '        OInformacionVehiculo.Autorizado = False
    '        OInformacionVehiculo.CausaNegacion = EX.Message
    '        Return OInformacionVehiculo
    '    End Try
    'End Function

    'Public Function ESAutorizadoCDCIG(ByVal oInformacion As InformacionChip, ByVal datos As DS1992) As InformacionVehiculo
    '    Dim OInformacionVehiculo As New InformacionVehiculo
    '    Dim Estaciones As DataSet = ODatos.RecuperarEstaciones()
    '    Dim IdEstacion As String = ""

    '    For Each row As DataRow In Estaciones.Tables(0).Rows
    '        IdEstacion = row.Item("Codigo").ToString
    '    Next

    '    Dim Vehiculo As ServerCDCIG.CDCIGVehiculo
    '    Try
    '        Vehiculo = ServerCDCIG.AutorizadorRemoting.ESAutorizadoRemoto(oInformacion.Rom, oInformacion.Placa, IdEstacion)
    '    Catch ExCDC As System.Exception
    '        LogFallas.ReportarError(ExCDC, "ESAutorizadoCDCIG", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento & ", Rom: " & oInformacion.Rom & ", IdEstacion: " & IdEstacion, "AutorizacionBD")
    '        Throw
    '    End Try

    '    If Vehiculo.Autorizado Then
    '        OInformacionVehiculo.Placa = oInformacion.Placa
    '        OInformacionVehiculo.Fecha = oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
    '        OInformacionVehiculo.Rom = oInformacion.Rom
    '        OInformacionVehiculo.Autorizado = True
    '        OInformacionVehiculo.Formato = oInformacion.Formato
    '        Return OInformacionVehiculo
    '    Else
    '        Throw New GasolutionsException("El Vehiculo : " & oInformacion.Placa & "  No Fue Autorizado por CDC: " & Vehiculo.CausaNegacion)
    '    End If
    'End Function


    'Public Function ESAutorizadoCDC(ByVal oInformacion As InformacionChip, ByVal datos As DS1992) As InformacionVehiculo
    '    Dim CDC As String = ""
    '    Dim Respuesta As InformacionVehiculo = Nothing
    '    Try
    '        CDC = ODatos.RecuperarParametro("CDC")
    '        Select Case CDC
    '            Case "CDCIG"
    '                Respuesta = ESAutorizadoCDCIG(oInformacion, datos)
    '            Case "CDCCOFIDE"
    '                Respuesta = ESAutorizadoCDCCOFIDE(oInformacion, datos)
    '        End Select
    '        Return Respuesta
    '    Catch ex As System.Exception
    '        Throw
    '    End Try
    'End Function


    'Private Function ESAutorizadoCDCCOFIDE(ByVal oInformacion As InformacionChip, ByVal datos As DS1992) As InformacionVehiculo
    '    Dim OInformacionVehiculo As New InformacionVehiculo

    '    'Dim Vehiculo As ServerServices.ResponseAutorizacionIdentificador
    '    'Try
    '    '    Vehiculo = ServerServices.CDCServices.AutorizarIdentificadorCDCCOFIDE(oInformacion.Rom, oInformacion.Placa, oInformacion.FechaProximoMantenimiento)
    '    'Catch ExCDC As System.Exception
    '    '    LogFallas.ReportarError(ExCDC, "ESAutorizadoCDCCOFIDE", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento & ", Rom: " & oInformacion.Rom, "AutorizacionCDC")
    '    '    Throw CDC
    '    'End Try

    '    'If Vehiculo.Autorizado Then
    '    '    OInformacionVehiculo.Placa = oInformacion.Placa
    '    '    OInformacionVehiculo.Fecha = oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
    '    '    OInformacionVehiculo.Rom = oInformacion.Rom
    '    '    OInformacionVehiculo.Autorizado = True
    '    '    Return OInformacionVehiculo
    '    'Else
    '    '    Throw New GasolutionsException("El Vehiculo : " & oInformacion.Placa & "  No Fue Autorizado por CDC: " & Vehiculo.Resultado)
    '    'End If
    'End Function



    'Public Function ESAutorizadoChip(ByVal oInformacion As InformacionChip) As InformacionVehiculo
    '    Dim OInformacionVehiculo As New InformacionVehiculo
    '    OInformacionVehiculo.Placa = oInformacion.Placa
    '    OInformacionVehiculo.Fecha = oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
    '    OInformacionVehiculo.Rom = oInformacion.Rom
    '    OInformacionVehiculo.Contrato = oInformacion.Contrato
    '    OInformacionVehiculo.Formato = oInformacion.Formato

    '    If ValidarFecha(oInformacion.FechaProximoMantenimiento) Then

    '        'Verifico que el chip este activo y no hayan bloequeos
    '        Try
    '            '' ODatos.RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa)
    '            OInformacionVehiculo.Autorizado = True
    '            Return OInformacionVehiculo
    '        Catch Ex As System.Exception
    '            LogFallas.ReportarError(Ex, "ESAutorizadoChip", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento, "AutorizacionCHIP")
    '            OInformacionVehiculo.CausaNegacion = Ex.Message
    '            OInformacionVehiculo.Autorizado = False
    '            Return OInformacionVehiculo
    '        End Try
    '    Else
    '        OInformacionVehiculo.CausaNegacion = "El mantenimiento del vehiculo " & oInformacion.Placa & " se encuentra VENCIDO: " & oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
    '        OInformacionVehiculo.Autorizado = False
    '        Return OInformacionVehiculo
    '    End If
    'End Function


    'Public Function ESAutorizadoChip(ByVal oInformacion As InformacionChip, ByVal EsGalosina As Boolean) As InformacionVehiculo
    '    Dim OInformacionVehiculo As New InformacionVehiculo
    '    OInformacionVehiculo.Placa = oInformacion.Placa
    '    OInformacionVehiculo.Fecha = oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
    '    OInformacionVehiculo.Rom = oInformacion.Rom
    '    OInformacionVehiculo.Contrato = oInformacion.Contrato
    '    OInformacionVehiculo.Formato = oInformacion.Formato

    '    If ValidarFecha(oInformacion.FechaProximoMantenimiento) Then

    '        'Verifico que el chip este activo y no hayan bloequeos
    '        Try
    '            ODatos.RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa, EsGalosina)
    '            OInformacionVehiculo.Autorizado = True
    '            Return OInformacionVehiculo
    '        Catch Ex As System.Exception
    '            LogFallas.ReportarError(Ex, "ESAutorizadoChip", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento, "AutorizacionCHIP")
    '            OInformacionVehiculo.CausaNegacion = Ex.Message
    '            OInformacionVehiculo.Autorizado = False
    '            Return OInformacionVehiculo
    '        End Try
    '    Else
    '        OInformacionVehiculo.CausaNegacion = "El mantenimiento del vehiculo " & oInformacion.Placa & " se encuentra VENCIDO: " & oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
    '        OInformacionVehiculo.Autorizado = False
    '        Return OInformacionVehiculo
    '    End If
    'End Function

    Public Function RecuperarPuertoPorProtocolo(ByVal protocolo As String) As String
        Try
            Return ODatos.RecuperarPuertoPorProtocolo(protocolo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuertoPorProtocolo", "protocolo: " & protocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertoPorProtocolo", "protocolo: " & protocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPago(ByVal pago As Int32) As IDataReader
        Try
            Return ODatos.RecuperarPago(pago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPago", "pago: " & pago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPago", "pago: " & pago, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarPago(ByVal pago As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarPago(pago, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPago", "IdEstacion: " & idEstacion & "pago: " & pago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPago", "IdEstacion: " & idEstacion & "pago: " & pago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPuertosAsignados() As IDataReader
        Try
            Return ODatos.RecuperarPuertosAsignados
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuertosAsignados", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertosAsignados", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarPuertosAsignados(ByVal IdEstacion As Integer) As IDataReader
        Try
            Return ODatos.RecuperarPuertosAsignados
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuertosAsignados", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertosAsignados", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCantidadCaras(Optional ByVal idEstacion As Int16 = 0) As Int16
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarCantidadCaras
            Else
                Return ODatos.RecuperarCantidadCaras(idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarCantidadCaras", "-", "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarCantidadCaras", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarCantidadCaras", "-", "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarCantidadCaras", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function


    Public Function RecuperarEstadoCara(ByVal idCara As Int16) As Boolean
        Try
            Return ODatos.RecuperarEstadoCara(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstadoCara", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstadoCara", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEstadoCaraCambioTarjeta(ByVal idCara As Int16) As Boolean
        Try
            Return ODatos.RecuperarEstadoCaraCambioTarjeta(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstadoCaraCambioTarjeta", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstadoCaraCambioTarjeta", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEstadoCaraManguera(ByVal idCara As Int16, ByVal idManguera As Int16, Optional ByVal IdEstacion As Int16 = 0) As Boolean
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarEstadoCaraManguera(idCara, idManguera)
            Else
                Return ODatos.RecuperarEstadoCaraManguera(idCara, idManguera, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarEstadoCaraManguera", "IdCara: " & idCara & ", IdManguera: " & idManguera, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarEstadoCaraManguera", "IdEstacion:" & IdEstacion & "IdCara: " & idCara & ", IdManguera: " & idManguera, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarEstadoCaraManguera", "IdCara: " & idCara & ", IdManguera: " & idManguera, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarEstadoCaraManguera", "IdEstacion:" & IdEstacion & "IdCara: " & idCara & ", IdManguera: " & idManguera, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarEstadoTurno(ByVal cara As String, Optional ByVal IdEstacion As Int16 = 0) As String
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarEstadoTurno(cara)
            Else
                Return ODatos.RecuperarEstadoTurno(cara, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarEstadoTurno", "cara: " & cara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarEstadoTurno", "IdEstacion: " & IdEstacion & "cara: " & cara, "FallaStoredProcedure")
            End If
            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarEstadoTurno", "cara: " & cara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarEstadoTurno", "IdEstacion: " & IdEstacion & "cara: " & cara, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarPrecioPorCliente(ByVal placa As String, Optional ByVal IdEstacion As Int16 = 0) As Double
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarPrecioCliente(placa)
            Else
                Return ODatos.RecuperarPrecioCliente(placa, IdEstacion)
            End If
        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarPrecioPorCliente", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarPrecioPorCliente", "IdEstacion: " & IdEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarPrecioPorCliente", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarPrecioPorCliente", "IdEstacion: " & IdEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarPrecioProductoMangueraCliente(ByVal IdProducto As Integer, ByVal IdManguera As Integer, ByVal ROM As String) As Double
        Try

            Return ODatos.RecuperarPrecioProductoMangueraCliente(IdProducto, IdManguera, ROM)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrecioProductoMangueraCliente", "IdProducto: " & IdProducto & ", IdMaguera: " & IdManguera & ", ROM: " & ROM, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrecioProductoMangueraCliente", "IdProducto: " & IdProducto & ", IdMaguera: " & IdManguera & ", ROM: " & ROM, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarPrecioPorVehiculoBolivia(ByVal cara As Int16, ByVal Placa As String, ByVal IdProducto As Int16) As DataTable
        Try
            Return ODatos.RecuperarPrecioPorVehiculoBolivia(cara, Placa, IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrecioPorProducto", "cara: " & cara & "Placa: " & Placa & "IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrecioPorProducto", "cara: " & cara & "Placa: " & Placa & "IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPrecioVigenteProducto(ByVal IdProducto As Integer) As Double
        Try
            Return ODatos.RecuperarPrecioVigenteProducto(IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrecioVigenteProducto", "Id Producto: " & IdProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrecioVigenteProducto", "Id Producto: " & IdProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPrecioPorProducto(ByVal producto As Int32) As Double
        Try
            Return ODatos.RecuperarPrecioProducto(producto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrecioPorProducto", "Producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrecioPorProducto", "Producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPrecioProductoPorTurno(ByVal idProducto As Int32, ByVal idTurno As Int32) As Double
        Try
            Return ODatos.RecuperarPrecioProductoPorTurno(idProducto, idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorTurno", "IdProducto: " & idProducto & ", IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorTurno", "IdProducto: " & idProducto & ", IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPreciosProductosPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarPreciosProductosPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPreciosProductosPorTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPreciosProductosPorTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPrecioProductoPorTurno2(ByVal idProducto As Int32, ByVal idTurno As Int32) As Double
        Try
            Return ODatos.RecuperarPrecioProductoPorTurno2(idProducto, idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorTurno", "IdProducto: " & idProducto & ", IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorTurno", "IdProducto: " & idProducto & ", IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPrecioProductoPorManguera(ByVal idProducto As Int32, ByVal idManguera As Int32, Optional ByVal idEstacion As Int16 = 0) As Decimal
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarPrecioProductoPorManguera(idProducto, idManguera)
            Else
                Return ODatos.RecuperarPrecioProductoPorManguera(idProducto, idManguera, idEstacion)
            End If
        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorManguera", "IdProducto: " & idProducto & ", idManguera: " & idManguera, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorManguera", "IdEstacion:" & idEstacion & "IdProducto: " & idProducto & ", idManguera: " & idManguera, "FallaStoredProcedure")
            End If
            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorManguera", "IdProducto: " & idProducto & ", idManguera: " & idManguera, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorManguera", "IdEstacion:" & idEstacion & "IdProducto: " & idProducto & ", idManguera: " & idManguera, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarDatosEstacion() As InformacionEstacion
        Try
            Dim oEstacion As New InformacionEstacion
            Dim Registro As IDataReader = ODatos.RecuperarEstacion(1)
            If Registro.Read Then
                oEstacion.Ciudad = Registro.Item("NombreCiudad").ToString()
                oEstacion.Codigo = Registro.Item("Codigo").ToString()
                oEstacion.Direccion = Registro.Item("Direccion").ToString()
                oEstacion.Nit = Registro.Item("Nit").ToString()
                oEstacion.Nombre = Registro.Item("Nombre").ToString()
                oEstacion.Telefono = Registro.Item("Telefono").ToString()
                oEstacion.Representante = Registro.Item("RepresentanteLegal").ToString()
            End If
            Registro.Close()
            Return oEstacion
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosEstacion(ByVal Estacion As Short) As InformacionEstacion
        Try
            Dim oEstacion As New InformacionEstacion
            Dim Registro As IDataReader = ODatos.RecuperarEstacion(Estacion)
            If Registro.Read Then
                oEstacion.Ciudad = Registro.Item("NombreCiudad").ToString()
                oEstacion.Codigo = Registro.Item("Codigo").ToString()
                oEstacion.Direccion = Registro.Item("Direccion").ToString()
                oEstacion.Nit = Registro.Item("Nit").ToString()
                oEstacion.Nombre = Registro.Item("Nombre").ToString()
                oEstacion.Telefono = Registro.Item("Telefono").ToString()
            End If
            Registro.Close()
            Return oEstacion
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosEstacionMexico() As InformacionEstacion
        Try
            Dim oEstacion As New InformacionEstacion
            Dim Registro As IDataReader = ODatos.RecuperarEstacion(1)
            If Registro.Read Then
                oEstacion.Ciudad = Registro.Item("NombreCiudad").ToString()
                oEstacion.Codigo = Registro.Item("Codigo").ToString()
                oEstacion.Direccion = Registro.Item("Direccion").ToString()
                oEstacion.DireccionFiscal = Registro.Item("DireccionFiscal").ToString()
                oEstacion.Nit = Registro.Item("Nit").ToString()
                oEstacion.Nombre = Registro.Item("Nombre").ToString()
                oEstacion.Telefono = Registro.Item("Telefono").ToString()
            End If

            Return oEstacion
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosEstacionMexico", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosEstacionMexico", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExistePlaca(ByVal placa As String) As Boolean
        Try
            Return ODatos.ExistePlaca(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExistePlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExistePlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteVehiculo(ByVal placa As String) As Boolean
        Try
            Return ODatos.ExisteVehiculo(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteVehiculo", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteVehiculo", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsMonitoreoChip(ByVal placa As String, Optional ByVal idEstacion As Int16 = 0) As Boolean
        Try
            If idEstacion = 0 Then
                Return ODatos.EsMonitoreoChip(placa)
            Else
                Return ODatos.EsMonitoreoChip(placa, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "EsMonitoreoChip", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "IdEstacion" & idEstacion & "EsMonitoreoChip", "Placa: " & placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "EsMonitoreoChip", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "IdEstacion" & idEstacion & "EsMonitoreoChip", "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function ValidarPlacaObligatoria(ByVal rom As String, Optional ByVal IdEstacion As Int16 = 0) As Boolean
        Try
            If IdEstacion = 0 Then
                Return ODatos.ValidarPlacaObligatoria(rom)
            Else
                Return ODatos.ValidarPlacaObligatoria(rom, IdEstacion)
            End If
        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarPlacaObligatoria", "rom: " & rom, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarPlacaObligatoria", "IdEstacion:" & IdEstacion & "rom: " & rom, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarPlacaObligatoria", "rom: " & rom, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarPlacaObligatoria", "IdEstacion:" & IdEstacion & "rom: " & rom, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function ValidarChipEmpleado(ByVal rom As String, Cara As String) As Boolean
        Try
            Return ODatos.ValidarChipEmpleado(rom, Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarChipEmpleado", "rom: " & rom & " Cara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarChipEmpleado", "rom: " & rom & " Cara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarTopeConsignacion(ByVal recibo As Int64) As Boolean
        Try
            Return ODatos.ValidarTopeConsignacion(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTopeConsignacion", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTopeConsignacion", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsVehiculoConCreditoSuspendido(ByVal placa As String) As Boolean
        Try
            Return ODatos.EsVehiculoConCreditoSuspendido(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsVehiculoConCreditoSuspendido", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsVehiculoConCreditoSuspendido", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteTarjetaConsumo(ByVal Numero As String) As Boolean
        Try
            Return ODatos.ExisteTarjetaConsumo(Numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteTarjetaConsumo", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteTarjetaConsumo", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ExisteVehiculoLocal(ByVal placa As String) As Boolean
        Try
            Return ODatos.ExisteVehiculoLocal(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteVehiculoLocal", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteVehiculoLocal", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarInformacionCredito(ByVal placa As String, ByVal porcentajeCredito As Double, ByVal idFinanciera As Int32)
        Try
            ODatos.ActualizarInformacionCredito(placa, porcentajeCredito, idFinanciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarInformacionCredito", "Placa: " & placa & " , PorcentajeCredito: " & porcentajeCredito & " , IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarInformacionCredito", "Placa: " & placa & " , PorcentajeCredito: " & porcentajeCredito & " , IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarInformacionCreditoCombustible(ByVal placa As String, ByVal porcentajeCredito As Double, ByVal idFinanciera As Int32)
        Try
            ODatos.ActualizarInformacionCreditoCombustible(placa, porcentajeCredito, idFinanciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarInformacionCreditoCombustible", "Placa: " & placa & " , PorcentajeCredito: " & porcentajeCredito & " , IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarInformacionCreditoCombustible", "Placa: " & placa & " , PorcentajeCredito: " & porcentajeCredito & " , IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarCausalBloqueo(ByVal placa As String, ByVal idCausalBloqueo As Int16)
        Try
            ODatos.ActualizarCausalBloqueo(placa, idCausalBloqueo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCausalBloqueo", "Placa: " & placa & " , idCausalBloqueo: " & idCausalBloqueo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCausalBloqueo", "Placa: " & placa & " , idCausalBloqueo: " & idCausalBloqueo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarCausalBloqueoCombustible(ByVal placa As String, ByVal idCausalBloqueo As Int16)
        Try
            ODatos.ActualizarCausalBloqueoCombustible(placa, idCausalBloqueo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCausalBloqueoCombustible", "Placa: " & placa & " , idCausalBloqueo: " & idCausalBloqueo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCausalBloqueoCombustible", "Placa: " & placa & " , idCausalBloqueo: " & idCausalBloqueo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarPuertoCapturadorPorCara(ByVal idCara As Int32) As String
        Try
            Return ODatos.RecuperarPuertoCapturadorPorCara(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPuertoCapturadorPorCara", "idCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertoCapturadorPorCara", "idCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Function RecuperarImpresoraPorTurnoChile(ByVal turno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarImpresoraPorTurnoChile(turno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Function RecuperarImpresoraPorTurno(ByVal turno As Int32) As String
        Try
            Return ODatos.RecuperarImpresoraPorTurno(turno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Function RecuperarImpresoraPorTurno(ByVal turno As Int32, ByVal idEstacion As Int16) As String
        Try
            Return ODatos.RecuperarImpresoraPorTurno(turno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTurno", "IdEstacion: " & IdEstacion & "Turno: " & turno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorTurno", "IdEstacion: " & idEstacion & "Turno: " & turno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Function RecuperarImpresoraPorCaraChile(ByVal idcara As Int32, Optional ByVal IdEstacion As Int16 = 0) As IDataReader
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarImpresoraPorCaraChile(idcara)
            Else
                Return ODatos.RecuperarImpresoraPorCaraChile(idcara, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarImpresoraPorCara", "idcara: " & idcara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarImpresoraPorCara", "idetsacion: " & IdEstacion & "idcara: " & idcara, "FallaStoredProcedure")
            End If
            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarImpresoraPorCara", "idcara: " & idcara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarImpresoraPorCara", "idetsacion: " & IdEstacion & "idcara: " & idcara, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function


    Function RecuperarImpresoraPorCara(ByVal idcara As Int32, Optional ByVal IdEstacion As Int16 = 0) As String
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarImpresoraPorCara(idcara)
            Else
                Return ODatos.RecuperarImpresoraPorCara(idcara, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarImpresoraPorCara", "idcara: " & idcara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarImpresoraPorCara", "idetsacion: " & IdEstacion & "idcara: " & idcara, "FallaStoredProcedure")
            End If
            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarImpresoraPorCara", "idcara: " & idcara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarImpresoraPorCara", "idetsacion: " & IdEstacion & "idcara: " & idcara, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarPlacaParcialVenta(ByVal cara As String) As String
        Try
            Return ODatos.RecuperarPlacaParcialVenta(cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPlacaParcialVenta", "cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaParcialVenta", "cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpresoraPorPuertoCapturadorChile(ByVal puerto As String) As IDataReader
        Try
            Return ODatos.RecuperarImpresoraPorPuertoCapturadorChile(puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorPuertoCapturador", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorPuertoCapturador", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpresoraPorPuertoCapturador(ByVal puerto As String) As String
        Try
            Return ODatos.RecuperarImpresoraPorPuertoCapturador(puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorPuertoCapturador", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorPuertoCapturador", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdImpresoraPorPuertoCapturador(ByVal puerto As String) As Integer
        Try
            Return ODatos.RecuperarIdImpresoraPorPuertoCapturador(puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdImpresoraPorPuertoCapturador", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdImpresoraPorPuertoCapturador", "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarImpresoraPorPuertoCapturador(ByVal puerto As String, ByVal idEstacion As Int16) As String
        Try
            Return ODatos.RecuperarImpresoraPorPuertoCapturador(puerto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorPuertoCapturador", "IdEstacion: " & idEstacion & "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoraPorPuertoCapturador", "IdEstacion: " & idEstacion & "puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Function







    'Public Function RecuperarImpresoraPorPuertoCapturador(ByVal puerto As String, ByVal idEstacion As Int16) As String
    '    Try
    '        Return ODatos.RecuperarImpresoraPorPuertoCapturador(puerto, idEstacion)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "RecuperarImpresoraPorPuertoCapturador", "IdEstacion: " & idEstacion & "puerto: " & puerto, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "RecuperarImpresoraPorPuertoCapturador", "IdEstacion: " & idEstacion & "puerto: " & puerto, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Function
    Public Function RecuperarRedCapturadores() As DataSet
        Try
            Return ODatos.RecuperarRedCapturadores()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRedCapturadores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRedCapturadores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCaraLector() As DataSet
        Try
            Return ODatos.RecuperarCaraLector()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCaraLector", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCaraLector", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarRedCapturadores(ByVal idEstacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarRedCapturadores(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRedCapturadores", "Idestacion:" & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRedCapturadores", "Idestacion:" & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCapturadores() As IDataReader
        Try
            Return ODatos.RecuperarCapturadores()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCapturadores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCapturadores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCapturadores(ByVal IdTipoCapturador As Integer) As IDataReader
        Try
            Return ODatos.RecuperarCapturadores(IdTipoCapturador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCapturadores", "IdTipoCapturador: " & IdTipoCapturador.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCapturadores", "IdTipoCapturador: " & IdTipoCapturador.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function InsertarLecturaFinal(ByVal cara As Byte, ByVal valor As Double) As Int32
        Try
            Return ODatos.InsertarLecturaFinal(cara, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturaFinal", "cara: " & cara & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturaFinal", "cara: " & cara & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarLecturaFinal(ByVal idManguera As Integer, ByVal lectura As Decimal) As Int32
        Try
            Return ODatos.InsertarLecturaFinal(idManguera, lectura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturaFinal", "idManguera: " & idManguera & " , Lectura: " & lectura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturaFinal", "idManguera: " & idManguera & " , Lectura: " & lectura, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarLecturaFinal(ByVal idManguera As Integer, ByVal lectura As Decimal, ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.InsertarLecturaFinal(idManguera, lectura, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturaFinal", "IdEstacion: " & idEstacion & "idManguera: " & idManguera & " , Lectura: " & lectura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturaFinal", "IdEstacion: " & idEstacion & "idManguera: " & idManguera & " , Lectura: " & lectura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosEstacionGT() As InformacionEstacion
        Try
            Dim oEstacion As New InformacionEstacion
            Dim Registro As IDataReader = ODatos.RecuperarEstacion(1)
            If Registro.Read Then
                oEstacion.Ciudad = Registro.Item("NombreCiudad").ToString()
                oEstacion.Codigo = Registro.Item("Codigo").ToString()
                oEstacion.Direccion = Registro.Item("Direccion").ToString()
                oEstacion.Nit = Registro.Item("Nit").ToString()
                oEstacion.Nombre = Registro.Item("Nombre").ToString()
                oEstacion.Telefono = Registro.Item("Telefono").ToString()
                oEstacion.ManejaLeydeFrontera = CBool(Registro.Item("ManejaLeyFrontera").ToString())

            End If
            Registro.Close()
            Return oEstacion
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarDatosEstacionGT(ByVal idEstacion As Int16) As InformacionEstacion
        Try
            Dim oEstacion As New InformacionEstacion
            Dim Registro As IDataReader = ODatos.RecuperarEstacion(idEstacion)
            If Registro.Read Then
                oEstacion.Ciudad = Registro.Item("NombreCiudad").ToString()
                oEstacion.Codigo = Registro.Item("Codigo").ToString()
                oEstacion.Direccion = Registro.Item("Direccion").ToString()
                oEstacion.Nit = Registro.Item("Nit").ToString()
                oEstacion.Nombre = Registro.Item("Nombre").ToString()
                oEstacion.Telefono = Registro.Item("Telefono").ToString()
                oEstacion.ManejaLeydeFrontera = CBool(Registro.Item("ManejaLeyFrontera").ToString())

            End If
            Registro.Close()
            Return oEstacion
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarDatosEstacionUnificada() As InformacionEstacion
        Try
            Dim oEstacion As New InformacionEstacion
            Dim Registro As IDataReader = ODatos.RecuperarEstacion(1)
            If Registro.Read Then
                oEstacion.Ciudad = Registro.Item("NombreCiudad").ToString()
                oEstacion.Codigo = Registro.Item("Codigo").ToString()
                oEstacion.Direccion = Registro.Item("Direccion").ToString()
                oEstacion.Nit = Registro.Item("Nit").ToString()
                oEstacion.Nombre = Registro.Item("Nombre").ToString()
                oEstacion.Telefono = Registro.Item("Telefono").ToString()
                oEstacion.ManejaLeydeFrontera = CBool(Registro.Item("ManejaLeyFrontera").ToString())
                oEstacion.TipoEstacion = CType(Registro.Item("IdTipoEds"), TipoEstacion)
            End If
            Registro.Close()
            Return oEstacion
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosEstacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExistenCambiosPreciosEnTurno(ByVal IdTurno As Int32) As Boolean
        Try
            Return ODatos.ExistenCambiosPreciosEnTurno(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExistenCambiosPreciosEnTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExistenCambiosPreciosEnTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExistenBloqueosMangueraEnTurno(ByVal IdTurno As Int32) As Boolean
        Try
            Return ODatos.ExistenBloqueosMangueraEnTurno(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExistenBloqueosMangueraEnTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExistenBloqueosMangueraEnTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExistenCambiosPreciosEnTurno(ByVal IdTurno As Int32, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ExistenCambiosPreciosEnTurno(IdTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExistenCambiosPreciosEnTurno", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExistenCambiosPreciosEnTurno", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarLecturaInicial(ByVal idManguera As Integer, ByVal lectura As Decimal, ByVal precio As Decimal) As Int32
        Try
            Return ODatos.InsertarLecturaInicial(idManguera, lectura, precio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturaInicial", "idManguera: " & idManguera & " , lectura: " & lectura & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturaInicial", "idManguera: " & idManguera & " , lectura: " & lectura & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarLecturaInicial(ByVal idManguera As Integer, ByVal lectura As Decimal, ByVal precio As Decimal, ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.InsertarLecturaInicial(idManguera, lectura, precio, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturaInicial", "IdEstacion: " & idEstacion & "idManguera: " & idManguera & " , lectura: " & lectura & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturaInicial", "IdEstacion: " & idEstacion & "idManguera: " & idManguera & " , lectura: " & lectura & " , precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarLecturaInicial(ByVal cara As Byte, ByVal valor As Double) As Int32
        Try
            Return ODatos.InsertarLecturaInicial(cara, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturaInicial", "cara: " & cara & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturaInicial", "cara: " & cara & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarLecturaInicial(ByVal idManguera As Integer, ByVal lectura As Decimal) As Int32
        Try
            Return ODatos.InsertarLecturaInicial(idManguera, lectura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturaInicial", "idManguera: " & idManguera & " , lectura: " & lectura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturaInicial", "idManguera: " & idManguera & " , lectura: " & lectura, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVehiculoPorTag(ByVal tag As String) As VehiculoANH
        Try
            Return ODatos.RecuperarVehiculoPorTag(tag)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculoPorTag", "tag: " & tag, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculoPorTag", "tag " & tag, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVehiculoPorIdentificador(ByVal rom As String) As IDataReader
        Try
            Return ODatos.RecuperarVehiculoPorIdentificador(rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculoPorIdentificador", "rom: " & rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculoPorIdentificador", "rom: " & rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub InsertarVentaCreditoManual(ByVal Recibo As Int64, ByVal Placa As String, ByVal AutorizacionCRM As String, ByVal Cara As Int16, ByVal SaldoDisponible As Decimal, ByVal IdFormaPAgo As Int16, ByVal Rom As String, ByVal NroGuiaDespacho As String)
        Try
            ODatos.InsertarVentaCreditoManual(Recibo, Placa, AutorizacionCRM, Cara, SaldoDisponible, IdFormaPAgo, Rom, NroGuiaDespacho)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaCreditoManual", "cara: " & Cara & " , placa: " & Placa & " , IdFormaPAgo: " & IdFormaPAgo & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaCreditoManual", "cara: " & Cara & " , placa: " & Placa & " , IdFormaPAgo: " & IdFormaPAgo & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarVentaParcial(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String)
        Try
            ODatos.InsertarVentaParcial(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVentaParcialFullstation(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal IdFormaPago As Int16)
        Try
            ODatos.InsertarVentaParcialFullstation(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, IdFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarVentaParcialFullstation(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal IdFormaPago As Int16, ByVal IdManguera As Integer)
        Try
            ODatos.InsertarVentaParcialFullstation(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, IdFormaPago, IdManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVentaParcialFullstation(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal IdFormaPago As Int16, ByVal IdManguera As Integer, ByVal NumeroAutorizacionCheque As String)
        Try
            ODatos.InsertarVentaParcialFullstation(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, IdFormaPago, IdManguera, NumeroAutorizacionCheque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString & "NumeroAutorizacionCheque: " & NumeroAutorizacionCheque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString & "NumeroAutorizacionCheque: " & NumeroAutorizacionCheque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub





    Public Sub InsertarVentaParcialFullstation(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal IdFormaPago As Int16, ByVal IdManguera As Integer, ByVal NumeroAutorizacionCheque As String, ByVal NroTarjeta As String, ByVal ValorPrepago As Double)
        Try
            ODatos.InsertarVentaParcialFullstation(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, IdFormaPago, IdManguera, NumeroAutorizacionCheque, NroTarjeta, ValorPrepago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString & "NumeroAutorizacionCheque: " & NumeroAutorizacionCheque & ", NroTarjeta: " & NroTarjeta & ", ValorPrepago: " & ValorPrepago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString & "NumeroAutorizacionCheque: " & NumeroAutorizacionCheque & ", NroTarjeta: " & NroTarjeta & ", ValorPrepago: " & ValorPrepago, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarVentaParcialFullstation(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal IdFormaPago As Int16, ByVal IdManguera As Integer, ByVal NumeroAutorizacionCheque As String, ByVal AutorizacionCRM As String, ByVal SaldoDisponible As Decimal)
        Try
            ODatos.InsertarVentaParcialFullstation(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, IdFormaPago, IdManguera, NumeroAutorizacionCheque, AutorizacionCRM, SaldoDisponible)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString & "NumeroAutorizacionCheque: " & NumeroAutorizacionCheque & ", AutorizacionCRM: " & AutorizacionCRM & ", SaldoDisponible: " & SaldoDisponible, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString & "NumeroAutorizacionCheque: " & NumeroAutorizacionCheque & ", AutorizacionCRM: " & AutorizacionCRM & ", SaldoDisponible: " & SaldoDisponible, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarVentaParcialFullstation(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String,
                                               ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal IdFormaPago As Int16, ByVal IdManguera As Integer,
                                               ByVal NumeroAutorizacionCheque As String, ByVal AutorizacionCRM As String, ByVal SaldoDisponible As Decimal,
                                               ByVal Nrotarjeta As String, ByVal ValorPrepago As Double, ByVal Iva As Decimal)
        Try
            ODatos.InsertarVentaParcialFullstation(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, IdFormaPago, IdManguera, NumeroAutorizacionCheque, AutorizacionCRM, SaldoDisponible, Nrotarjeta, ValorPrepago, Iva)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString & "NumeroAutorizacionCheque: " & NumeroAutorizacionCheque & ", AutorizacionCRM: " & AutorizacionCRM & ", SaldoDisponible: " & SaldoDisponible & ", NroTarjeta: " & Nrotarjeta & ", ValorPrepago: " & ValorPrepago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcialFullstation", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & "IdManguera: " & IdManguera.ToString & "NumeroAutorizacionCheque: " & NumeroAutorizacionCheque & ", AutorizacionCRM: " & AutorizacionCRM & ", SaldoDisponible: " & SaldoDisponible & ", NroTarjeta: " & Nrotarjeta & ", ValorPrepago: " & ValorPrepago, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarVentaParcialGazel(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal Autorizacion As String, ByVal IdFormaPagoP As Int16)
        Try
            ODatos.InsertarVentaParcialGazel(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, Autorizacion, IdFormaPagoP)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcialGazel", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcialGazel", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarVentaParcialPeruInd(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal Autorizacion As String, ByVal SaldoDisponible As Decimal)
        Try
            ODatos.InsertarVentaParcialPeruInd(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, Autorizacion, SaldoDisponible)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcialPeruInd", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcialPeruInd", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVentaParcialGTCentroCosto(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal idManguera As Int16, ByVal saldoCredito As Decimal, ByVal valorPredeterminado As Decimal, Optional ByVal nroAutorizacionManual As String = Nothing, Optional ByVal autorizacionCheque As String = Nothing, Optional ByVal IdFormaPago As Short = 0, Optional ByVal kilometraje As String = "", Optional ByVal autorizacion As String = "", Optional ByVal esAutorizadoLocal As Boolean = False, Optional ByVal descuentoValor As Decimal = 0, Optional ByVal descuentoPorcentaje As Decimal = 0, Optional ByVal PrecioGerenciadoCliente As Decimal = 0, Optional ByVal IdTipoVehiculo As Int32 = 0, Optional ByVal TipoManejo As TipoManejo = TipoManejo.Descuento, Optional ByVal ImprimirDescuento As Boolean = True, Optional ByVal Contrato As String = "", Optional ByVal CentroCosto As String = "", Optional ByVal NombreCentroCosto As String = "")
        Try
            ODatos.InsertarVentaParcialGT(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, idManguera, saldoCredito, valorPredeterminado, IdFormaPago, kilometraje, autorizacion, esAutorizadoLocal, nroAutorizacionManual, autorizacionCheque, descuentoValor, descuentoPorcentaje, PrecioGerenciadoCliente, IdTipoVehiculo, TipoManejo, ImprimirDescuento, Contrato, CentroCosto, NombreCentroCosto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & " , SaldoCredito: " & saldoCredito & " , ValorPredeterminado: " & valorPredeterminado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & " , SaldoCredito: " & saldoCredito & " , ValorPredeterminado: " & valorPredeterminado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarVentaParcialGT(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal idManguera As Int16, ByVal saldoCredito As Decimal, ByVal valorPredeterminado As Decimal, Optional ByVal nroAutorizacionManual As String = Nothing, Optional ByVal autorizacionCheque As String = Nothing, Optional ByVal IdFormaPago As Short = 0, Optional ByVal kilometraje As String = "", Optional ByVal autorizacion As String = "", Optional ByVal esAutorizadoLocal As Boolean = False, Optional ByVal descuentoValor As Decimal = 0, Optional ByVal descuentoPorcentaje As Decimal = 0, Optional ByVal PrecioGerenciadoCliente As Decimal = 0, Optional ByVal IdTipoVehiculo As Int32 = 0, Optional ByVal TipoManejo As TipoManejo = TipoManejo.Descuento, Optional ByVal ImprimirDescuento As Boolean = True)
        Try
            ODatos.InsertarVentaParcialGT(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, idManguera, saldoCredito, valorPredeterminado, IdFormaPago, kilometraje, autorizacion, esAutorizadoLocal, nroAutorizacionManual, autorizacionCheque, descuentoValor, descuentoPorcentaje, PrecioGerenciadoCliente, IdTipoVehiculo, TipoManejo, ImprimirDescuento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & " , SaldoCredito: " & saldoCredito & " , ValorPredeterminado: " & valorPredeterminado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & " , SaldoCredito: " & saldoCredito & " , ValorPredeterminado: " & valorPredeterminado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarVentaParcialGT(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal idManguera As Int16, ByVal saldoCredito As Decimal, ByVal valorPredeterminado As Decimal, ByVal IdEstacion As Integer, Optional ByVal nroAutorizacionManual As String = Nothing, Optional ByVal autorizacionCheque As String = Nothing, Optional ByVal IdFormaPago As Short = 0, Optional ByVal kilometraje As String = "", Optional ByVal autorizacion As String = "", Optional ByVal esAutorizadoLocal As Boolean = False, Optional ByVal descuentoValor As Decimal = 0, Optional ByVal descuentoPorcentaje As Decimal = 0, Optional ByVal PrecioGerenciadoCliente As Decimal = 0, Optional ByVal IdTipoVehiculo As Int32 = 0, Optional ByVal TipoManejo As TipoManejo = TipoManejo.Descuento, Optional ByVal ImprimirDescuento As Boolean = True)
        Try
            ODatos.InsertarVentaParcialGT(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, idManguera, saldoCredito, valorPredeterminado, IdEstacion, IdFormaPago, kilometraje, autorizacion, esAutorizadoLocal, nroAutorizacionManual, autorizacionCheque, descuentoValor, descuentoPorcentaje, PrecioGerenciadoCliente, IdTipoVehiculo, TipoManejo, ImprimirDescuento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & " , SaldoCredito: " & saldoCredito & " , ValorPredeterminado: " & valorPredeterminado & " , IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & " , SaldoCredito: " & saldoCredito & " , ValorPredeterminado: " & valorPredeterminado & " , IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVentaParcialGTChile(ByVal cara As Int16, ByVal lecturaInicial As Nullable(Of Decimal), ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal Rom As String, ByVal idManguera As Int16, ByVal saldoCredito As Decimal, ByVal valorPredeterminado As Decimal, Optional ByVal nroAutorizacionManual As String = Nothing, Optional ByVal autorizacionCheque As String = Nothing, Optional ByVal IdFormaPago As Short = 0, Optional ByVal kilometraje As String = "", Optional ByVal autorizacion As String = "", Optional ByVal esAutorizadoLocal As Boolean = False, Optional ByVal descuentoValor As Decimal = 0, Optional ByVal descuentoPorcentaje As Decimal = 0, Optional ByVal PrecioGerenciadoCliente As Decimal = 0, Optional ByVal IdTipoVehiculo As Int32 = 0, Optional ByVal IdTipoDocumento As TipoDocumentoChile = TipoDocumentoChile.Boleta, Optional ByVal IdTipoCombustible As TipoCombustibleChile = TipoCombustibleChile.Propio, Optional ByVal RUC As String = "", Optional ByVal DocumentoPago As String = "", Optional ByVal RazonSocial As String = "", Optional ByVal Direccion As String = "", Optional ByVal Giro As String = "", Optional ByVal TipoIdentificacion As Int32 = Fabrica.TipoIdentificador.CHIP)
        Try
            ODatos.InsertarVentaParcialGTChile(cara, lecturaInicial, placa, fechaProximoMantenimiento, Rom, idManguera, saldoCredito, valorPredeterminado, IdFormaPago, kilometraje, autorizacion, esAutorizadoLocal, nroAutorizacionManual, autorizacionCheque, descuentoValor, descuentoPorcentaje, PrecioGerenciadoCliente, IdTipoVehiculo, IdTipoDocumento, IdTipoCombustible, RUC, DocumentoPago, RazonSocial, Direccion, Giro, TipoIdentificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & " , SaldoCredito: " & saldoCredito & " , ValorPredeterminado: " & valorPredeterminado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & Rom & " , SaldoCredito: " & saldoCredito & " , ValorPredeterminado: " & valorPredeterminado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarVentaGTRecuperada(ByVal manguera As Int16, ByVal cantidad As Decimal, ByVal formasPago As Dictionary(Of Integer, Decimal), ByVal placa As String, ByVal kilometraje As String, ByVal GUID As String) As Int64
        Try
            Return ODatos.InsertarVentaGTRecuperada(manguera, cantidad, formasPago, placa, kilometraje, GUID)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperada", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperada", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaGTRecuperadaFullStation(ByVal manguera As Int16, ByVal cantidad As Decimal, ByVal formasPago As Dictionary(Of Integer, Decimal), ByVal placa As String, ByVal kilometraje As String, ByVal GUID As String, ByVal IdTurno As Integer, IdBloqueo As String) As Int64
        Try
            Return ODatos.InsertarVentaGTRecuperadaFullStation(manguera, cantidad, formasPago, placa, kilometraje, GUID, IdTurno, IdBloqueo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperada", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID & " , IdBloqueo: " & IdBloqueo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperada", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID & " , IdBloqueo: " & IdBloqueo, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function InsertarVentaGTRecuperadaFullStation(ByVal manguera As Int16, ByVal cantidad As Decimal, ByVal formasPago As Dictionary(Of Integer, Decimal), ByVal placa As String, ByVal kilometraje As String, ByVal GUID As String, ByVal IdTurno As Integer, ByVal Ruc As String, ByVal EsVentaCredito As Boolean, ByVal Credito As String, ByVal TipoDocumento As Integer) As Int64
        Try
            Return ODatos.InsertarVentaGTRecuperadaFullStation(manguera, cantidad, formasPago, placa, kilometraje, GUID, IdTurno, Ruc, EsVentaCredito, Credito, TipoDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperada", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID & " , Ruc: " & Ruc & " , Credito: " & Credito & " , TipoDocumento: " & TipoDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperada", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID & " , Ruc: " & Ruc & " , Credito: " & Credito & " , TipoDocumento: " & TipoDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function InsertarVentaGTRecuperadaPeru(ByVal manguera As Int16, ByVal cantidad As Decimal, ByVal formasPago As Dictionary(Of Integer, Decimal), ByVal placa As String, ByVal kilometraje As String, ByVal GUID As String, ByVal EsVentaCredito As Boolean, ByVal Rut As String, ByVal NroCredito As String, ByVal TipoDocumento As Int32) As Int64
        Try
            Return ODatos.InsertarVentaGTRecuperadaPeru(manguera, cantidad, formasPago, placa, kilometraje, GUID, EsVentaCredito, Rut, NroCredito, TipoDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperadaFullStation", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperadaFullStation", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormaPagoPorPlaca(ByVal Placa As String) As Integer
        Try
            Return ODatos.RecuperarFormaPagoPorPlaca(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaPagoPorPlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaPagoPorPlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarFormaPagoPorNumeroCredito(ByVal Credito As String) As Integer
        Try
            Return ODatos.RecuperarFormaPagoPorNumeroCredito(Credito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaPagoPorNumeroCredito", "NumCredito: " & Credito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaPagoPorNumeroCredito", "NumCredito: " & Credito, "FallaStoredProcedure")
            Throw
        End Try
    End Function





    Public Function RecuperarFormaPagoPorId(ByVal IdFormaPago As Int16) As IDataReader
        Try
            Return ODatos.RecuperarFormaPagoPorId(IdFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaPagoPorId", "IdFormaPago: " & IdFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaPagoPorId", "IdFormaPago: " & IdFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaGTRecuperada(ByVal manguera As Int16, ByVal cantidad As Decimal, ByVal formasPago As Dictionary(Of Integer, Decimal), ByVal placa As String, ByVal kilometraje As String, ByVal GUID As String, ByVal idEstacion As Int16) As Int64
        Try
            Return ODatos.InsertarVentaGTRecuperada(manguera, cantidad, formasPago, placa, kilometraje, GUID, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperada", "IdEstacion: " & idEstacion & "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperada", "IdEstacion: " & idEstacion & "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarVentaGTRecuperadaChile(ByVal manguera As Int16, ByVal cantidad As Decimal, ByVal formasPago As Dictionary(Of Integer, Decimal), ByVal placa As String, ByVal kilometraje As String, ByVal GUID As String, ByVal TipoDocumento As Int32, ByVal NumeroDocumento As Int64, ByVal RazonSocial As String, ByVal Direccion As String, ByVal Giro As String, ByVal Ruc As String, ByVal NroGuia As String, ByVal EsVentaCredito As Boolean) As Int64
        Try
            Return ODatos.InsertarVentaGTRecuperadaChile(manguera, cantidad, formasPago, placa, kilometraje, GUID, TipoDocumento, NumeroDocumento, RazonSocial, Direccion, Giro, Ruc, NroGuia, EsVentaCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperadaChile", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGTRecuperadaChile", "manguera: " & manguera & " , cantidad: " & cantidad & " , placa: " & placa & " , kilometraje: " & kilometraje & " , guid: " & GUID, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub InsertarVentaParcialMexico(ByVal cara As Int16, ByVal lecturaInicial As Double, ByVal placa As String, ByVal fechaProximoMantenimiento As String, ByVal rom As String, ByVal contrato As String)
        Try
            ODatos.InsertarVentaParcialMexico(cara, lecturaInicial, placa, fechaProximoMantenimiento, rom, contrato)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , lecturaInicial: " & lecturaInicial & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & rom & " , Contrato: " & contrato, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaParcial", "cara: " & cara & " , lecturaInicial: " & lecturaInicial & " , placa: " & placa & " , fechaProximoMantenimiento: " & fechaProximoMantenimiento & " , Rom: " & rom & " , Contrato: " & contrato, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarReversionesPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarReversionesPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReversionesPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReversionesPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarReversionesPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarReversionesPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReversionesPorTurno", "IdEstacion: " & IdEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReversionesPorTurno", "IdEstacion: " & IdEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecaudosPorTurno(ByVal idTurno As Int32, ByVal idFinanciera As Int32) As IDataReader
        Try
            Return ODatos.RecuperarRecaudosPorTurno(idTurno, idFinanciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudosPorTurno", "idTurno: " & idTurno & " , IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudosPorTurno", "idTurno: " & idTurno & " , IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarRecaudosPorTurno(ByVal idTurno As Int32, ByVal idFinanciera As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarRecaudosPorTurno(idTurno, idFinanciera, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudosPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno & " , IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudosPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno & " , IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPagosPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarPagosPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPagosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPagosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPagosPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarPagosPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPagosPorTurno", "IdEstacion: " & IdEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPagosPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarM3VendidosHoy(ByVal IdEstacion As Integer) As IDataReader
        Try
            Return ODatos.RecuperarM3VendidosHoy(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarM3VendidosHoy", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarM3VendidosHoy", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarM3VendidosHoy() As IDataReader
        Try
            Return ODatos.RecuperarM3VendidosHoy()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarM3VendidosHoy", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarM3VendidosHoy", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarVentasEnTurno(ByVal Cedula As String, ByVal Clave As String) As IDataReader
        Try
            Return ODatos.RecuperarVentasEnTurno(Cedula, Clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasEnTurno", "Cedula: " & Cedula & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasEnTurno", "Cedula: " & Cedula & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarVentasEnTurno(ByVal Cedula As String, ByVal Clave As String, ByVal IdEstacion As Integer) As IDataReader
        Try
            Return ODatos.RecuperarVentasEnTurno(Cedula, Clave, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasEnTurno", "Cedula: " & Cedula & ", Clave: " & Clave & " IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasEnTurno", "Cedula: " & Cedula & ", Clave: " & Clave & " IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarVentasPrepagoPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentasPrepagoPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPrepagoPorTurno ", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPrepagoPorTurno ", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarTotalesPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarTotalesProductosPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesProductosPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesProductosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesProductosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesPorTurnoTrabajo(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorTurnoTrabajo(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurnoTrabajo", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurnoTrabajo", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTotalesPorTurnoTrabajo(ByVal idTurno As Int32, ByVal idestacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorTurnoTrabajo(idTurno, idestacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurnoTrabajo", "IdEstacion: " & idestacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurnoTrabajo", "IdEstacion: " & idestacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarCantidadCombustiblePorTurno(ByVal idTurno As Int32) As Decimal
        Try
            Return ODatos.RecuperarCantidadCombustiblePorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCantidadCombustiblePorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCantidadCombustiblePorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarTotalesPorTurnoFormaPago(ByVal idTurno As Int32, ByVal idFormaPago As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesPorTurnoFormaPago(idTurno, idFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurnoFormaPago", "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesPorTurnoFormaPago", "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesMediosPagoTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesMediosPagoTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarTotalesMediosPagoTurnoGazel(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesMediosPagoTurnoGazel(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoGazel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoGazel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesMediosPagoTurnoTerpel(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesMediosPagoTurnoTerpel(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoTerpel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoTerpel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesMediosPagoTurnoTrabajoTerpel(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesMediosPagoTurnoTrabajoTerpel(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoTrabajoTerpel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoTrabajoTerpel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesDescuentosPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesDescuentosPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesDescuentosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesDescuentosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesTurnoFormaPagoProducto(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesTurnoFormaPagoProducto(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoFormaPagoProducto", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoFormaPagoProducto", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesTurnoFormaPagoProductoCanastilla(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesTurnoFormaPagoProductoCanastilla(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoFormaPagoProductoCanastilla", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoFormaPagoProductoCanastilla", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesTurnoTrabajoFormaPagoProducto(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesTurnoTrabajoFormaPagoProducto(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoTrabajoFormaPagoProducto", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoTrabajoFormaPagoProducto", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesComplementariosPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesComplementariosPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCambiosChequeEnTurno(ByVal idTurno As Int32) As DataSet
        Try
            Return ODatos.RecuperarCambiosChequeEnTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCambiosChequeEnTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCambiosChequeEnTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesVentasFechaFormaPago(ByVal fecha As String, ByVal idFormaPago As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTotalesVentasFechaFormaPago(fecha, idFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesVentasFechaFormaPago", "fecha: " & fecha & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesVentasFechaFormaPago", "fecha: " & fecha & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarSloganCombustible(ByVal idMensaje As Int32, ByVal texto As String, ByVal desde As Date, ByVal hasta As Date, ByVal tipo As Int32, ByVal idCliente As Nullable(Of Int32), ByVal estado As Boolean)
        Try
            ODatos.InsertarSloganCombustible(idMensaje, texto, desde, hasta, tipo, idCliente, estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSloganCombustible", "idMensaje: " & idMensaje & " , texto: " & texto & " , Desde: " & desde & " , Hasta: " & hasta & " , Tipo: " & tipo & " , Estado: " & estado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSloganCombustible", "idMensaje: " & idMensaje & " , texto: " & texto & " , Desde: " & desde & " , Hasta: " & hasta & " , Tipo: " & tipo & " , Estado: " & estado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarSlogan(ByVal idMensaje As Int32, ByVal texto As String, ByVal desde As Date, ByVal hasta As Date, ByVal tipo As Int32, ByVal idCliente As Nullable(Of Int32), ByVal estado As Boolean)
        Try
            ODatos.InsertarSlogan(idMensaje, texto, desde, hasta, tipo, idCliente, estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSlogan", "idMensaje: " & idMensaje & " , texto: " & texto & " , Desde: " & desde & " , Hasta: " & hasta & " , Tipo: " & tipo & " , Estado: " & estado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSlogan", "idMensaje: " & idMensaje & " , texto: " & texto & " , Desde: " & desde & " , Hasta: " & hasta & " , Tipo: " & tipo & " , Estado: " & estado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarSloganPeru(ByVal dsMensaje As System.Data.DataSet)
        Try
            ODatos.InsertarSloganPeru(dsMensaje)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSloganPeru", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSloganPeru", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarMensajesNoControlados(ByVal cantidad As Decimal, ByVal operacion As Int64) As IDataReader
        Try
            Return ODatos.RecuperarMensajesNoControlados(cantidad, operacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajesNoControlados", "Cantidad: " & cantidad & "Operacion: " & operacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajesNoControlados", "Cantidad: " & cantidad & "Operacion: " & operacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarMensajesNoControlados(ByVal cantidad As Decimal, ByVal operacion As Int64, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarMensajesNoControlados(cantidad, operacion, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajesNoControlados", "IdEstacion: " & idEstacion & "Cantidad: " & cantidad & "Operacion: " & operacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajesNoControlados", "IdEstacion: " & idEstacion & "Cantidad: " & cantidad & "Operacion: " & operacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMensajesNoControladosPorRecibo(ByVal Recibo As Int64, ByVal operacion As Int64, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarMensajesNoControladosPorRecibo(Recibo, operacion)
            Else
                Return ODatos.RecuperarMensajesNoControladosPorRecibo(Recibo, operacion, idEstacion)
            End If


        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarMensajesNoControladosPorRecibo", "Recibo: " & Recibo & "Operacion: " & operacion, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarMensajesNoControladosPorRecibo", "IdEstacion: " & idEstacion & "Recibo: " & Recibo & "Operacion: " & operacion, "FallaStoredProcedure")
            End If


            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarMensajesNoControladosPorRecibo", "Recibo: " & Recibo & "Operacion: " & operacion, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarMensajesNoControladosPorRecibo", "IdEstacion: " & idEstacion & "Recibo: " & Recibo & "Operacion: " & operacion, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Sub EliminarSloganCombustible(ByVal idMensaje As Int32)
        Try
            ODatos.EliminarSloganCombustible(idMensaje)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarSloganCombustible", "idMensaje: " & idMensaje, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarSloganCombustible", "idMensaje: " & idMensaje, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarSlogan(ByVal idMensaje As Int32)
        Try
            ODatos.EliminarSlogan(idMensaje)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarSlogan", "idMensaje: " & idMensaje, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarSlogan", "idMensaje: " & idMensaje, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarSlogans() As IDataReader
        Try
            Return ODatos.RecuperarSlogans
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSlogans", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSlogans", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSlogansPorTipo(ByVal tipo As Int32) As IDataReader
        Try
            Return ODatos.RecuperarSlogansPorTipo(tipo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSlogansPorTipo", "Tipo: " & tipo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSlogansPorTipo", "Tipo: " & tipo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarSlogansPorTipo(ByVal tipo As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarSlogansPorTipo(tipo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSlogansPorTipo", "IdEstacion: " & idEstacion & "Tipo: " & tipo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSlogansPorTipo", "IdEstacion: " & idEstacion & "Tipo: " & tipo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSlogansPorCliente(ByVal idCliente As Int32) As IDataReader
        Try
            Return ODatos.RecuperarSlogansPorCliente(idCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSlogansPorCliente", "idCliente: " & idCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSlogansPorCliente", "idCliente: " & idCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSlogansPorCliente(ByVal idCliente As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarSlogansPorCliente(idCliente)
            Else
                Return ODatos.RecuperarSlogansPorCliente(idCliente, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarSlogansPorCliente", "idCliente: " & idCliente, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarSlogansPorCliente", "idEsatcion:" & idEstacion & "idCliente: " & idCliente, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarSlogansPorCliente", "idCliente: " & idCliente, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarSlogansPorCliente", "idEsatcion:" & idEstacion & "idCliente: " & idCliente, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarSlogansPorClienteLocal(ByVal RUC As String) As IDataReader
        Try
            Return ODatos.RecuperarSlogansPorClienteLocal(RUC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSlogansPorClienteLocal", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSlogansPorClienteLocal", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarMensajeSlogan() As DataTable
        Try
            Return ODatos.RecuperarMensajeSlogan
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajeSlogan", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajeSlogan", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLecturasPorMangueraTurno(ByVal idTurno As Int32, ByVal idManguera As Int32) As IDataReader
        Try
            Return ODatos.RecuperarLecturasPorMangueraTurno(idTurno, idManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraTurno", "idTurno: " & idTurno & " , IdManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraTurno", "idTurno: " & idTurno & " , IdManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarManguerasPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarManguerasPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarManguerasPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarManguerasPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSurtidoresPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarSurtidoresPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidoresPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidoresPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarSurtidoresPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarSurtidoresPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidoresPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidoresPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleadosVendoresPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarEmpleadosVendoresPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleadosVendoresPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleadosVendoresPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFormasPagoPorTurnoEmpleado(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoPorTurnoEmpleado(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurnoEmpleado", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurnoEmpleado", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarEncabezadoReporte() As IDataReader
        Try
            Return ODatos.RecuperarEncabezadoReporte()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoReporte", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoReporte", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEncabezadoReporte(ByVal IdEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarEncabezadoReporte(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoReporte", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoReporte", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFormasPago() As DataSet
        Try
            Return ODatos.RecuperarFormasPago
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPago", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPago", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFomaPagoActivas() As DataTable
        Try
            Return ODatos.RecuperarFomaPagoActivas()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFomaPagoActivas", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFomaPagoActivas", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPago(ByVal IdEstacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarFormasPago(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPago", "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPago", "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormassPago() As DataSet
        Try
            Return ODatos.RecuperarFormassPago
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPago", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPago", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarFormasPago(ByVal idFormaPago As Int32, ByVal NumeroCopiasLiquido As Integer, ByVal NumeroCopiasCanastilla As Integer, ByVal EsActivo As Boolean, ByVal Descripcion As String)
        Try
            ODatos.ActualizarFormasPago(idFormaPago, NumeroCopiasLiquido, NumeroCopiasCanastilla, EsActivo, Descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , NumeroCopiasLiquido: " & NumeroCopiasLiquido & " , NumeroCopiasCanastilla: " & NumeroCopiasCanastilla & " , EsActivo: " & EsActivo & " , Descripcion: " & Descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormasPago", "idFormaPago: " & idFormaPago & " , NumeroCopiasLiquido: " & NumeroCopiasLiquido & " , NumeroCopiasCanastilla: " & NumeroCopiasCanastilla & " , EsActivo: " & EsActivo & " , Descripcion: " & Descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarFormassPago(ByVal IdEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarFormassPago(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPago", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPago", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoVenta(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarFormasPagoVenta(recibo, esVentaRegistrada)
            Else
                Return ODatos.RecuperarFormasPagoVenta(recibo, esVentaRegistrada, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarFormasPagoVenta", "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarFormasPagoVenta", "IdEstacion:  " & idEstacion & "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarFormasPagoVenta", "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarFormasPagoVenta", "IdEstacion:  " & idEstacion & "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarMediosPagoAbono(ByVal pago As Int32) As IDataReader
        Try
            Return ODatos.RecuperarMediosPagoAbono(pago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMediosPagoAbono", "Pago: " & pago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMediosPagoAbono", "Pago: " & pago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDescuentosVenta(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As IDataReader
        Try
            Return ODatos.RecuperarDescuentosVenta(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDescuentosVenta", "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDescuentosVenta", "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDescuentosEnVenta(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As DataTable
        Try
            Return ODatos.RecuperarDescuentosEnVenta(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDescuentosEnVenta", "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDescuentosEnVenta", "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoVentaModificada(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As DataSet
        Try
            Return ODatos.RecuperarFormasPagoVentaModificada(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFormasPagoVentaModificada(ByVal recibo As Int64, ByVal idEstacion As Int16, Optional ByVal esVentaRegistrada As Boolean = True) As DataSet
        Try
            Return ODatos.RecuperarFormasPagoVentaModificada(recibo, esVentaRegistrada, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoVenta", "IdEstacion: " & IdEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoVenta", "IdEstacion: " & IdEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDetalleMediosPago(ByVal recibo As Long, ByVal idFormaPago As Integer) As IDataReader
        Try
            Return ODatos.RecuperarDetalleMediosPago(recibo, idFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDetalleMediosPago", "Recibo: " & recibo & "idFormaPago : " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDetalleMediosPago", "Recibo: " & recibo & "idFormaPago : " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoFactura(ByVal consecutivo As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoFactura(consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoFactura", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoFactura", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFormasPagoFactura(ByVal consecutivo As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoFactura(consecutivo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoFactura", "IdEstacion: " & idEstacion & "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoFactura", "IdEstacion: " & idEstacion & "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoReciboCanastilla(ByVal IdVenta As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoReciboCanastilla(IdVenta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoReciboCanastilla", "IdVenta: " & IdVenta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoReciboCanastilla", "IdVenta: " & IdVenta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoReciboCanastilla(ByVal IdVenta As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoReciboCanastilla(IdVenta, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoReciboCanastilla", "IdEstacion: " & idEstacion & "IdVenta: " & IdVenta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoReciboCanastilla", "IdEstacion: " & idEstacion & "IdVenta: " & IdVenta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoFacturaCDC(ByVal consecutivo As Int32) As DataSet
        Try
            Return ODatos.RecuperarFormasPagoFacturaCDC(consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoFacturaCDC", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoFacturaCDC", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoVentaCanastillaCDC(ByVal recibo As Int32) As DataSet
        Try
            Return ODatos.RecuperarFormasPagoVentaCanastillaCDC(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoVentaCanastillaCDC", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoVentaCanastillaCDC", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Function RecuperarFormasPagoCanastillaPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoCanastillaPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoCanastillaPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoCanastillaPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Function RecuperarFormasPagoCanastillaPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoCanastillaPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoCanastillaPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoCanastillaPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Function RecuperarFormasPagoCanastillaPorTurnoTrabajo(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoCanastillaPorTurnoTrabajo(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoCanastillaPorTurnoTrabajo", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoCanastillaPorTurnoTrabajo", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Function RecuperarFormasPagoCanastillaPorTurnoTrabajo(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoCanastillaPorTurnoTrabajo(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoCanastillaPorTurnoTrabajo", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoCanastillaPorTurnoTrabajo", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoPorTurno(ByVal idTurno As Int32, ByVal idSurtidor As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoPorTurno(idTurno, idSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurno", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurno", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFormasPagoPorTurnoEmpleado(ByVal idTurno As Int32, ByVal idSurtidor As Int32, ByVal IdEmpleado As Integer) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoPorTurnoEmpleadoVendedor(idTurno, idSurtidor, IdEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurno", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdEmpleado: " & IdEmpleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurno", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdEmpleado: " & IdEmpleado, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarStockTanquesTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarStockTanquesTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarStockTanquesTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarStockTanquesTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarStocksTurnoHorario(ByVal newId As String) As IDataReader
        Try
            Return ODatos.RecuperarStocksTurnoHorario(newId)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarStocksTurnoHorario", "newId: " & newId, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarStocksTurnoHorario", "newId: " & newId, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarStocksTurnoHorario(ByVal newId As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarStocksTurnoHorario(newId, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarStocksTurnoHorario", "IdEstacion: " & idEstacion & "newId: " & newId, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarStocksTurnoHorario", "IdEstacion: " & idEstacion & "newId: " & newId, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoPorTurnoDetallado(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoPorTurnoDetallado(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurnoDetallado", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurnoDetallado", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFormasPagoPorTurnoDetallado(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoPorTurnoDetallado(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurnoDetallado", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoPorTurnoDetallado", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarFacturaDetalleTmp(ByVal nomEquipo As String, ByVal idProducto As Int32, ByVal cantidad As Int32, ByVal precio As Double, ByVal borrarTemporal As Boolean)
        Try
            ODatos.InsertarFacturaDetalleTmp(nomEquipo, idProducto, cantidad, precio, borrarTemporal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaDetalleTmp", "nomEquipo: " & nomEquipo & " , idProducto: " & idProducto & " , cantidad: " & cantidad & " , Precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaDetalleTmp", "nomEquipo: " & nomEquipo & " , idProducto: " & idProducto & " , cantidad: " & cantidad & " , Precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarFacturaDetalleTmp(ByVal nomEquipo As String, ByVal idProducto As Int32, ByVal cantidad As Int32, ByVal precio As Double, ByVal porcentajeDescuento As Decimal, ByVal cantAutorizadaDescuento As Int32, ByVal borrarTemporal As Boolean)
        Try
            ODatos.InsertarFacturaDetalleTmp(nomEquipo, idProducto, cantidad, precio, porcentajeDescuento, cantAutorizadaDescuento, borrarTemporal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaDetalleTmp", "Nombre Equipo: " & nomEquipo & ", Id Producto: " & idProducto & ", Cantidad: " & cantidad & ", Precio: " & precio & ", PorcentajeDesc: " & porcentajeDescuento & ", Cant. Autorizada Descuento: " & cantAutorizadaDescuento & ", Borrar Temporal: " & borrarTemporal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaDetalleTmp", "Nombre Equipo: " & nomEquipo & ", Id Producto: " & idProducto & ", Cantidad: " & cantidad & ", Precio: " & precio & ", PorcentajeDesc: " & porcentajeDescuento & ", Cant. Autorizada Descuento: " & cantAutorizadaDescuento & ", Borrar Temporal: " & borrarTemporal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarFactura(ByVal total As Double, ByVal idFormaPago As Int16, ByVal usuario As String, ByVal clave As String, ByVal nomEquipoActual As String, ByVal guidFactura As String) As Int32
        Try
            Dim IdFactura As Integer
            IdFactura = ODatos.InsertarFactura(total, idFormaPago, usuario, clave, nomEquipoActual, guidFactura)
            Return IdFactura
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFactura", "total: " & total & " , idFormaPago: " & idFormaPago & " , usuario: " & usuario & " , clave: " & clave & " , NomEquipoActual: " & nomEquipoActual & " , GUIDFactura: " & guidFactura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFactura", "total: " & total & " , idFormaPago: " & idFormaPago & " , usuario: " & usuario & " , clave: " & clave & " , NomEquipoActual: " & nomEquipoActual & " , GUIDFactura: " & guidFactura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarFacturaDetallePrepagoTmp(ByVal nomEquipo As String, ByVal idProducto As Int32, ByVal valorCarga As Double, ByVal nroCodigoBarraPrepago As String, ByVal nroTarjetaPrepago As String, ByVal borrarTemporal As Boolean)
        Try
            ODatos.InsertarFacturaDetallePrepagoTmp(nomEquipo, idProducto, valorCarga, nroCodigoBarraPrepago, nroTarjetaPrepago, borrarTemporal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaDetallePrepagoTmp", "nomEquipo: " & nomEquipo & " , idProducto: " & idProducto & " , valorCarga: " & valorCarga & " , nroCodigoBarraPrepago: " & nroCodigoBarraPrepago & " , nroTarjetaPrepago: " & nroTarjetaPrepago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaDetallePrepagoTmp", "nomEquipo: " & nomEquipo & " , idProducto: " & idProducto & " , valorCarga: " & valorCarga & " , nroCodigoBarraPrepago: " & nroCodigoBarraPrepago & " , nroTarjetaPrepago: " & nroTarjetaPrepago, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarFacturaDetalleTarjetaTmp(ByVal nomEquipo As String, ByVal idProducto As Int32, ByVal valorCarga As Double, ByVal nroCodigoBarraPrepago As String, ByVal nroTarjetaPrepago As String, ByVal borrarTemporal As Boolean)
        Try
            ODatos.InsertarFacturaDetalleTarjetaTmp(nomEquipo, idProducto, valorCarga, nroCodigoBarraPrepago, nroTarjetaPrepago, borrarTemporal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaDetalleTarjetaTmp", "nomEquipo: " & nomEquipo & " , idProducto: " & idProducto & " , valorCarga: " & valorCarga & " , nroCodigoBarraPrepago: " & nroCodigoBarraPrepago & " , nroTarjetaPrepago: " & nroTarjetaPrepago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaDetalleTarjetaTmp", "nomEquipo: " & nomEquipo & " , idProducto: " & idProducto & " , valorCarga: " & valorCarga & " , nroCodigoBarraPrepago: " & nroCodigoBarraPrepago & " , nroTarjetaPrepago: " & nroTarjetaPrepago, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarFacturaTarjetaTmp(ByVal nomEquipo As String, ByVal codigoTarjeta As String, ByVal numeroSeguridad As String, ByVal idTipoLecturaTarjeta As Int32, ByVal borrarTemporal As Boolean)
        Try
            ODatos.InsertarFacturaTarjetaTmp(nomEquipo, codigoTarjeta, numeroSeguridad, idTipoLecturaTarjeta, borrarTemporal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaTarjetaTmp", "Nombre Equipo: " & nomEquipo & ", Codigo Tarjeta: " & codigoTarjeta & ", Num Seguridad: " & numeroSeguridad & ", IdTipoLecturaTarjeta: " & idTipoLecturaTarjeta & ", Borrar Temporal: " & borrarTemporal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaTarjetaTmp", "Nombre Equipo: " & nomEquipo & ", Codigo Tarjeta: " & codigoTarjeta & ", Num Seguridad: " & numeroSeguridad & ", IdTipoLecturaTarjeta: " & idTipoLecturaTarjeta & ", Borrar Temporal: " & borrarTemporal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarFacturaFormaPagoTmp(ByVal nomEquipo As String, ByVal idFormaPago As Int16, ByVal valor As Double, ByVal referencia As String, ByVal tipoLectura As Nullable(Of Int32), ByVal nroConfirmacion As String, ByVal borrarTemporal As Boolean)
        Try
            ODatos.InsertarFacturaFormaPagoTmp(nomEquipo, idFormaPago, valor, referencia, tipoLectura, nroConfirmacion, borrarTemporal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaFormaPagoTmp", "nomEquipo: " & nomEquipo & " , idFormaPago: " & idFormaPago & " , valor: " & valor & " , referencia: " & referencia & " , nroConfirmacion: " & nroConfirmacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaFormaPagoTmp", "nomEquipo: " & nomEquipo & " , idFormaPago: " & idFormaPago & " , valor: " & valor & " , referencia: " & referencia & " , nroConfirmacion: " & nroConfirmacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function AnularFactura(ByVal consecutivo As Int32, ByVal usuario As String, ByVal clave As String) As Integer
        Try
            Return ODatos.AnularFactura(consecutivo, usuario, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AnularFactura", "consecutivo: " & consecutivo & " , usuario: " & usuario & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AnularFactura", "consecutivo: " & consecutivo & " , usuario: " & usuario & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function AnularFactura(ByVal consecutivo As Int32, ByVal usuario As String, ByVal clave As String, ByVal idEstacion As Int16) As Integer
        Try
            Return ODatos.AnularFactura(consecutivo, usuario, clave, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AnularFactura", "IdEstacion: " & idEstacion & "consecutivo: " & consecutivo & " , usuario: " & usuario & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AnularFactura", "IdEstacion: " & idEstacion & "consecutivo: " & consecutivo & " , usuario: " & usuario & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPrecioProductoPorId(ByVal idProducto As Int32) As Double
        Try
            Return ODatos.RecuperarPrecioProductoPorId(idProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorId", "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrecioProductoPorId", "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsecutivoFactura(ByVal idFactura As Int32) As String
        Try
            Return ODatos.RecuperarConsecutivoFactura(idFactura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsecutivoFactura", "idFactura: " & idFactura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsecutivoFactura", "idFactura: " & idFactura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboVentaCanastilla(ByVal idVentaCanastilla As Int32) As Int32
        Try
            Return ODatos.RecuperarReciboVentaCanastilla(idVentaCanastilla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboVentaCanastilla", "IdVentaCanastilla: " & idVentaCanastilla, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboVentaCanastilla", "IdVentaCanastilla: " & idVentaCanastilla, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdFactura(ByVal consecutivo As Int32) As Int32
        Try
            Return ODatos.RecuperarIdFactura(consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdFactura", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdFactura", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdProducto(ByVal codigo As Int32) As Int32
        Try
            Return ODatos.RecuperarIdProducto(codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdProducto", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdProducto", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarRecargasPrepagoPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarRecargasPrepagoPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecargasPrepagoPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecargasPrepagoPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentasTotalizadasPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentasTotalizadasPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasTotalizadasPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasTotalizadasPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentasCanastillaPorTurno(ByVal idTurno As Int32, ByVal idFormaPago As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentasCanastillaPorTurno(idTurno, idFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaPorTurno", "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaPorTurno", "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentasCanastillaPorTurno(ByVal idTurno As Int32, ByVal idFormaPago As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarVentasCanastillaPorTurno(idTurno, idFormaPago, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaPorTurno", "IdEstacion: " & idEstacion & "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasCanastillaPorTurnoTrabajo(ByVal idTurno As Int32, ByVal idFormaPago As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentasCanastillaPorTurnoTrabajo(idTurno, idFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaPorTurnoTrabajo", "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaPorTurnoTrabajo", "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentasCanastillaPorTurnoTrabajo(ByVal idTurno As Int32, ByVal idFormaPago As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarVentasCanastillaPorTurnoTrabajo(idTurno, idFormaPago, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaPorTurnoTrabajo", "IdEstacion: " & idEstacion & "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaPorTurnoTrabajo", "IdEstacion: " & idEstacion & "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNotaCreditoPorConsecutivo(ByVal consecutivo As Int32) As Int32
        Try
            Return ODatos.RecuperarNotaCreditoPorConsecutivo(consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNotaCreditoPorConsecutivo", "Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNotaCreditoPorConsecutivo", "Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNotaCreditoPorConsecutivoTerpel(ByVal prefijo As String, ByVal consecutivo As Int32) As Int32
        Try
            Return ODatos.RecuperarNotaCreditoPorConsecutivoTerpel(prefijo, consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNotaCreditoPorConsecutivoTerpel", "Prefijo: " & prefijo & ", Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNotaCreditoPorConsecutivoTerpel", "Prefijo: " & prefijo & ", Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNotaCredito(ByVal factura As Int32, Optional ByVal EsTerpel As Boolean = False) As IDataReader
        Try
            Return ODatos.RecuperarNotaCredito(factura, EsTerpel)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNotaCredito", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNotaCredito", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarNotaCredito(ByVal factura As Int32, ByVal idEstacion As Int16, Optional ByVal EsTerpel As Boolean = False) As IDataReader
        Try
            Return ODatos.RecuperarNotaCredito(factura, EsTerpel, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNotaCredito", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNotaCredito", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaInvLiquido(ByVal factura As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFacturaInvLiquido(factura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaInvLiquido", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaInvLiquido", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaAnulacionCanastilla(ByVal IdDocumento As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFacturaAnulacionCanastilla(IdDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaAnulacionCanastilla", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaAnulacionCanastilla", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaInvLiquido(ByVal factura As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarFacturaInvLiquido(factura, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaInvLiquido", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaInvLiquido", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarReciboCanastilla(ByVal IdVenta As Int32) As IDataReader
        Try
            Return ODatos.RecuperarReciboCanastilla(IdVenta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboCanastilla", "Factura: " & IdVenta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboCanastilla", "Factura: " & IdVenta, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarReciboCanastilla(ByVal IdVenta As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarReciboCanastilla(IdVenta, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboCanastilla", "IdEstacion: " & idEstacion & "Factura: " & IdVenta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboCanastilla", "IdEstacion: " & idEstacion & "Factura: " & IdVenta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaParaImpresion(ByVal factura As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFacturaParaImpresion(factura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaParaImpresion", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaParaImpresion", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFacturaParaImpresion(ByVal factura As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarFacturaParaImpresion(factura, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaParaImpresion", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaParaImpresion", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPredeterminacionDescuentoCredito(ByVal precioActual As Decimal, ByVal valorAutorizado As Decimal, ByVal valorPredeterminado As Decimal, ByVal tipoPredeterminacion As Integer, ByVal tipoManejo As Int32, ByVal porcentajeDescuento As Decimal, ByVal valorFijoDescuento As Decimal) As IDataReader
        Try
            Return ODatos.RecuperarPredeterminacionDescuentoCredito(precioActual, valorAutorizado, valorPredeterminado, tipoPredeterminacion, tipoManejo, porcentajeDescuento, valorFijoDescuento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoCredito", "precioActual: " & precioActual & ", valorAutorizado: " & valorAutorizado & ", valorPredeterminado: " & valorPredeterminado & ", tipoPredeterminacion: " & tipoPredeterminacion & ", tipoManejo: " & tipoManejo & ", porcentajeDescuento: " & porcentajeDescuento & ", valorFijoDescuento: " & valorFijoDescuento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoCredito", "precioActual: " & precioActual & ", valorAutorizado: " & valorAutorizado & ", valorPredeterminado: " & valorPredeterminado & ", tipoPredeterminacion: " & tipoPredeterminacion & ", tipoManejo: " & tipoManejo & ", porcentajeDescuento: " & porcentajeDescuento & ", valorFijoDescuento: " & valorFijoDescuento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPredeterminacionDescuentoIsla(ByVal placa As String, ByVal rom As String, ByVal precio As Decimal, ByVal valor As Decimal, ByVal tipo As Integer, ByVal idProducto As Integer, ByVal idcara As Byte, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarPredeterminacionDescuentoIsla(placa, rom, precio, valor, tipo, idProducto, idcara)
            Else
                Return ODatos.RecuperarPredeterminacionDescuentoIsla(placa, rom, precio, valor, tipo, idProducto, idcara, idEstacion)
            End If



        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoIsla", "Placa: " & placa & ", ROM: " & rom & ", Precio: " & precio & ", Valor: " & valor & ", Tipo: " & tipo & ", IdProducto: " & idProducto, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoIsla", "IdEstacion: " & idEstacion & "Placa: " & placa & ", ROM: " & rom & ", Precio: " & precio & ", Valor: " & valor & ", Tipo: " & tipo & ", IdProducto: " & idProducto, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoIsla", "Placa: " & placa & ", ROM: " & rom & ", Precio: " & precio & ", Valor: " & valor & ", Tipo: " & tipo & ", IdProducto: " & idProducto, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoIsla", "IdEstacion: " & idEstacion & "Placa: " & placa & ", ROM: " & rom & ", Precio: " & precio & ", Valor: " & valor & ", Tipo: " & tipo & ", IdProducto: " & idProducto, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarPredeterminacionClientePaso(ByVal idManguera As Int16, ByVal idProducto As Int32, ByVal valor As Decimal) As IDataReader
        Try
            Return ODatos.RecuperarPredeterminacionClientePaso(idManguera, idProducto, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionClientePaso", "idManguera: " & idManguera & ", idProducto: " & idProducto & ", Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionClientePaso", "idManguera: " & idManguera & ", idProducto: " & idProducto & ", Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarPredeterminacionClientePaso(ByVal idManguera As Int16, ByVal idProducto As Int32, ByVal valor As Decimal, ByVal IdEstacion As Integer) As IDataReader
        Try
            Return ODatos.RecuperarPredeterminacionClientePaso(idManguera, idProducto, valor, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionClientePaso", "idManguera: " & idManguera & ", idProducto: " & idProducto & ", Valor: " & valor & ", IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionClientePaso", "idManguera: " & idManguera & ", idProducto: " & idProducto & ", Valor: " & valor & ", IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarPredeterminacionClienteIdentificado(ByVal idCara As Int16, ByVal idProducto As Int32, ByVal valor As Decimal, ByVal precio As Decimal, Optional ByVal IdEstacion As Int16 = 0) As IDataReader
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarPredeterminacionClienteIdentificado(idCara, idProducto, valor, precio)
            Else
                Return ODatos.RecuperarPredeterminacionClienteIdentificado(idCara, idProducto, valor, precio, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarPredeterminacionClienteIdentificado", "idCara: " & idCara & ", idProducto: " & idProducto & ", Valor: " & valor & ", Precio: " & precio, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarPredeterminacionClienteIdentificado", "IdEstacion: " & IdEstacion & "idCara: " & idCara & ", idProducto: " & idProducto & ", Valor: " & valor & ", Precio: " & precio, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarPredeterminacionClienteIdentificado", "idCara: " & idCara & ", idProducto: " & idProducto & ", Valor: " & valor & ", Precio: " & precio, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarPredeterminacionClienteIdentificado", "IdEstacion: " & IdEstacion & "idCara: " & idCara & ", idProducto: " & idProducto & ", Valor: " & valor & ", Precio: " & precio, "FallaStoredProcedure")
            End If

            Throw
        End Try
    End Function

    Public Function RecuperarFacturaPorConsecutivo(ByVal consecutivo As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFacturaPorConsecutivo(consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaPorConsecutivo", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaPorConsecutivo", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaPorId(ByVal idFactura As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFacturaPorId(idFactura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaPorId", "Factura: " & idFactura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaPorId", "Factura: " & idFactura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaCanastillaPorId(ByVal recibo As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentaCanastillaPorId(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaCanastillaPorId", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaCanastillaPorId", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaPorNotaCreditoTerpel(ByVal nota As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFacturaPorNotaCreditoTerpel(nota)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaPorNotaCreditoTerpel", "Nota Credito: " & nota, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaPorNotaCreditoTerpel", "Nota Credito: " & nota, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaPorNotaCredito(ByVal nota As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFacturaPorNotaCredito(nota)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaPorNotaCredito", "Nota Credito: " & nota, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaPorNotaCredito", "Nota Credito: " & nota, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboCanastillaDetalle(ByVal IdVenta As Int32) As IDataReader
        Try
            Return ODatos.RecuperarReciboCanastillaDetalle(IdVenta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboCanastillaDetalle", "IdVenta: " & IdVenta.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboCanastillaDetalle", "IdVenta: " & IdVenta.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarReciboCanastillaDetalle(ByVal IdVenta As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarReciboCanastillaDetalle(IdVenta, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboCanastillaDetalle", "IdEstacion: " & idEstacion & "IdVenta: " & IdVenta.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboCanastillaDetalle", "IdEstacion: " & idEstacion & "IdVenta: " & IdVenta.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaDetalle(ByVal factura As Int32, Optional ByVal EsTerpel As Boolean = False) As IDataReader
        Try
            Return ODatos.RecuperarFacturaDetalle(factura, EsTerpel)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalle", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalle", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFacturaDetalle(ByVal factura As Int32, ByVal idEstacion As Int16, Optional ByVal EsTerpel As Boolean = False) As IDataReader
        Try
            Return ODatos.RecuperarFacturaDetalle(factura, EsTerpel, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalle", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalle", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoFacturaInvLiquido(ByVal factura As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoFacturaInvLiquido(factura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoFacturaInvLiquido", "factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoFacturaInvLiquido", "factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaDetalleInvLiquido(ByVal factura As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFacturaDetalleInvLiquido(factura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalle", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalle", "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFacturaDetalleInvLiquido(ByVal factura As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarFacturaDetalleInvLiquido(factura, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalle", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalle", "IdEstacion: " & idEstacion & "Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaDetallePrepago(ByVal consecutivo As Int32) As DataSet
        Try
            Return ODatos.RecuperarFacturaDetallePrepago(consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaDetallePrepago", "Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaDetallePrepago", "Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaDetalleTarjeta(ByVal recibo As Int32) As DataSet
        Try
            Return ODatos.RecuperarVentaDetalleTarjeta(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaDetalleTarjeta", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaDetalleTarjeta", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaDetalleNoPrepago(ByVal recibo As Int32) As DataSet
        Try
            Return ODatos.RecuperarVentaDetalleNoPrepago(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaDetalleNoPrepago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaDetalleNoPrepago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaDetalleTarjeta(ByVal consecutivo As Int32) As DataSet
        Try
            Return ODatos.RecuperarFacturaDetalleTarjeta(consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalleTarjeta", "Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalleTarjeta", "Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturaDetalleNoPrepago(ByVal consecutivo As Int32) As DataSet
        Try
            Return ODatos.RecuperarFacturaDetalleNoPrepago(consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalleNoPrepago", "Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaDetalleNoPrepago", "Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasPorTurnoSurtidor(ByVal idTurno As Int32, ByVal idSurtidor As Int32, ByVal idFormaPago As Int32, ByVal producto As Int32, ByVal Mostrar As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarVentasPorTurnoSurtidor(idTurno, idSurtidor, idFormaPago, producto, Mostrar)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoSurtidor", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdFormaPago: " & idFormaPago & " , Producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoSurtidor", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdFormaPago: " & idFormaPago & " , Producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasPorTurnoSurtidor(ByVal idTurno As Int32, ByVal idSurtidor As Int32, ByVal idFormaPago As Int32, ByVal producto As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentasPorTurnoSurtidor(idTurno, idSurtidor, idFormaPago, producto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoSurtidor", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdFormaPago: " & idFormaPago & " , Producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoSurtidor", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdFormaPago: " & idFormaPago & " , Producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentasPorTurnoSurtidor(ByVal idTurno As Int32, ByVal idSurtidor As Int32, ByVal idFormaPago As Int32, ByVal producto As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarVentasPorTurnoSurtidor(idTurno, idSurtidor, idFormaPago, producto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoSurtidor", "IdEstacion: " & idEstacion & "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdFormaPago: " & idFormaPago & " , Producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoSurtidor", "IdEstacion: " & idEstacion & "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdFormaPago: " & idFormaPago & " , Producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarVentasPorTurnoEmpleadoSurtidor(ByVal idTurno As Int32, ByVal idSurtidor As Int32, ByVal idFormaPago As Int32, ByVal producto As Int32, ByVal IdEmpleado As Integer) As IDataReader
        Try
            Return ODatos.RecuperarVentasPorTurnoEmpleadoSurtidor(idTurno, idSurtidor, idFormaPago, producto, IdEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoEmpleadoSurtidor", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdFormaPago: " & idFormaPago & " , Producto: " & producto & "IdEmpleado" & IdEmpleado.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoEmpleadoSurtidor", "idTurno: " & idTurno & " , IdSurtidor: " & idSurtidor & " , IdFormaPago: " & idFormaPago & " , Producto: " & producto & "IdEmpleado" & IdEmpleado.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasPorTurnoDetallado(ByVal idTurno As Int32, ByVal idFormaPago As Int32) As Decimal
        Try
            Return ODatos.RecuperarVentasPorTurnoDetallado(idTurno, idFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoDetallado", "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoDetallado", "idTurno: " & idTurno & " , IdFormaPago: " & idFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaImpuesto(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarVentaImpuesto(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaImpuesto", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaImpuesto", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaDocumento(ByVal recibo As Int64, ByVal documento As Int64) As IDataReader
        Try
            Return ODatos.RecuperarVentaDocumento(recibo, documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaDocumento", "Recibo: " & recibo & " , Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaDocumento", "Recibo: " & recibo & " , Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentaANH(ByVal recibo As Int64) As String
        Try
            Return ODatos.RecuperarVentaANH(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaANH", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaANH", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarVenta(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarVenta(recibo, esVentaRegistrada)
            Else
                Return ODatos.RecuperarVenta(recibo, esVentaRegistrada, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarVenta", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarVenta", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarVentaJSON(ByVal recibo As Int64) As String
        Try
            Return ODatos.RecuperarVentaJSON(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaJSON", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaJSON", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ValidarAutorizacionesVentasFlotaTerpelInactivas()
        Try
            ODatos.ValidarAutorizacionesVentasFlotaTerpelInactivas()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarAutorizacionesVentasFlotaTerpelInactivas", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarAutorizacionesVentasFlotaTerpelInactivas", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function RecuperarImporteCreditoFiscalPorRecibo(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarImporteCreditoFiscalPorRecibo(recibo)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImporteCreditoFiscalPorRecibo", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaPrepago(ByVal recibo As Int64, Escopia As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarVentaPrepago(recibo, Escopia)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaPrepago", "Recibo: " & recibo & "EsCopia: " & Escopia.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaPrepago", "Recibo: " & recibo & "EsCopia: " & Escopia.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentaComunicador(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As IDataReader
        Try
            Return ODatos.RecuperarVentaComunicador(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaComunicador", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaComunicador", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCreditosVenta(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarCreditosVenta(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditosVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditosVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecaudosFinanciera(ByVal IdTurno As Int64) As IDataReader
        Try
            Return ODatos.RecuperarRecaudosFinanciera(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudosFinanciera", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudosFinanciera", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaMexico(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarVentaMexico(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarValorPorRecibo(ByVal recibo As Int64) As Double
        Try
            Return ODatos.RecuperarValorPorRecibo(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorPorRecibo", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorPorRecibo", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarReciboModficadoCheque(ByVal Cara As Int32) As Boolean
        Try
            Return ODatos.ValidarReciboModficadoCheque(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarReciboModficadoCheque", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarReciboModficadoCheque", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoReciboCanastilla(ByVal idVentaCanastilla As Integer) As IDataReader
        Try
            Return ODatos.RecuperarUltimoReciboCanastilla(idVentaCanastilla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCanastilla", "IdVentaCanastilla: " & idVentaCanastilla, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCanastilla", "IdVentaCanastilla: " & idVentaCanastilla, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoIdVentaCanastilla() As String
        Try
            Return ODatos.RecuperarUltimoIdVentaCanastilla()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoIdVentaCanastilla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoIdVentaCanastilla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarFacturaTerpel(ByVal prefijo As String, ByVal consecutivo As Integer) As Boolean
        Try
            Return ODatos.ValidarFacturaTerpel(prefijo, consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarFacturaTerpel", "Prefijo: " & prefijo & ", Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarFacturaTerpel", "Prefijo: " & prefijo & ", Consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarGUID(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarGUID(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarGUID", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarGUID", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarGUIDCanastilla(ByVal recibo As Int32) As IDataReader
        Try
            Return ODatos.RecuperarGUIDCanastilla(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarGUIDCanastilla", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarGUIDCanastilla", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarGUIDVenta(ByVal recibo As Int64, ByVal GUIDVenta As String)
        Try
            ODatos.ActualizarGUIDVenta(recibo, GUIDVenta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarGUIDVenta", "Recibo: " & recibo & " , GUIDVenta: " & GUIDVenta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarGUIDVenta", "Recibo: " & recibo & " , GUIDVenta: " & GUIDVenta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub VentaModificada(ByVal recibo As Int64)
        Try
            ODatos.VentaModificada(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "VentaModificada", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "VentaModificada", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarFormaPagoVenta(ByVal recibo As Int64)
        Try
            ODatos.ActualizarFormaPagoVenta(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarFormaPagoVentaGas(ByVal recibo As Int64)
        Try
            ODatos.ActualizarFormaPagoVentaGas(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarFormaPagoVentaCanastilla(ByVal recibo As Int64)
        Try
            ODatos.ActualizarFormaPagoVentaCanastilla(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVentaCanastilla", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVentaCanastilla", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarFormasPagoVenta(ByVal recibo As Int64)
        Try
            ODatos.EliminarFormasPagoVenta(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarFormasPagoVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarFormasPagoVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarInformacionPago(ByVal pago As Int32) As InformacionPago
        Try
            Return ODatos.RecuperarInformacionPago(pago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionPago", "PAGO: " & pago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionPago", "PAGO: " & pago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionPagoSRE(ByVal pago As Int32) As InformacionPago
        Try
            Return ODatos.RecuperarInformacionPagoSRE(pago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionPagoSRE", "PAGO: " & pago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionPagoSRE", "PAGO: " & pago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasModificadas() As DataTable
        Try
            Return ODatos.RecuperarVentasModificadas()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasModificadas", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasModificadas", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasModificadas(ByVal CDC As Int32) As DataTable
        Try
            Return ODatos.RecuperarVentasModificadas(CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasModificadas", "CDC: " & CDC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasModificadas", "CDC: " & CDC, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasCanastillaModificadas(ByVal CDC As Int32) As DataTable
        Try
            Return ODatos.RecuperarVentasCanastillaModificadas(CDC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaModificadas", "CDC: " & CDC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaModificadas", "CDC: " & CDC, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaModificada(ByVal recibo As Int64) As DataTable
        Try
            Return ODatos.RecuperarVentaModificada(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasModificadas", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasModificadas", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaFormaPago(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarVentaFormaPago(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaCanastillaFormaPago(ByVal recibo As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentaCanastillaFormaPago(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaCanastillaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaCanastillaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVenta(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVenta(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVenta", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVenta", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVentaComunicadorTerpel(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVentaComunicadorTerpel(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaComunicadorTerpel", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaComunicadorTerpel", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVentaGasCaribe(ByVal recibo As Int64) As VentaGasCaribe
        Try
            Return ODatos.RecuperarInformacionVentaGasCaribe(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaGasCaribe", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaGasCaribe", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVentaFuelStation(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVentaFuelStation(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaFuelStation", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaFuelStation", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVentaPeruCRMStation(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVentaPeruCRMStation(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaPeruCRMStation", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaPeruCRMStation", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarInformacionVentaCRMStationChile(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVentaCRMStationChile(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaCRMStationChile", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaCRMStationChile", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVentaCRMStationBolivia(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVentaCRMStationBolivia(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaCRMStationBolivia", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaCRMStationBolivia", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarinformaciondeCreditoChile(ByVal recibo As Int64) As InformacionRecaudoChile
        Try
            Return ODatos.RecuperarinformaciondeCreditoChile(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarinformaciondeCreditoChile", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarinformaciondeCreditoChile", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCupon(ByVal recibo As Long) As Cupon
        Try
            Return ODatos.RecuperarCupon(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCupon", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCupon", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarIdProductoVale(ByVal NroVale As String) As Integer
        Try
            Return ODatos.RecuperarIdProductoVale(CStr(NroVale))
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdProductoVale", "NroVale: " & NroVale, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdProductoVale", "NroVale: " & NroVale, "FallaStoredProcedure")
            Throw
        End Try


    End Function

    Public Function RecuperarValorVale(ByVal NroVale As String) As Decimal
        Try
            Return ODatos.RecuperarValorVale(CStr(NroVale))
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorVale", "NroVale: " & NroVale, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorVale", "NroVale: " & NroVale, "FallaStoredProcedure")
            Throw
        End Try


    End Function

    Public Function RecuperarInformacionVentaGazel(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVentaGazel(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaGazel", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaGazel", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionComunicadorVentaPeru(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionComunicadorVentaPeru(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionComunicadorVentaPeru", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionComunicadorVentaPeru", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVentaPeru(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVentaPeru(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaPeru", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaPeru", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVentaIG(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVentaIG(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaIG", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaIG", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVentaFidelizada(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As InformacionVentaFidelizada
        Try
            Return ODatos.RecuperarInformacionVentaFidelizada(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaFidelizada", "recibo: " & recibo & " EsVentaRegistrada: " & esVentaRegistrada, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaFidelizada", "recibo: " & recibo & " EsVentaRegistrada: " & esVentaRegistrada, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarInformacionVentaFidelizadaCanastilla(ByVal recibo As Int64) As InformacionVentaFidelizadaCanastilla
        Try
            Return ODatos.RecuperarInformacionVentaFidelizadaCanastilla(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaFidelizadaCanastilla", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaFidelizadaCanastilla", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionRedencionBono(ByVal IdRedencionBono As Int64) As InformacionRedencionBono
        Try
            Return ODatos.RecuperarInformacionRedencionBono(IdRedencionBono)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionRedencionBono", "IdRedencionBono: " & IdRedencionBono, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionRedencionBono", "IdRedencionBono: " & IdRedencionBono, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionAnulacionRedencionBono(ByVal IdAnulacionRedencionBono As Int64) As InformacionRedencionBono
        Try
            Return ODatos.RecuperarInformacionAnulacionRedencionBono(IdAnulacionRedencionBono)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionAnulacionRedencionBono", "IdAnulacionRedencionBono: " & IdAnulacionRedencionBono, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionAnulacionRedencionBono", "IdAnulacionRedencionBono: " & IdAnulacionRedencionBono, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarIdreversion(ByVal recibo As Int64) As Int32
        Try
            Return ODatos.RecuperarIdreversion(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdreversion", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdreversion", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarIdreversion(ByVal recibo As Int64, ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.RecuperarIdreversion(recibo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdreversion", "IdEstacion: " & idEstacion & "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdreversion", "IdEstacion: " & idEstacion & "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReversion(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarReversion(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReversion", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReversion", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarReversion(ByVal recibo As Int64, ByVal IdEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarReversion(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReversion", "recibo: " & recibo & "IdEstacion: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReversion", "recibo: " & recibo & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarInformacionLecturasPorTurno(ByVal turno As Int32) As InformacionLectura()
        Try
            Return ODatos.RecuperarInformacionLecturasPorTurno(turno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionLecturasPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionLecturasPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionReversion(ByVal recibo As Int64) As InformacionReversion
        Try
            Return ODatos.RecuperarInformacionReversion(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionReversion", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionReversion", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLecturasPorTurno(ByVal turno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarLecturasPorTurno(turno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionMediosPagoAbono(ByVal Pago As Int32) As DataSet
        Try
            Return ODatos.RecuperarInformacionMediosPagoAbono(Pago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionMediosPagoAbono", "Pago: " & Pago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionMediosPagoAbono", "Pago: " & Pago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarCredenciales(ByVal empleado As String, ByVal clave As String) As Boolean
        Try
            Return ODatos.ValidarCredenciales(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredenciales", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredenciales", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ValidarCredencialesTurnoAbierto(ByVal empleado As String, ByVal clave As String)
        Try
            ODatos.ValidarCredencialesTurnoAbierto(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesTurnoAbierto", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesTurnoAbierto", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ValidarCredenciales(ByVal empleado As String, ByVal clave As String, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ValidarCredenciales(empleado, clave, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredenciales", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredenciales", "IdEstacion: " & idEstacion & "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarCredencialesConfigurador(ByVal empleado As String, ByVal clave As String) As Int32
        Try
            Return ODatos.ValidarCredencialesConfigurador(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesConfigurador", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesConfigurador", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ValidarEmpleadoAutoservicio(ByVal empleado As String, ByVal clave As String)
        Try
            ODatos.ValidarEmpleadoAutoservicio(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarEmpleadoAutoservicio", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarEmpleadoAutoservicio", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ValidarCredencialesporEstado(ByVal empleado As String, ByVal clave As String) As Boolean
        Try
            Return ODatos.ValidarCredencialesporEstado(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesporEstado", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesporEstado", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnosPorFecha(ByVal fecha As String) As DataSet
        Try
            Return ODatos.RecuperarTurnosPorFecha(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosPorFecha", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosPorFecha", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnosPorFechaTerpel(ByVal fecha As String) As DataSet
        Try
            Return ODatos.RecuperarTurnosPorFechaTerpel(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosPorFechaTerpel", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosPorFechaTerpel", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTurnosPorFechaTerpel(ByVal fecha As String, ByVal idEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarTurnosPorFechaTerpel(fecha, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosPorFechaTerpel", "IdEstacion: " & idEstacion & "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosPorFechaTerpel", "IdEstacion: " & idEstacion & "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnosPorFechaFuelStation(ByVal fecha As String) As DataSet
        Try
            Return ODatos.RecuperarTurnosPorFechaFuelStation(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosPorFechaFuelStation", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosPorFechaFuelStation", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnosAbiertosTerpel() As IDataReader
        Try
            Return ODatos.RecuperarTurnosAbiertosTerpel()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosTerpel", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosTerpel", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTurnosAbiertosTerpel(ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTurnosAbiertosTerpel(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosTerpel", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosTerpel", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarTurnosAbiertosPendientesTerpel() As IDataReader
        Try
            Return ODatos.RecuperarTurnosAbiertosPendientesTerpel()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosPendientesTerpel", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosPendientesTerpel", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTurnosAbiertosPendientesTerpel(ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTurnosAbiertosPendientesTerpel(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosPendientesTerpel", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosPendientesTerpel", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnosAbiertos() As IDataReader
        Try
            Return ODatos.RecuperarTurnosAbiertos()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertos", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertos", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnosAbiertosPendientes() As IDataReader
        Try
            Return ODatos.RecuperarTurnosAbiertosPendientes()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosPendientes", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosAbiertosPendientes", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarVentaParcialPorTurno(IdTurno As Integer) As Boolean
        Try
            Return ODatos.ValidarVentaParcialPorTurno(IdTurno)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVentaParcialPorTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVentaParcialPorTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Function ValidarCierreDia(ByVal fecha As String) As Boolean
        Try
            Return ODatos.ValidarCierreDia(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreDia", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreDia", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarCierreDiaGAZEL(ByVal fecha As DateTime) As Boolean
        Try
            Return ODatos.ValidarCierreDiaGAZEL(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreDia", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreDia", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarCierreDia(ByVal fecha As String, ByVal esMRCombustible As Boolean) As Boolean
        Try
            Return ODatos.ValidarCierreDia(fecha, esMRCombustible)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreDia", "Fecha: " & fecha & " , EsMR: " & esMRCombustible, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreDia", "Fecha: " & fecha & " , EsMR: " & esMRCombustible, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarCierreDia(ByVal fecha As String, ByVal esMRCombustible As Boolean, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ValidarCierreDia(fecha, esMRCombustible, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreDia", "IdEstacion: " & idEstacion & "Fecha: " & fecha & " , EsMR: " & esMRCombustible, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreDia", "IdEstacion: " & idEstacion & "Fecha: " & fecha & " , EsMR: " & esMRCombustible, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarCierreDiaCombustible(ByVal fecha As DateTime) As Boolean
        Try
            Return ODatos.ValidarCierreDiaCombustible(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreDiaCombustible", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreDiaCombustible", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarCierreDiaCombustible(ByVal fecha As DateTime, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ValidarCierreDiaCombustible(fecha, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreDiaCombustible", "IdEstacion: " & idEstacion & "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreDiaCombustible", "IdEstacion: " & idEstacion & "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarCierreDiaDia(ByVal fecha As String) As Boolean
        Try
            Return ODatos.ValidarCierreDiaDia(fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreDiaDia", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreDiaDia", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarCierreDiaDia(ByVal fecha As String, ByVal esMRCombsutible As Boolean) As Boolean
        Try
            Return ODatos.ValidarCierreDiaDia(fecha, esMRCombsutible)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreDiaDia", "Fecha: " & fecha & "MR: " & esMRCombsutible, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreDiaDia", "Fecha: " & fecha & "MR: " & esMRCombsutible, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarCierreDiaDia(ByVal fecha As String, ByVal esMRCombsutible As Boolean, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ValidarCierreDiaDia(fecha, esMRCombsutible, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCierreDiaDia", "IdEstacion: " & idEstacion & "Fecha: " & fecha & "MR: " & esMRCombsutible, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCierreDiaDia", "IdEstacion: " & idEstacion & "Fecha: " & fecha & "MR: " & esMRCombsutible, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarVentaFormaPago(ByVal recibo As Int64) As Boolean
        Try
            Return ODatos.ValidarVentaFormaPago(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVentaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVentaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLecturasManguerasPorTurno(ByVal turno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarLecturasManguerasPorTurno(turno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasManguerasPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasManguerasPorTurno", "Turno: " & turno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLecturasManguerasPorTurno(ByVal turno As Int32, ByVal idSurtidor As Int32) As IDataReader
        Try
            Return ODatos.RecuperarLecturasManguerasPorTurno(turno, idSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasManguerasPorTurno", "Turno: " & turno & " , Surtidor: " & idSurtidor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasManguerasPorTurno", "Turno: " & turno & " , Surtidor: " & idSurtidor, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarLecturasManguerasPorTurno(ByVal turno As Int32, ByVal idSurtidor As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarLecturasManguerasPorTurno(turno, idSurtidor, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasManguerasPorTurno", "IdEstacion: " & idEstacion & "Turno: " & turno & " , Surtidor: " & idSurtidor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasManguerasPorTurno", "IdEstacion: " & idEstacion & "Turno: " & turno & " , Surtidor: " & idSurtidor, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarUltimoReciboCaraAnulado(ByVal cara As Byte) As String
        Try
            ODatos.RecuperarUltimoReciboCaraAnulado(cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCaraAnulado", "cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCaraAnulado", "cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNuevoDocumento(ByVal recibo As Double) As String
        Try
            Return ODatos.RecuperarNuevoDocumento(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNuevoDocumento", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNuevoDocumento", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoReciboCara(ByVal cara As String) As Int64
        Try
            Return ODatos.RecuperarUltimoReciboCara(cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCara", "cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCara", "cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoReciboCara(ByVal cara As Byte) As Int64
        Try
            Return ODatos.RecuperarUltimoReciboCara(cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCara", "cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCara", "cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoReciboCaraPeru(ByVal cara As Byte, Optional ByVal EsCredito As Boolean = False) As Int64
        Try
            Return ODatos.RecuperarUltimoReciboCaraPeru(cara, EsCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCaraPeru", "cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCaraPeru", "cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoReciboCara(ByVal cara As Byte, ByVal idEstacion As Int16) As Int64
        Try
            Return ODatos.RecuperarUltimoReciboCara(cara, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCara", "IdEstacion: " & idEstacion & "cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboCara", "IdEstacion: " & idEstacion & "cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoRecibo() As Int64
        Try
            Return ODatos.RecuperarUltimoRecibo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoRecibo", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoRecibo", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoReciboFlotaTerpel() As Int64
        Try
            Return ODatos.RecuperarUltimoReciboFlotaTerpel()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboFlotaTerpel", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboFlotaTerpel", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoReciboGasStation() As Int64
        Try
            Return ODatos.RecuperarUltimoReciboGasStation()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboGasStation", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoReciboGasStation", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarUltimaLecturaGasStation() As Int32
        Try
            Return ODatos.RecuperarUltimaLecturaGasStation()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaLecturaGasStation", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaLEcturaGasStation", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarUltimaAnulacionPgn() As Int64
        Try
            Return ODatos.RecuperarUltimaAnulacionPgn()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaAnulacionPgn", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaAnulacionPgn", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarReversion(ByVal empleado As String, ByVal clave As String, ByVal recibo As Int64)
        Try
            If ODatos.ValidarCredenciales(empleado, clave) Then
                ODatos.InsertarReversion(recibo, empleado)
            Else
                Throw New GasolutionsException("Credenciales Invalidas")
            End If
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarReversion", "EMPLEADO: " & empleado & " , CLAVE: " & clave & " , RECIBO: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarReversion", "EMPLEADO: " & empleado & " , CLAVE: " & clave & " , RECIBO: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub







    Public Sub InsertarReversion(ByVal empleado As String, ByVal clave As String, ByVal recibo As Int64, ByVal IdEstacion As Int16)
        Try
            If ODatos.ValidarCredenciales(empleado, clave, IdEstacion) Then
                ODatos.InsertarReversion(recibo, empleado, IdEstacion)
            Else
                Throw New GasolutionsException("Credenciales Invalidas")
            End If
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarReversion", "EMPLEADO: " & empleado & " , CLAVE: " & clave & " , RECIBO: " & recibo & " , IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarReversion", "EMPLEADO: " & empleado & " , CLAVE: " & clave & " , RECIBO: " & recibo & " , IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarTurnoPorSurtidor(ByVal turno As Byte, ByVal surtidor As Byte, ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarTurnoPorSurtidor(turno, surtidor, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoPorSurtidor", "turno: " & turno & " , surtidor: " & surtidor & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoPorSurtidor", "turno: " & turno & " , surtidor: " & surtidor & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTurnoPorSurtidor(ByVal turno As Byte, ByVal surtidor As Byte, ByVal fecha As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTurnoPorSurtidor(turno, surtidor, fecha, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoPorSurtidor", "IdEstacion: " & idEstacion & "turno: " & turno & " , surtidor: " & surtidor & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoPorSurtidor", "IdEstacion: " & idEstacion & "turno: " & turno & " , surtidor: " & surtidor & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarTurnoPorEmpleadoFecha(ByVal cedula As String, ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarTurnoPorEmpleadoFecha(cedula, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoPorEmpleadoFecha", "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoPorEmpleadoFecha", "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoFrecuenciaPorEmpleadoFecha(ByVal cedula As String, ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarTurnoFrecuenciaPorEmpleadoFecha(cedula, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoFrecuenciaPorEmpleadoFecha", "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoFrecuenciaPorEmpleadoFecha", "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoPorEmpleadoFecha(ByVal cedula As String, ByVal fecha As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTurnoPorEmpleadoFecha(cedula, fecha, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoPorEmpleadoFecha", "IdEstacion: " & idEstacion & "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoPorEmpleadoFecha", "IdEstacion: " & idEstacion & "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoTrabajoPorEmpleadoFecha(ByVal cedula As String, ByVal fecha As String) As IDataReader
        Try
            Return ODatos.RecuperarTurnoTrabajoPorEmpleadoFecha(cedula, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajoPorEmpleadoFecha", "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajoPorEmpleadoFecha", "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTurnoTrabajoPorEmpleadoFecha(ByVal cedula As String, ByVal fecha As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTurnoTrabajoPorEmpleadoFecha(cedula, fecha, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajoPorEmpleadoFecha", "IdEstacion: " & idEstacion & "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajoPorEmpleadoFecha", "IdEstacion: " & idEstacion & "cedula: " & cedula & " , fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoTurnoPorEmpleado(ByVal cedula As String, ByVal clave As String) As Int32
        Try
            Return ODatos.RecuperarUltimoTurnoPorEmpleado(cedula, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoPorEmpleado", "cedula: " & cedula & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoPorEmpleado", "cedula: " & cedula & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoTurnoCerrado() As Int32
        Try
            Return ODatos.RecuperarUltimoTurnoCerrado()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoCerrado", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoCerrado", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarUltimoTurnoCerrado(ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.RecuperarUltimoTurnoCerrado(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoCerrado", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoCerrado", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoAbiertoPorEmpleado(ByVal cedula As String) As String
        Try
            Return ODatos.RecuperarTurnoAbiertoPorEmpleado(cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoAbiertoPorEmpleado", "cedula: " & cedula, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoAbiertoPorEmpleado", "cedula: " & cedula, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTurnoAbiertoPorEmpleado(ByVal cedula As String, ByVal idEstacion As Int16) As String
        Try
            Return ODatos.RecuperarTurnoAbiertoPorEmpleado(cedula, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoAbiertoPorEmpleado", "IdEstacion: " & idEstacion & "cedula: " & cedula, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoAbiertoPorEmpleado", "IdEstacion: " & idEstacion & "cedula: " & cedula, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoTrabajoAbiertoPorEmpleado(ByVal cedula As String) As String
        Try
            Return ODatos.RecuperarTurnoTrabajoAbiertoPorEmpleado(cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajoAbiertoPorEmpleado", "cedula: " & cedula, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajoAbiertoPorEmpleado", "cedula: " & cedula, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTurnoTrabajoAbiertoPorEmpleado(ByVal cedula As String, ByVal idEstacion As Int16) As String
        Try
            Return ODatos.RecuperarTurnoTrabajoAbiertoPorEmpleado(cedula, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajoAbiertoPorEmpleado", "IdEstacion: " & idEstacion & "cedula: " & cedula, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajoAbiertoPorEmpleado", "IdEstacion: " & idEstacion & "cedula: " & cedula, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTanquesPorTurno(ByVal cedula As String, ByVal clave As String) As IDataReader
        Try
            Return ODatos.RecuperarTanquesPorTurno(cedula, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesPorTurno", "cedula: " & cedula & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesPorTurno", "cedula: " & cedula & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTanquesCierreAutomatico(ByVal cedula As String, ByVal clave As String) As IDataReader
        Try
            Return ODatos.RecuperarTanquesCierreAutomatico(cedula, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesCierreAutomatico", "cedula: " & cedula & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesCierreAutomatico", "cedula: " & cedula & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarNumeroEnLetras(ByVal Numero As Double) As String
        Try
            Return ODatos.RecuperarNumeroEnLetras(Numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNumeroEnLetras", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNumeroEnLetras", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarTanquesCierreDiaManual(ByVal cedula As String, ByVal clave As String) As IDataReader
        Try
            Return ODatos.RecuperarTanquesCierreDiaManual(cedula, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesCierreDiaManual", "cedula: " & cedula & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesCierreDiaManual", "cedula: " & cedula & " , clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Sub RealizarAjustesPorOperacionTurno(ByVal newId As String, ByVal IdTurno As Int32, ByVal Cedula As String, ByVal idEstacion As Int16)
        Try
            ODatos.RealizarAjustesPorOperacionTurno(newId, IdTurno, Cedula, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RealizarAjustesPorOperacionTurno", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RealizarAjustesPorOperacionTurno", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub RealizarAjustesPorOperacionTurno(ByVal newId As String, ByVal IdTurno As Int32, ByVal Cedula As String)
        Try
            ODatos.RealizarAjustesPorOperacionTurno(newId, IdTurno, Cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RealizarAjustesPorOperacionTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RealizarAjustesPorOperacionTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub RealizarAjustesPorOperacionDia(ByVal newId As String, ByVal Dia As Nullable(Of DateTime), ByVal Cedula As String)
        Try
            ODatos.RealizarAjustesPorOperacionDia(newId, Dia, Cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RealizarAjustesPorOperacionDia", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RealizarAjustesPorOperacionDia", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarStockTurnoHorarioTmp(ByVal newId As String, ByVal CodTanque As String, ByVal idTurno As Int32, ByVal AlturaAgua As Nullable(Of Decimal), ByVal AlturaTanque As Nullable(Of Decimal), ByVal CantidadTanque As Nullable(Of Decimal), ByVal CantidadAgua As Nullable(Of Decimal), ByVal BorrarTemporal As Boolean, ByVal EsAjustePorAlturas As Boolean)
        Try
            ODatos.InsertarStockTurnoHorarioTmp(newId, CodTanque, idTurno, AlturaAgua, AlturaTanque, CantidadTanque, CantidadAgua, BorrarTemporal, EsAjustePorAlturas)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarStockTurnoHorarioTmp", "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarStockTurnoHorarioTmp", "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarStockTurnoHorarioTmp(ByVal newId As String, ByVal CodTanque As String, ByVal idTurno As Int32, ByVal AlturaAgua As Nullable(Of Decimal), ByVal AlturaTanque As Nullable(Of Decimal), ByVal CantidadTanque As Nullable(Of Decimal), ByVal CantidadAgua As Nullable(Of Decimal), ByVal BorrarTemporal As Boolean, ByVal EsAjustePorAlturas As Boolean, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarStockTurnoHorarioTmp(newId, CodTanque, idTurno, AlturaAgua, AlturaTanque, CantidadTanque, CantidadAgua, BorrarTemporal, EsAjustePorAlturas, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarStockTurnoHorarioTmp", "IdEstacion: " & idEstacion & "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarStockTurnoHorarioTmp", "IdEstacion: " & idEstacion & "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarStockCierreDiaTmp(ByVal newId As String, ByVal CodTanque As String, ByVal AlturaAgua As Nullable(Of Decimal), ByVal AlturaTanque As Nullable(Of Decimal), ByVal CantidadTanque As Nullable(Of Decimal), ByVal CantidadAgua As Nullable(Of Decimal), ByVal BorrarTemporal As Boolean, ByVal EsAjustePorAlturas As Boolean)
        Try
            ODatos.InsertarStockCierreDiaTmp(newId, CodTanque, AlturaAgua, AlturaTanque, CantidadTanque, CantidadAgua, BorrarTemporal, EsAjustePorAlturas)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarStockCierreDiaTmp", "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarStockCierreDiaTmp", "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarStockCierreDiaTmp(ByVal newId As String, ByVal CodTanque As String, ByVal AlturaAgua As Nullable(Of Decimal), ByVal AlturaTanque As Nullable(Of Decimal), ByVal CantidadTanque As Nullable(Of Decimal), ByVal CantidadAgua As Nullable(Of Decimal), ByVal BorrarTemporal As Boolean, ByVal EsAjustePorAlturas As Boolean, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarStockCierreDiaTmp(newId, CodTanque, AlturaAgua, AlturaTanque, CantidadTanque, CantidadAgua, BorrarTemporal, EsAjustePorAlturas, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarStockCierreDiaTmp", "IdEstacion: " & idEstacion & "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarStockCierreDiaTmp", "IdEstacion: " & idEstacion & "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurno", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurno", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarAbonosPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarAbonosPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarAbonosPorTurno", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarAbonosPorTurno", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurno", "IdEstacion: " & idEstacion & "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurno", "IdEstacion: " & idEstacion & "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTurnoTrabajo(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTurnoTrabajo(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajo", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajo", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoJSON(ByVal idTurno As Int32) As String
        Try
            Return ODatos.RecuperarTurnoJSON(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoJSON", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoJSON", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarMovimientoTarjetaPrepagoCanastilla(ByVal Tarjeta As String) As IDataReader
        Try
            Return ODatos.RecuperarMovimientoTarjetaPrepagoCanastilla(Tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMovimientoTarjetaPrepagoCanastilla", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMovimientoTarjetaPrepagoCanastilla", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarMovimientoTarjetaPrepago(ByVal Tarjeta As String) As IDataReader
        Try
            Return ODatos.RecuperarMovimientoTarjetaPrepago(Tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMovimientoTarjetaPrepago", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMovimientoTarjetaPrepago", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarDatosTarjetaPrepago(ByVal Tarjeta As String) As IDataReader
        Try
            Return ODatos.RecuperarDatosTarjetaPrepago(Tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosTarjetaPrepago", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosTarjetaPrepago", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarTurnoApoyo(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTurnoApoyo(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoApoyo", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoApoyo", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoTrabajo(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTurnoTrabajo(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajo", "IdEstacion: " & idEstacion & "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoTrabajo", "IdEstacion: " & idEstacion & "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDescuentosPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarDescuentosPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDescuentosPorTurno", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDescuentosPorTurno", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarDescuentosPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarDescuentosPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDescuentosPorTurno", "IdEstacion: " & IdEstacion & "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDescuentosPorTurno", "IdEstacion: " & IdEstacion & "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarSurtidores() As DataSet
        Try
            Return ODatos.RecuperarSurtidores
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarSurtidores(ByVal idEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarSurtidores(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidores", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidores", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSurtidoresColombia() As DataSet
        Try
            Return ODatos.RecuperarSurtidoresColombia
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidoresColombia", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidoresColombia", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarMensajesCapturador() As DataSet
        Try
            'Ejecuta el Procedimiento Almacenado
            Return ODatos.RecuperarMensajesCapturador()
        Catch
            Throw
        End Try

    End Function
    Public Sub EliminarMensajesCapturador()


        Try
            'Ejecuta el Procedimiento Almacenado
            ODatos.EliminarMensajesCapturador()

        Catch
            Throw

        End Try
    End Sub

    Public Function RecuperarCantidadSurtidores() As Int32
        Try
            Return ODatos.RecuperarCantidadSurtidores
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCantidadSurtidores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCantidadSurtidores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCantidadSurtidores(ByVal IdEstacion As Int16) As Int32
        Try
            Return ODatos.RecuperarCantidadSurtidores(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCantidadSurtidores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCantidadSurtidores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarSurtidor(ByVal idSurtidor As Int16, ByVal idProtocolo As Int32)
        Try
            ODatos.ActualizarSurtidor(idSurtidor, idProtocolo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarSurtidor(ByVal idSurtidor As Int16, ByVal idProtocolo As Int32, ByVal ValorTope As Decimal)
        Try
            ODatos.ActualizarSurtidor(idSurtidor, idProtocolo, ValorTope)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    ''Public Sub ActualizarSurtidorFullStation(ByVal idSurtidor As Int16, ByVal idProtocolo As Int32, ByVal idIsla As Int32)
    ''    Try
    ''        ODatos.ActualizarSurtidorFullStation(idSurtidor, idProtocolo, idIsla)
    ''    Catch ex As SqlClient.SqlException
    ''        LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
    ''        Throw 
    ''    Catch ex As System.Exception
    ''        LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
    ''        Throw 
    ''    End Try
    ''End Sub

    Public Sub InsertarIsla(ByVal cantidad As Int32)
        Try
            ODatos.InsertarIsla(cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarIsla", "cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarIsla", "cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarIsla(ByVal cantidad As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarIsla(cantidad, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarIsla", "IdEstacion: " & idEstacion & "cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarIsla", "IdEstacion: " & idEstacion & "cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarIsla(ByVal idIsla As Int16, ByVal idImpresora As Int32, ByVal surtidores As Int32)
        Try
            ODatos.ActualizarIsla(idIsla, idImpresora, surtidores)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarIsla", "IDISLA: " & idIsla & " , IDIMPRESORA: " & idImpresora & " , SURTIDORES: " & surtidores, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarIsla", "IDISLA: " & idIsla & " , IDIMPRESORA: " & idImpresora & " , SURTIDORES: " & surtidores, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarIsla(ByVal idIsla As Int16, ByVal idImpresora As Int32, ByVal surtidores As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.ActualizarIsla(idIsla, idImpresora, surtidores, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarIsla", "IdEstacion: " & idEstacion & "IDISLA: " & idIsla & " , IDIMPRESORA: " & idImpresora & " , SURTIDORES: " & surtidores, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarIsla", "IdEstacion: " & idEstacion & "IDISLA: " & idIsla & " , IDIMPRESORA: " & idImpresora & " , SURTIDORES: " & surtidores, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarCara(ByVal idCara As Int16, ByVal idLector As Int32)
        Try
            ODatos.ActualizarCara(idCara, idLector)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCara", "idCara: " & idCara & " , idLector: " & idLector, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCara", "idCara: " & idCara & " , idLector: " & idLector, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarCara(ByVal idCara As Int16, ByVal idLector As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.ActualizarCara(idCara, idLector)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCara", "IdEstacion: " & idEstacion & "idCara: " & idCara & " , idLector: " & idLector, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCara", "IdEstacion: " & idEstacion & "idCara: " & idCara & " , idLector: " & idLector, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarCara(ByVal idCara As Int16, ByVal idLector As Int32, ByVal Estado As Boolean, ByVal IdSurtidor As Int32, ByVal AliasCara As Int32, Optional ByVal ManejaCincoDigitos As Boolean = False, Optional ManejaPrecioPorCliente As Boolean = False)
        Try
            ODatos.ActualizarCara(idCara, idLector, Estado, IdSurtidor, AliasCara, ManejaCincoDigitos, ManejaPrecioPorCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCara", "idCara: " & idCara & " , idLector: " & idLector, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCara", "idCara: " & idCara & " , idLector: " & idLector, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarCara(ByVal idCara As Int16, ByVal idLector As Int32, ByVal Estado As Boolean, ByVal IdSurtidor As Int32, ByVal AliasCara As Int32, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarCara(idCara, idLector, Estado, IdSurtidor, AliasCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCara", "idCara: " & idCara & " , idLector: " & idLector, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCara", "idCara: " & idCara & " , idLector: " & idLector, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMangueraFullStation(ByVal idManguera As Int32, ByVal idCara As Int32, ByVal idProducto As Int16, ByVal Grado As Int32)
        Try
            ODatos.ActualizarMangueraFullStation(idManguera, idCara, idProducto, Grado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "idManguera: " & idManguera & " , Grado: " & Grado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "idManguera: " & idManguera & " , Grado: " & Grado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMangueraFullStation(ByVal idManguera As Int32, ByVal idCara As Int32, ByVal idProducto As Int16, ByVal Grado As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.ActualizarMangueraFullStation(idManguera, idCara, idProducto, Grado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "IdEstacion: " & idEstacion & "idManguera: " & idManguera & " , Grado: " & Grado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "IdEstacion: " & idEstacion & "idManguera: " & idManguera & " , Grado: " & Grado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMangueraFullStation(ByVal idManguera As Int32, ByVal idCara As Int32, ByVal idProducto As Int16, ByVal Grado As Int32, ByVal idTanque As Nullable(Of Int32))
        Try
            ODatos.ActualizarMangueraFullStation(idManguera, idCara, idProducto, Grado, idTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "idManguera: " & idManguera & " , Grado: " & Grado & " , IdTanque: " & idTanque.Value, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "idManguera: " & idManguera & " , Grado: " & Grado & " , IdTanque: " & idTanque.Value, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMangueraFullStation(ByVal idManguera As Int32, ByVal idCara As Int32, ByVal idProducto As Int16, ByVal Grado As Int32, ByVal idTanque As Nullable(Of Int32), ByVal EsActiva As Boolean)
        Try
            ODatos.ActualizarMangueraFullStation(idManguera, idCara, idProducto, Grado, idTanque, EsActiva)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "idManguera: " & idManguera & " , Grado: " & Grado & " , IdTanque: " & idTanque.Value, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "idManguera: " & idManguera & " , Grado: " & Grado & " , IdTanque: " & idTanque.Value, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMangueraFullStation(ByVal idManguera As Int32, ByVal idCara As Int32, ByVal idProducto As Int16, ByVal Grado As Int32, ByVal idTanque As Nullable(Of Int32), ByVal EsActiva As Boolean, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarMangueraFullStation(idManguera, idCara, idProducto, Grado, idTanque, EsActiva, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "idManguera: " & idManguera & " , Grado: " & Grado & " , IdTanque: " & idTanque.Value, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMangueraFullStation", "idManguera: " & idManguera & " , Grado: " & Grado & " , IdTanque: " & idTanque.Value, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarManguerasFullStation(ByVal cantidad As Int32)
        Try
            ODatos.InsertarMangueraFullStation(cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarIsla", "cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarIsla", "cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarManguerasFullStation(ByVal cantidad As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarMangueraFullStation(cantidad, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarIsla", "IdEstacion: " & idEstacion & "cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarIsla", "IdEstacion: " & idEstacion & "cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarConfiguracion() As DataSet
        Try
            Return ODatos.RecuperarConfiguracion
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConfiguracion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConfiguracion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCantidadIslas() As Int32
        Try
            Return ODatos.RecuperarCantidadIslas
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCantidadIslas", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCantidadIslas", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCantidadIslas(ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.RecuperarCantidadIslas(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCantidadIslas", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCantidadIslas", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpresorasParametrizacion() As DataSet
        Try
            Return ODatos.RecuperarImpresorasParametrizacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoras", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoras", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpresoras() As DataSet
        Try
            Return ODatos.RecuperarImpresoras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoras", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoras", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLeyendasNombreEmpleadoCanastilla() As DataSet
        Try
            Return ODatos.RecuperarLeyendasNombreEmpleadoCanastilla()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLeyendasNombreEmpleadoCanastilla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLeyendasNombreEmpleadoCanastilla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarImpresoras(ByVal IdEstacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarImpresoras(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarImpresoras", "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarImpresoras", "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarProtocolos() As DataSet
        Try
            Return ODatos.RecuperarProtocolos
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProtocolos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProtocolos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMultiplicadoresProtocolo() As DataSet
        Try
            Return ODatos.RecuperarMultiplicadoresProtocolo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMultiplicadoresProtocolo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMultiplicadoresProtocolo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarMultiplicadoresProtocolo(ByVal IdEstacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarMultiplicadoresProtocolo(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMultiplicadoresProtocolo", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMultiplicadoresProtocolo", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRedLector(ByVal rom As String, Optional ByVal IdEstacion As Int16 = 0) As Int32
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarRedLector(rom)
            Else
                Return ODatos.RecuperarRedLector(rom, IdEstacion)
            End If
        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarRedLector", "ROM: " & rom, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarRedLector", "IdEstacion: " & IdEstacion & "ROM: " & rom, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarRedLector", "ROM: " & rom, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarRedLector", "IdEstacion: " & IdEstacion & "ROM: " & rom, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarLectores() As DataSet
        Try
            Return ODatos.RecuperarLectores
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLectores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLectores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarLectores(ByVal idEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarLectores(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLectores", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLectores", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarCaraConsumoInterno(ByVal idCara As Int16) As Integer
        Try
            Return ODatos.ValidarCaraConsumoInterno(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCaraConsumoInterno", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCaraConsumoInterno", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteCara(ByVal idCara As Int16) As Boolean
        Try
            Return ODatos.ExisteCara(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteCara", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteCara", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ExisteCara(ByVal idCara As Int16, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ExisteCara(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteCara", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteCara", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionIdentificador(ByVal cara As Byte) As InformacionChip

        Try
            'Recuperar el lector asociado a la cara
            Dim Lector As String = ODatos.RecuperarLectorPorCara(cara)

            Dim Datos As DS1992
            Dim DatosConfirmacion As DS1992
            Dim iIntentos As Int16 = 0
            Dim blnReintentar As Boolean = True
            Dim oInformacion As InformacionChip
            Dim oInformacionConfirmacion As InformacionChip
            Dim iReintentosConfirmacion As Int16 = 0
            Dim EsTwoFish As Boolean = False
            Dim EsServipunto As Boolean = False
            Dim NumeroIntentos As Int32 = CInt(ODatos.RecuperarParametro("LecturaChipReintentos"))
            Dim Delay As Int32 = CInt(ODatos.RecuperarParametro("LecturaChipDelay"))
            Dim Confirmacion As Boolean = CBool(ODatos.RecuperarParametro("ConfirmarLecturaChip"))

            Try
                While blnReintentar
                    Try
                        Try
                            'Primero intento leer por 2Fish
                            If CBool(ODatos.RecuperarParametro("Suic")) Then
                                Datos = RecuperarDatosBoton(Lector, Delay)
                                DatosConfirmacion = RecuperarDatosBoton(Lector, Delay)

                                Try
                                    'Retorna la informacion luego de la desencripcion
                                    oInformacion = RecuperarInformacion(Datos)
                                    If Confirmacion Then
                                        oInformacionConfirmacion = RecuperarInformacion(DatosConfirmacion)
                                    End If

                                    EsTwoFish = False
                                    EsServipunto = True
                                Catch
                                    Throw
                                End Try
                            Else
                                Throw New Tmex.TmexVersionException
                            End If

                        Catch ex As Tmex.TmexVersionException
                            Try
                                If CBool(ODatos.RecuperarParametro("TwoFish")) Then
                                    oInformacion = RecuperarDatosBotonSuic(Lector, Delay)
                                    If Confirmacion Then
                                        oInformacionConfirmacion = RecuperarDatosBotonSuic(Lector, Delay)
                                    End If
                                    EsTwoFish = True
                                    EsServipunto = False
                                End If
                            Catch ExGasolinaException As System.Exception
                                Try
                                    oInformacion = RecuperarDatosBotonGasolina(Lector, Delay)
                                    If Confirmacion Then
                                        oInformacionConfirmacion = RecuperarDatosBotonGasolina(Lector, Delay)
                                    End If
                                Catch ex2 As System.Exception
                                    Throw
                                End Try
                            End Try
                        Catch ex As System.Exception
                            Try
                                If CBool(ODatos.RecuperarParametro("TwoFish")) Then
                                    oInformacion = RecuperarDatosBotonSuic(Lector, Delay)
                                    If Confirmacion Then
                                        oInformacionConfirmacion = RecuperarDatosBotonSuic(Lector, Delay)
                                    End If
                                    EsTwoFish = True
                                    EsServipunto = False
                                End If
                            Catch ExGasolinaException As System.Exception
                                Try
                                    oInformacion = RecuperarDatosBotonGasolina(Lector, Delay)
                                    If Confirmacion Then
                                        oInformacionConfirmacion = RecuperarDatosBotonGasolina(Lector, Delay)
                                    End If
                                Catch ex2 As System.Exception
                                    Throw
                                End Try
                            End Try
                        End Try

                        Try
                            If Confirmacion Then
                                While oInformacion.Placa <> oInformacionConfirmacion.Placa
                                    If iReintentosConfirmacion > 9 Then
                                        Throw New GasolutionsException("Lectura De Chip Inestable")
                                    Else
                                        If EsServipunto Then
                                            Datos = RecuperarDatosBoton(Lector, Delay)
                                            oInformacion = RecuperarInformacion(Datos)

                                            DatosConfirmacion = RecuperarDatosBoton(Lector, Delay)
                                            oInformacionConfirmacion = RecuperarInformacion(Datos)
                                        ElseIf EsTwoFish Then
                                            oInformacion = RecuperarDatosBotonSuic(Lector, Delay)
                                            oInformacionConfirmacion = RecuperarDatosBotonSuic(Lector, Delay)
                                        Else
                                            oInformacion = RecuperarDatosBotonGasolina(Lector, Delay)
                                            oInformacionConfirmacion = RecuperarDatosBotonGasolina(Lector, Delay)
                                        End If
                                    End If
                                End While
                            End If
                        Catch Ex As System.Exception
                            Throw New GasolutionsException("Error recuperando informacion: " & Ex.Message)
                        End Try

                        Return oInformacion

                        blnReintentar = False
                    Catch
                        iIntentos = CShort(iIntentos + 1)
                        System.Threading.Thread.Sleep(Delay)

                        If iIntentos > NumeroIntentos Then
                            Throw
                        End If
                    End Try
                End While
            Catch
                Throw
            End Try
        Catch
            Throw
        End Try
    End Function


    Public Function ESAutorizado(ByVal cara As Byte, ByVal tipoValidacion As ETipoValidacion, Optional ByVal EsGasolina As Boolean = False, Optional ByRef ListaRoms As Dictionary(Of String, String) = Nothing, Optional ByVal EsMonitoreoCHIP As Boolean = False) As InformacionVehiculo

        Try
            'Recuperar el lector asociado a la cara
            Dim Lector As String = ODatos.RecuperarLectorPorCara(cara)

            'Recupera los datos del boton
            Dim Datos As DS1992
            Dim iIntentos As Int16 = 0
            Dim blnReintentar As Boolean = True
            Dim oInformacion As InformacionChip
            Dim oInformacionConfirmacion As InformacionChip
            Dim EsTwoFish As Boolean = False
            Dim EsServipunto As Boolean = False
            Dim NumeroIntentos As Int32 = CInt(ODatos.RecuperarParametro("LecturaChipReintentos"))
            Dim NumeroIntentosMonitoreo As Int32 = CInt(ODatos.RecuperarParametro("MonitoreoChipReintentos"))

            Dim Delay As Int32 = CInt(ODatos.RecuperarParametro("LecturaChipDelay"))
            Dim DelayMonitoreo As Int32 = CInt(ODatos.RecuperarParametro("LecturaChipDelayMonitoreo"))
            Dim EsChipLeido As Boolean = False
            Dim numred As Int32
            Dim Confirmacion As Boolean = CBool(ODatos.RecuperarParametro("ConfirmarLecturaChip"))
            Dim AutorizacionRemoting As Boolean = CBool(ODatos.RecuperarParametro("AutorizacionRemota"))

            numred = RecuperarRedLector(Lector)

            While blnReintentar
                Try
                    If Not EsGasolina Then
                        Try
                            If CBool(ODatos.RecuperarParametro("TwoFish")) Then
                                EsTwoFish = True
                                EsServipunto = False

                                LogCategorias.Clear()
                                LogCategorias.Agregar("IbuttonCola")
                                LogPropiedades.Clear()
                                LogPropiedades.Agregar("Lector", Lector)
                                LogPropiedades.Agregar("Cara", cara.ToString)
                                LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
                                POSstation.Fabrica.LogIt.Loguear("Encolo un nuevo lector", LogPropiedades, LogCategorias)

                                ColasLectores(numred.ToString).colLecturasPendientes.Enqueue(Lector)

                                LogCategorias.Clear()
                                LogCategorias.Agregar("Ibutton")
                                LogPropiedades.Clear()
                                LogPropiedades.Agregar("Cara", cara.ToString)
                                POSstation.Fabrica.LogIt.Loguear("Intenta leer por primera vez TwoFish", LogPropiedades, LogCategorias)


                                If Confirmacion Then

                                    oInformacion = RecuperarDatosBotonSuicConfirmacion(Lector, Delay, cara)

                                    LogCategorias.Clear()
                                    LogCategorias.Agregar("Ibutton")
                                    LogPropiedades.Clear()
                                    LogPropiedades.Agregar("Cara", cara.ToString)
                                    POSstation.Fabrica.LogIt.Loguear("Intenta leer por segunda vez TwoFish", LogPropiedades, LogCategorias)

                                Else
                                    oInformacion = RecuperarDatosBotonSuic(Lector, Delay)
                                End If

                                EsChipLeido = True
                                oInformacion.Formato = FormatoEncriptacion.TwoFish
                            Else
                                Throw New POSstation.Tmex.TmexVersionException
                            End If

                        Catch ex As POSstation.Tmex.TmexVersionException
                            LogCategorias.Clear()
                            LogCategorias.Agregar("Ibutton")
                            LogPropiedades.Clear()
                            LogPropiedades.Agregar("Cara", cara.ToString)
                            POSstation.Fabrica.LogIt.Loguear("El chip no está en formato TwoFish", LogPropiedades, LogCategorias)

                            If CBool(ODatos.RecuperarParametro("Suic")) Then
                                EsTwoFish = False
                                EsServipunto = True

                                LogCategorias.Clear()
                                LogCategorias.Agregar("Ibutton")
                                LogPropiedades.Clear()
                                LogPropiedades.Agregar("Cara", cara.ToString)
                                POSstation.Fabrica.LogIt.Loguear("Intenta leer por primera vez Suic", LogPropiedades, LogCategorias)

                                'Pone el lector en la cola de autorizacion
                                LogCategorias.Clear()
                                LogCategorias.Agregar("IbuttonCola")
                                LogPropiedades.Clear()
                                LogPropiedades.Agregar("Lector", Lector)
                                LogPropiedades.Agregar("Cara", cara.ToString)
                                LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
                                POSstation.Fabrica.LogIt.Loguear("Encolo un nuevo lector", LogPropiedades, LogCategorias)

                                ColasLectores(numred.ToString).colLecturasPendientes.Enqueue(Lector)

                                If Confirmacion Then
                                    oInformacion = RecuperarDatosBotonConfirmacion(Lector, Delay, cara)
                                Else
                                    Datos = RecuperarDatosBoton(Lector, Delay)

                                    'Retorna la informacion luego de la desencripcion
                                    LogCategorias.Clear()
                                    LogCategorias.Agregar("Ibutton")
                                    LogPropiedades.Clear()
                                    LogPropiedades.Agregar("Cara", cara.ToString)
                                    POSstation.Fabrica.LogIt.Loguear("Desencripta la informacion por primera vez Suic", LogPropiedades, LogCategorias)

                                    oInformacion = RecuperarInformacion(Datos)
                                End If
                                EsChipLeido = True
                                oInformacion.Formato = FormatoEncriptacion.ServiPunto
                            End If
                        End Try
                    Else
                        LogCategorias.Clear()
                        LogCategorias.Agregar("IbuttonCola")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Lector", Lector)
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
                        POSstation.Fabrica.LogIt.Loguear("Encolo un nuevo lector", LogPropiedades, LogCategorias)

                        ColasLectores(numred.ToString).colLecturasPendientes.Enqueue(Lector)

                        LogCategorias.Clear()
                        LogCategorias.Agregar("Ibutton")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        POSstation.Fabrica.LogIt.Loguear("Intenta leer por primera vez Gasolina", LogPropiedades, LogCategorias)

                        oInformacion = RecuperarDatosBotonGasolina(Lector, Delay)


                        'Como no hago confirmación con el rom igualo la variable
                        oInformacionConfirmacion = oInformacion

                        EsChipLeido = True
                    End If

                    If Not EsChipLeido Then
                        LogCategorias.Clear()
                        LogCategorias.Agregar("Ibutton")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        POSstation.Fabrica.LogIt.Loguear("El chip no se encuentra en formato conocido", LogPropiedades, LogCategorias)

                        'iIntentos = CShort(NumeroIntentos + 1)
                        Throw New GasolutionsException("El chip no se encuentra en formato conocido")
                    Else
                        If EsMonitoreoCHIP Then
                            If ListaRoms.ContainsKey(cara.ToString) Then
                                Dim OInfoVehiculos As New InformacionVehiculo

                                If String.IsNullOrEmpty(ListaRoms(cara.ToString)) Then
                                    Return OInfoVehiculos
                                Else
                                    If Not oInformacion Is Nothing Then
                                        If Not ListaRoms(cara.ToString).Equals(oInformacion.Rom) Then
                                            'Lanzar evento en el Helper para culminacion de venta

                                            OInfoVehiculos.EsFinalizarVentaMonitoreo = True
                                            Return OInfoVehiculos
                                        Else
                                            For Each LectorEnCola As String In ColasLectores.Item(numred.ToString).colLecturasPendientes
                                                If LectorEnCola.Equals(Lector) Then
                                                    OInfoVehiculos.EsFinalizarVentaMonitoreo = False
                                                    Return OInfoVehiculos
                                                End If
                                            Next

                                            System.Threading.Thread.Sleep(DelayMonitoreo)
                                        End If
                                    Else
                                        OInfoVehiculos.EsFinalizarVentaMonitoreo = True
                                        Return OInfoVehiculos
                                    End If

                                End If
                            End If

                        Else
                            blnReintentar = False
                        End If

                    End If


                Catch Ex As System.Exception

                    LogFallas.ReportarError(Ex, "EsAutorizado", "Cara: " & cara, "Ibutton")

                    iIntentos = CShort(iIntentos + 1)

                    'MsgBox("Error : " & Ex.Message & " , Reintento: " & iIntentos.ToString)

                    If EsMonitoreoCHIP Then
                        If iIntentos > NumeroIntentosMonitoreo Then
                            'validar ROMS estancia
                            Dim OInfoVehiculos As New InformacionVehiculo

                            If Not String.IsNullOrEmpty(ListaRoms(cara.ToString)) Then
                                'Lanzar evento en el Helper para culminacion de venta
                                OInfoVehiculos.EsFinalizarVentaMonitoreo = True
                            End If
                            Return OInfoVehiculos
                        End If
                    Else
                        If iIntentos > NumeroIntentos Then
                            Throw New GasolutionsException("Error leyendo chip: " & Ex.Message)
                        End If
                    End If


                    System.Threading.Thread.Sleep(Delay)
                End Try
            End While

            LogCategorias.Clear()
            LogCategorias.Agregar("Lectura")
            LogPropiedades.Clear()
            LogPropiedades.Agregar("Cara", cara.ToString)
            LogPropiedades.Agregar("Placa", oInformacion.Placa)
            LogPropiedades.Agregar("Rom", oInformacion.Rom)
            POSstation.Fabrica.LogIt.Loguear("Lectura de Chip", LogPropiedades, LogCategorias)
            Try
                Dim OInfoVehiculos As InformacionVehiculo
                If tipoValidacion = ETipoValidacion.BaseDatos And Not EsGasolina Then
                    LogCategorias.Clear()
                    LogCategorias.Agregar("Lectura")
                    LogPropiedades.Clear()
                    LogPropiedades.Agregar("Cara", cara.ToString)
                    LogPropiedades.Agregar("Placa", oInformacion.Placa)
                    LogPropiedades.Agregar("Rom", oInformacion.Rom)
                    POSstation.Fabrica.LogIt.Loguear("Lectura de Chip", LogPropiedades, LogCategorias)

                    If ODatos.ExisteVehiculo(oInformacion.Placa) Then
                        OInfoVehiculos = ESAutorizadoBase(oInformacion, EsGasolina) '' Se envia el parametro es

                        If OInfoVehiculos.Autorizado Then
                            Return OInfoVehiculos
                        Else
                            Throw New GasolutionsException("Error Validando vehiculo en la Base de Datos: " & OInfoVehiculos.CausaNegacion)

                        End If
                    Else
                        LogCategorias.Clear()
                        LogCategorias.Agregar("Lectura")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        LogPropiedades.Agregar("Placa", oInformacion.Placa)
                        LogPropiedades.Agregar("Rom", oInformacion.Rom)
                        POSstation.Fabrica.LogIt.Loguear("Lectura de Chip", LogPropiedades, LogCategorias)

                        Throw New GasolutionsException("Error Validando vehiculo en la Base de Datos el Vehiculo no Existe")

                    End If
                ElseIf tipoValidacion = ETipoValidacion.Chip Or EsGasolina Then
                    OInfoVehiculos = ESAutorizadoChip(oInformacion, EsGasolina)
                    LogCategorias.Clear()
                    LogCategorias.Agregar("Lectura")
                    LogPropiedades.Clear()
                    LogPropiedades.Agregar("Cara", cara.ToString)
                    LogPropiedades.Agregar("Placa", oInformacion.Placa)
                    LogPropiedades.Agregar("Rom", oInformacion.Rom)
                    POSstation.Fabrica.LogIt.Loguear("Lectura de Chip", LogPropiedades, LogCategorias)
                    If OInfoVehiculos.Autorizado = True Then
                        Return OInfoVehiculos
                    Else
                        Throw New GasolutionsException(OInfoVehiculos.CausaNegacion)
                    End If

                ElseIf tipoValidacion = ETipoValidacion.Ambas Then
                    LogCategorias.Clear()
                    LogCategorias.Agregar("Lectura")
                    LogPropiedades.Clear()
                    LogPropiedades.Agregar("Cara", cara.ToString)
                    LogPropiedades.Agregar("Placa", oInformacion.Placa)
                    LogPropiedades.Agregar("Rom", oInformacion.Rom)
                    POSstation.Fabrica.LogIt.Loguear("Lectura de Chip", LogPropiedades, LogCategorias)
                    OInfoVehiculos = ESAutorizadoChip(oInformacion, EsGasolina)
                    If OInfoVehiculos.Autorizado = True Then
                        Return OInfoVehiculos
                    Else
                        If ODatos.ExisteVehiculo(oInformacion.Placa) Then
                            OInfoVehiculos = ESAutorizadoBase(oInformacion, EsGasolina)
                            If OInfoVehiculos.Autorizado Then
                                Return OInfoVehiculos
                            Else
                                Throw New GasolutionsException("Error Validando vehiculo en la Base de Datos: " & OInfoVehiculos.CausaNegacion)
                            End If
                        Else
                            LogCategorias.Clear()
                            LogCategorias.Agregar("Lectura")
                            LogPropiedades.Clear()
                            LogPropiedades.Agregar("Cara", cara.ToString)
                            LogPropiedades.Agregar("Placa", oInformacion.Placa)
                            LogPropiedades.Agregar("Rom", oInformacion.Rom)
                            Fabrica.LogIt.Loguear("Lectura de Chip", LogPropiedades, LogCategorias)
                            Throw New GasolutionsException("Error Validando vehiculo en la Base de Datos, el Vehiculo no existe")
                        End If
                    End If
                End If
            Catch ex As System.Exception
                Throw
            End Try
        Catch Ex As System.Exception
            LogFallas.ReportarError(Ex, "ESAutorizador", "-", "ProcesoAutorizacion")
            Throw New GasolutionsException("Error Validando vehiculo: " & Ex.Message)
        End Try
    End Function
    Private Function RecuperarInformacion(ByVal chip As DS1992) As InformacionChip
        Dim oInformacion As New InformacionChip
        Dim oBoton As New Metodos
        Dim Contenido() As Byte = chip.contenido

        Try
            'Establecer el formato del chip
            Try
                Call oBoton.Encriptar(Contenido, chip.IDRom)

                oInformacion.Placa = Chr(Contenido(9)) & Chr(Contenido(10)) & Chr(Contenido(11)) & Chr(Contenido(12)) & Chr(Contenido(13)) & Chr(Contenido(14)) & Chr(Contenido(15)) & Chr(Contenido(16)) & Chr(Contenido(17))

                If oInformacion.Placa = "" Then
                    Throw New GasolutionsException("Placa en blanco")
                End If

                oInformacion.Rom = chip.IDRom

                oInformacion.FechaConversion = LongToDate(BinToLng(BytToBin(Contenido(52)) & BytToBin(Contenido(51)) & BytToBin(Contenido(50)) & BytToBin(Contenido(49))))

                oInformacion.FechaProximoMantenimiento = LongToDate(BinToLng(BytToBin(Contenido(56)) & BytToBin(Contenido(55)) & BytToBin(Contenido(54)) & BytToBin(Contenido(53))))

                oInformacion.Numero = 0 'binToLNG(bytToBIN(Contenido(4)) & bytToBIN(Contenido(3)) & bytToBIN(Contenido(2)) & bytToBIN(Contenido(1)))

                oInformacion.Serie = "" 'Chr(Contenido(5)) & Chr(Contenido(6))

                oInformacion.Compañia = "" 'Chr(Contenido(7)) & Chr(Contenido(8))
            Catch ex As System.Exception
                'Si no puede recuperar la informacion, tampoco es formato servipunto
                Throw New Tmex.TmexVersionException()
            End Try

            'Reviso los datos
            If EsCadenaConCaracterEspecial(oInformacion.Placa.Trim) Then
                Throw New GasolutionsException("Boton con caracteres especiales, acerquese al certificador")
            End If

            Return oInformacion

        Catch
            Throw
        End Try
    End Function

    Public Function RecuperarDatosBotonGasolina(ByVal Lector As String, ByVal Delay As Integer) As Fabrica.InformacionChip
        Dim oTmexHelper As New Tmex.TmexHelper
        Dim numred As Int32

        Try
            Dim sPuerto As String
            numred = RecuperarRedLector(Lector)

            'Recupera la lista de lectores
            While (Not String.IsNullOrEmpty(IsReadingLectores(numred.ToString).Lector)) AndAlso IsReadingLectores(numred.ToString).Lector.CompareTo(Lector) <> 0
                'Detengo la lectura hasta que este disponible la red de ds

                LogCategorias.Clear()
                LogCategorias.Agregar("Ibutton")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", Lector)
                LogPropiedades.Agregar("LectorBloqueador", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("RedOneWire", numred.ToString)
                POSstation.Fabrica.LogIt.Loguear("Recurso ocupado, espera obligada", LogPropiedades, LogCategorias)

                System.Threading.Thread.Sleep(CInt(Delay / 3))
            End While

            If IsReadingLectores(numred.ToString).Lector = "" Then
                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = Lector
                End If
            End If

            sPuerto = IsReadingLectores(numred.ToString).Puerto

            oTmexHelper.IniciarSesion(sPuerto, TypeAdapter.DS9097U)

            IdsLectores = oTmexHelper.BuscarLectores(sPuerto)

            If IdsLectores.Contains(Lector) Then
                'Aqui quedan la informacion del boton en la variable datos
                Dim oInformacion As Fabrica.InformacionChip

                oInformacion = oTmexHelper.LeerBotonGasolina(IdsLectores, sPuerto, Lector, TypeAdapter.DS9097U)

                oTmexHelper.FinalizarSesion()
                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = ""
                End If


                LogCategorias.Clear()
                LogCategorias.Agregar("IbuttonCola")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
                POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por finalizacion de lectura", LogPropiedades, LogCategorias)

                Return oInformacion
            Else
                LogCategorias.Clear()
                LogCategorias.Agregar("Ibutton")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", Lector)
                POSstation.Fabrica.LogIt.Loguear("Quitando energia puerto: " & sPuerto, LogPropiedades, LogCategorias)

                'Dejo propagar el error para que haya un reintento de lectura
                Throw New GasolutionsException("El Lector " & Lector & " NO EXISTE en la red")
            End If

        Catch

            oTmexHelper.FinalizarSesion()
            If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
            Else
                IsReadingLectores(numred.ToString).Lector = ""
            End If


            LogCategorias.Clear()
            LogCategorias.Agregar("IbuttonCola")
            LogPropiedades.Clear()
            LogPropiedades.Agregar("Lector", IsReadingLectores(numred.ToString).Lector)
            LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
            POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por excepción", LogPropiedades, LogCategorias)

            Throw
        Finally
            oTmexHelper.FinalizarSesion()
            oTmexHelper = Nothing
        End Try
    End Function

    Private Function RecuperarDatosBotonConfirmacion(ByVal lector As String, ByVal delay As Int32, ByVal cara As Byte) As InformacionChip
        Dim datos(1) As DS1992
        Dim InformacionesChips(1) As InformacionChip
        Dim oTmexHelper As New TmexHelper
        Dim numred As Int32
        Dim sPuerto As String
        Dim iReintentosConfirmacion As Integer = 0

        Try
            datos(0) = New DS1992
            datos(1) = New DS1992
            InformacionesChips(0) = New InformacionChip
            InformacionesChips(1) = New InformacionChip

            numred = RecuperarRedLector(lector)


            'Recupera la lista de lectores
            While (Not String.IsNullOrEmpty(IsReadingLectores(numred.ToString).Lector)) AndAlso IsReadingLectores(numred.ToString).Lector.CompareTo(lector) <> 0
                'Detengo la lectura hasta que este disponible la red de ds

                LogCategorias.Clear()
                LogCategorias.Agregar("Ibutton")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", lector)
                LogPropiedades.Agregar("LectorBloqueador", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("RedOneWire", numred.ToString)
                POSstation.Fabrica.LogIt.Loguear("Recurso ocupado, espera obligada", LogPropiedades, LogCategorias)

                System.Threading.Thread.Sleep(CInt(delay / 3))
            End While

            LogCategorias.Clear()
            LogCategorias.Agregar("IbuttonCola")
            LogPropiedades.Clear()
            LogPropiedades.Agregar("Lector", lector)
            LogPropiedades.Agregar("RedOneWire", numred.ToString)
            POSstation.Fabrica.LogIt.Loguear("Pasa a desencolar peticion", LogPropiedades, LogCategorias)

            If IsReadingLectores(numred.ToString).Lector = "" Then
                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = lector
                End If
            End If

            sPuerto = IsReadingLectores(numred.ToString).Puerto

            oTmexHelper.IniciarSesion(sPuerto, TypeAdapter.DS9097U)
            IdsLectores = oTmexHelper.BuscarLectores(sPuerto)

            If IdsLectores.Contains(lector) Then
                'Aqui quedan la informacion del boton en la variable datos
                datos(0) = oTmexHelper.LeerBoton(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U, 118)
                datos(1) = oTmexHelper.LeerBoton(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U, 118)

                InformacionesChips(0) = RecuperarInformacion(datos(0))
                InformacionesChips(1) = RecuperarInformacion(datos(1))

                While InformacionesChips(0).Placa <> InformacionesChips(1).Placa
                    LogCategorias.Clear()
                    LogCategorias.Agregar("Ibutton")
                    LogPropiedades.Clear()
                    LogPropiedades.Agregar("Cara", cara.ToString)
                    POSstation.Fabrica.LogIt.Loguear("Las Placas no coinciden", LogPropiedades, LogCategorias)

                    If iReintentosConfirmacion > 9 Then
                        LogCategorias.Clear()
                        LogCategorias.Agregar("Ibutton")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        POSstation.Fabrica.LogIt.Loguear("Lectura De Chip Inestable", LogPropiedades, LogCategorias)
                        Throw New GasolutionsException("Lectura De Chip Inestable")
                    Else
                        LogCategorias.Clear()
                        LogCategorias.Agregar("Ibutton")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        POSstation.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) leer Suic ", iReintentosConfirmacion), LogPropiedades, LogCategorias)

                        datos(0) = oTmexHelper.LeerBoton(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U, 118)
                        datos(1) = oTmexHelper.LeerBoton(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U, 118)

                        InformacionesChips(0) = RecuperarInformacion(datos(0))
                        InformacionesChips(1) = RecuperarInformacion(datos(1))

                        LogCategorias.Clear()
                        LogCategorias.Agregar("Ibutton")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        POSstation.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) desencriptar Suic ", iReintentosConfirmacion), LogPropiedades, LogCategorias)
                    End If
                    iReintentosConfirmacion = iReintentosConfirmacion + 1
                End While

                oTmexHelper.FinalizarSesion()

                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = ""
                End If

                LogCategorias.Clear()
                LogCategorias.Agregar("IbuttonCola")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
                POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por finalización de lectura", LogPropiedades, LogCategorias)

                Return InformacionesChips(0)
            Else
                'Dejo propagar el error para que haya un reintento de lectura
                Throw New GasolutionsException("El Lector " & lector & " NO EXISTE en la red")
            End If
        Catch

            oTmexHelper.FinalizarSesion()
            If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
            Else
                IsReadingLectores(numred.ToString).Lector = ""
            End If

            LogCategorias.Clear()
            LogCategorias.Agregar("IbuttonCola")
            LogPropiedades.Clear()
            LogPropiedades.Agregar("Lector", lector)
            LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString)
            POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por excepción", LogPropiedades, LogCategorias)

            Throw
        Finally
            oTmexHelper.FinalizarSesion()
            oTmexHelper = Nothing
        End Try
    End Function


    Private Function RecuperarDatosBoton(ByVal lector As String, ByVal delay As Int32) As DS1992
        Dim datos As New DS1992
        Dim oTmexHelper As New TmexHelper
        Dim numred As Int32

        Try
            Dim sPuerto As String
            numred = RecuperarRedLector(lector)


            'Recupera la lista de lectores
            While (Not String.IsNullOrEmpty(IsReadingLectores(numred.ToString).Lector)) AndAlso IsReadingLectores(numred.ToString).Lector.CompareTo(lector) <> 0
                'Detengo la lectura hasta que este disponible la red de ds

                LogCategorias.Clear()
                LogCategorias.Agregar("Ibutton")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", lector)
                LogPropiedades.Agregar("LectorBloqueador", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("RedOneWire", numred.ToString)
                POSstation.Fabrica.LogIt.Loguear("Recurso ocupado, espera obligada", LogPropiedades, LogCategorias)

                System.Threading.Thread.Sleep(CInt(delay / 3))
            End While

            LogCategorias.Clear()
            LogCategorias.Agregar("IbuttonCola")
            LogPropiedades.Clear()
            LogPropiedades.Agregar("Lector", lector)
            LogPropiedades.Agregar("RedOneWire", numred.ToString)
            POSstation.Fabrica.LogIt.Loguear("Pasa a desencolar peticion", LogPropiedades, LogCategorias)

            If IsReadingLectores(numred.ToString).Lector = "" Then
                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = lector
                End If
            End If

            sPuerto = IsReadingLectores(numred.ToString).Puerto

            oTmexHelper.IniciarSesion(sPuerto, TypeAdapter.DS9097U)
            IdsLectores = oTmexHelper.BuscarLectores(sPuerto)

            If IdsLectores.Contains(lector) Then
                'Aqui quedan la informacion del boton en la variable datos
                datos = oTmexHelper.LeerBoton(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U, 118)

                oTmexHelper.FinalizarSesion()
                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = ""
                End If

                LogCategorias.Clear()
                LogCategorias.Agregar("IbuttonCola")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
                POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por finalización de lectura", LogPropiedades, LogCategorias)

                Return datos
            Else
                'Dejo propagar el error para que haya un reintento de lectura
                Throw New GasolutionsException("El Lector " & lector & " NO EXISTE en la red")
            End If
        Catch
            oTmexHelper.FinalizarSesion()
            If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
            Else
                IsReadingLectores(numred.ToString).Lector = ""
            End If

            LogCategorias.Clear()
            LogCategorias.Agregar("IbuttonCola")
            LogPropiedades.Clear()
            LogPropiedades.Agregar("Lector", lector)
            LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString)
            POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por excepción", LogPropiedades, LogCategorias)

            Throw
        Finally
            oTmexHelper.FinalizarSesion()
            oTmexHelper = Nothing
        End Try
    End Function

    Private Shared Function EsCadenaConCaracterEspecial(ByVal cadena As String) As Boolean
        For i As Int32 = 0 To cadena.Length - 1
            If Not "abcdefghijklmnopqrstuvwxyz0123456789-".Contains(cadena.Substring(i, 1).ToLower) Then
                Return True
            End If
        Next
        Return False
    End Function

    'Modificado Por Cambios En Telmex
    Public Function RecuperarLectoresRedOneWire(ByVal puerto As String) As ArrayList
        Dim oTmexHelper As New TmexHelper

        Try
            Dim Lectores As ArrayList

            oTmexHelper.IniciarSesion(puerto, TypeAdapter.DS9097U)
            Lectores = oTmexHelper.BuscarLectores(puerto)

            Return Lectores
        Catch
            Throw
        Finally
            oTmexHelper.FinalizarSesion()
        End Try

    End Function

    Private Function RecuperarDatosBotonSuic(ByVal lector As String, ByVal delay As Int32) As InformacionChip
        Dim oTmexHelper As New POSstation.Tmex.TmexHelper
        Dim numred As Int32

        Try
            Dim sPuerto As String
            numred = RecuperarRedLector(lector)

            'Recupera la lista de lectores
            While (Not String.IsNullOrEmpty(IsReadingLectores(numred.ToString).Lector)) AndAlso IsReadingLectores(numred.ToString).Lector.CompareTo(lector) <> 0
                'Detengo la lectura hasta que este disponible la red de ds

                LogCategorias.Clear()
                LogCategorias.Agregar("Ibutton")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", lector)
                LogPropiedades.Agregar("LectorBloqueador", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("RedOneWire", numred.ToString)
                POSstation.Fabrica.LogIt.Loguear("Recurso ocupado, espera obligada", LogPropiedades, LogCategorias)

                System.Threading.Thread.Sleep(CInt(delay / 3))
            End While

            If IsReadingLectores(numred.ToString).Lector = "" Then
                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = lector
                End If
            End If

            sPuerto = IsReadingLectores(numred.ToString).Puerto
            oTmexHelper.IniciarSesion(sPuerto, TypeAdapter.DS9097U)

            IdsLectores = oTmexHelper.BuscarLectores(sPuerto)

            If IdsLectores.Contains(lector) Then
                'Aqui quedan la informacion del boton en la variable datos
                Dim oInformacion As Fabrica.InformacionChip
                oInformacion = oTmexHelper.LeerBotonSuic(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U)

                oTmexHelper.FinalizarSesion()
                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = ""
                End If


                LogCategorias.Clear()
                LogCategorias.Agregar("IbuttonCola")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
                POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por finalizacion de lectura", LogPropiedades, LogCategorias)

                Return oInformacion
            Else
                LogCategorias.Clear()
                LogCategorias.Agregar("Ibutton")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", lector)
                POSstation.Fabrica.LogIt.Loguear("Quitando energia puerto: " & sPuerto, LogPropiedades, LogCategorias)

                'Dejo propagar el error para que haya un reintento de lectura
                Throw New GasolutionsException("El Lector " & lector & " NO EXISTE en la red")
            End If

        Catch

            oTmexHelper.FinalizarSesion()
            If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
            Else
                IsReadingLectores(numred.ToString).Lector = ""
            End If


            LogCategorias.Clear()
            LogCategorias.Agregar("IbuttonCola")
            LogPropiedades.Clear()
            LogPropiedades.Agregar("Lector", IsReadingLectores(numred.ToString).Lector)
            LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
            POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por excepción", LogPropiedades, LogCategorias)

            Throw
        Finally
            oTmexHelper.FinalizarSesion()
            oTmexHelper = Nothing
        End Try
    End Function


    Private Function RecuperarDatosBotonSuicConfirmacion(ByVal lector As String, ByVal delay As Int32, ByVal cara As Byte) As InformacionChip
        Dim oTmexHelper As New POSstation.Tmex.TmexHelper
        Dim numred As Int32
        Dim oInformacion(1) As InformacionChip
        Dim sPuerto As String
        Dim iReintentosConfirmacion As Integer = 0
        Try

            oInformacion(0) = New InformacionChip
            oInformacion(1) = New InformacionChip

            numred = RecuperarRedLector(lector)

            'Recupera la lista de lectores
            While (Not String.IsNullOrEmpty(IsReadingLectores(numred.ToString).Lector)) AndAlso IsReadingLectores(numred.ToString).Lector.CompareTo(lector) <> 0
                'Detengo la lectura hasta que este disponible la red de ds

                LogCategorias.Clear()
                LogCategorias.Agregar("Ibutton")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", lector)
                LogPropiedades.Agregar("LectorBloqueador", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("RedOneWire", numred.ToString)
                POSstation.Fabrica.LogIt.Loguear("Recurso ocupado, espera obligada", LogPropiedades, LogCategorias)

                System.Threading.Thread.Sleep(CInt(delay / 3))
            End While

            If IsReadingLectores(numred.ToString).Lector = "" Then
                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = lector
                End If
            End If

            sPuerto = IsReadingLectores(numred.ToString).Puerto
            oTmexHelper.IniciarSesion(sPuerto, TypeAdapter.DS9097U)

            IdsLectores = oTmexHelper.BuscarLectores(sPuerto)

            If IdsLectores.Contains(lector) Then
                'Aqui quedan la informacion del boton en la variable datos



                oInformacion(0) = oTmexHelper.LeerBotonSuic(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U)
                oInformacion(1) = oTmexHelper.LeerBotonSuic(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U)


                While oInformacion(0).Placa <> oInformacion(1).Placa
                    LogCategorias.Clear()
                    LogCategorias.Agregar("Ibutton")
                    LogPropiedades.Clear()
                    LogPropiedades.Agregar("Cara", cara.ToString)
                    POSstation.Fabrica.LogIt.Loguear("Las Placas no coinciden", LogPropiedades, LogCategorias)

                    If iReintentosConfirmacion > 9 Then
                        LogCategorias.Clear()
                        LogCategorias.Agregar("Ibutton")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        POSstation.Fabrica.LogIt.Loguear("Lectura De Chip Inestable", LogPropiedades, LogCategorias)
                        Throw New GasolutionsException("Lectura De Chip Inestable")
                    Else
                        LogCategorias.Clear()
                        LogCategorias.Agregar("Ibutton")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        POSstation.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) leer Suic ", iReintentosConfirmacion), LogPropiedades, LogCategorias)

                        oInformacion(0) = oTmexHelper.LeerBotonSuic(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U)
                        oInformacion(1) = oTmexHelper.LeerBotonSuic(IdsLectores, sPuerto, lector, TypeAdapter.DS9097U)


                        LogCategorias.Clear()
                        LogCategorias.Agregar("Ibutton")
                        LogPropiedades.Clear()
                        LogPropiedades.Agregar("Cara", cara.ToString)
                        POSstation.Fabrica.LogIt.Loguear(String.Format("Reintenta ({0}) desencriptar Suic ", iReintentosConfirmacion), LogPropiedades, LogCategorias)
                    End If
                    iReintentosConfirmacion = iReintentosConfirmacion + 1
                End While


                oTmexHelper.FinalizarSesion()
                If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                    IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
                Else
                    IsReadingLectores(numred.ToString).Lector = ""
                End If


                LogCategorias.Clear()
                LogCategorias.Agregar("IbuttonCola")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", IsReadingLectores(numred.ToString).Lector)
                LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
                POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por finalizacion de lectura", LogPropiedades, LogCategorias)

                Return oInformacion(0)
            Else
                LogCategorias.Clear()
                LogCategorias.Agregar("Ibutton")
                LogPropiedades.Clear()
                LogPropiedades.Agregar("Lector", lector)
                POSstation.Fabrica.LogIt.Loguear("Quitando energia puerto: " & sPuerto, LogPropiedades, LogCategorias)

                'Dejo propagar el error para que haya un reintento de lectura
                Throw New GasolutionsException("El Lector " & lector & " NO EXISTE en la red")
            End If

        Catch
            oTmexHelper.FinalizarSesion()
            If ColasLectores(numred.ToString).colLecturasPendientes.Count > 0 Then
                IsReadingLectores(numred.ToString).Lector = ColasLectores(numred.ToString).colLecturasPendientes.Dequeue
            Else
                IsReadingLectores(numred.ToString).Lector = ""
            End If


            LogCategorias.Clear()
            LogCategorias.Agregar("IbuttonCola")
            LogPropiedades.Clear()
            LogPropiedades.Agregar("Lector", IsReadingLectores(numred.ToString).Lector)
            LogPropiedades.Agregar("Cola", ColasLectores(numred.ToString).colLecturasPendientes.Count.ToString())
            POSstation.Fabrica.LogIt.Loguear("Retiro de la cola un nuevo lector por excepción", LogPropiedades, LogCategorias)

            Throw

        Finally
            oTmexHelper.FinalizarSesion()
            oTmexHelper = Nothing
        End Try
    End Function

    Public Function EsActivaRedFidelizacion(ByVal idRed As Int32) As Boolean
        Try
            Return ODatos.EsActivaRedFidelizacion(idRed)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsActivaRedFidelizacion", "idRed: " & idRed, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsActivaRedFidelizacion", "idRed: " & idRed, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ESAutorizadoChip(ByVal oInformacion As InformacionChip) As InformacionVehiculo
        Dim OInformacionVehiculo As New InformacionVehiculo
        OInformacionVehiculo.Placa = oInformacion.Placa
        OInformacionVehiculo.Fecha = oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
        OInformacionVehiculo.Rom = oInformacion.Rom
        OInformacionVehiculo.Contrato = oInformacion.Contrato
        OInformacionVehiculo.Formato = oInformacion.Formato

        If ValidarFecha(oInformacion.FechaProximoMantenimiento) Then

            'Verifico que el chip este activo y no hayan bloequeos
            Try
                '' ODatos.RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa)
                OInformacionVehiculo.Autorizado = True
                Return OInformacionVehiculo
            Catch Ex As System.Exception
                LogFallas.ReportarError(Ex, "ESAutorizadoChip", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento, "AutorizacionCHIP")
                OInformacionVehiculo.CausaNegacion = Ex.Message
                OInformacionVehiculo.Autorizado = False
                Return OInformacionVehiculo
            End Try
        Else
            OInformacionVehiculo.CausaNegacion = "El mantenimiento del vehiculo " & oInformacion.Placa & " se encuentra VENCIDO: " & oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
            OInformacionVehiculo.Autorizado = False
            Return OInformacionVehiculo
        End If
    End Function


    Public Function ESAutorizadoChip(ByVal oInformacion As InformacionChip, ByVal EsGalosina As Boolean) As InformacionVehiculo
        Dim OInformacionVehiculo As New InformacionVehiculo
        OInformacionVehiculo.Placa = oInformacion.Placa
        OInformacionVehiculo.Fecha = oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
        OInformacionVehiculo.Rom = oInformacion.Rom
        OInformacionVehiculo.Contrato = oInformacion.Contrato
        OInformacionVehiculo.Formato = oInformacion.Formato

        If ValidarFecha(oInformacion.FechaProximoMantenimiento) Then

            'Verifico que el chip este activo y no hayan bloequeos
            Try
                ODatos.RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa, EsGalosina)
                OInformacionVehiculo.Autorizado = True
                Return OInformacionVehiculo
            Catch Ex As System.Exception
                LogFallas.ReportarError(Ex, "ESAutorizadoChip", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento, "AutorizacionCHIP")
                OInformacionVehiculo.CausaNegacion = Ex.Message
                OInformacionVehiculo.Autorizado = False
                Return OInformacionVehiculo
            End Try
        Else
            OInformacionVehiculo.CausaNegacion = "El mantenimiento del vehiculo " & oInformacion.Placa & " se encuentra VENCIDO: " & oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
            OInformacionVehiculo.Autorizado = False
            Return OInformacionVehiculo
        End If
    End Function

    'Public Function ESAutorizadoBase(ByVal oInformacion As InformacionChip, Optional ByVal datos As DS1992 = Nothing) As InformacionVehiculo
    '    Dim OInformacionVehiculo As New InformacionVehiculo
    '    OInformacionVehiculo.Placa = oInformacion.Placa
    '    OInformacionVehiculo.Fecha = oInformacion.FechaProximoMantenimiento.ToString("dd/MM/yyyy")
    '    OInformacionVehiculo.Rom = oInformacion.Rom
    '    OInformacionVehiculo.Contrato = oInformacion.Contrato
    '    OInformacionVehiculo.Formato = oInformacion.Formato


    '    Try
    '        ODatos.RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa)
    '        OInformacionVehiculo.Autorizado = True
    '        Return OInformacionVehiculo
    '    Catch EX As SqlClient.SqlException
    '        LogFallas.ReportarError(EX, "ESAutorizadoBase", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento & ", Rom: " & oInformacion.Rom, "AutorizacionBD")
    '        OInformacionVehiculo.Autorizado = False
    '        OInformacionVehiculo.CausaNegacion = EX.Message
    '        Return OInformacionVehiculo
    '    Catch EX As System.Exception
    '        LogFallas.ReportarError(EX, "ESAutorizadoBase", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento & ", Rom: " & oInformacion.Rom, "AutorizacionBD")
    '        OInformacionVehiculo.Autorizado = False
    '        OInformacionVehiculo.CausaNegacion = EX.Message
    '        Return OInformacionVehiculo
    '    End Try
    'End Function


    Public Function ESAutorizadoBase(ByVal oInformacion As InformacionChip, ByVal EsGasolina As Boolean) As InformacionVehiculo
        Dim OInformacionVehiculo As New InformacionVehiculo
        OInformacionVehiculo.Placa = oInformacion.Placa
        OInformacionVehiculo.Fecha = oInformacion.FechaProximoMantenimiento
        OInformacionVehiculo.Rom = oInformacion.Rom
        OInformacionVehiculo.Contrato = oInformacion.Contrato
        OInformacionVehiculo.Formato = oInformacion.Formato
        OInformacionVehiculo.FechaProximoMantenimiento = oInformacion.FechaProximoMantenimiento
        OInformacionVehiculo.FechaConversion = oInformacion.FechaConversion


        Dim datosChip As New ApiResponse.DatosChip
        Try
            If (ApiSICOM.AplicaSICOM()) Then
                Try
                    datosChip = RestApiInvoke.GetDataChip(oInformacion.Rom)


                    If Not datosChip Is Nothing Then
                        If Not String.IsNullOrEmpty(datosChip.Mensaje) Then
                            If Not CBool(RecuperarParametro("AplicaAutorizacionSicomVehiculoVencido")) Then
                                If datosChip.Mensaje.Contains("No se pudo establecer conexion con el servidor, o no se obtuvo respuesta") Or datosChip.MensajeSICOM.Contains("No hay registros asociados") Then
                                    RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa, EsGasolina)
                                End If
                            Else
                                If datosChip.Mensaje.Contains("No se pudo establecer conexion con el servidor, o no se obtuvo respuesta") Or datosChip.MensajeSICOM.Contains("No hay registros asociados") Or datosChip.MensajeSICOM.Contains("CERTIFICACION VENCIDA") Then
                                    RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa, EsGasolina)
                                End If
                            End If

                        End If
                    End If

                    Try
                        If datosChip Is Nothing Then
                            RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa, EsGasolina)
                            OInformacionVehiculo.FechaConversion = oInformacion.FechaProximoMantenimiento
                            OInformacionVehiculo.FechaProximoMantenimiento = Now
                            OInformacionVehiculo.Autorizado = True
                            OInformacionVehiculo.CausaNegacion = ""
                            OInformacionVehiculo.Contrato = ""
                        Else
                            OInformacionVehiculo.Rom = datosChip.ROM
                            OInformacionVehiculo.Placa = datosChip.Placa
                            If datosChip.FechaProximoMantenimiento Is Nothing Then
                                OInformacionVehiculo.FechaProximoMantenimiento = Now
                            Else
                                OInformacionVehiculo.FechaProximoMantenimiento = CDate(datosChip.FechaProximoMantenimiento)
                            End If

                            If datosChip.FechaConversion Is Nothing Then
                                OInformacionVehiculo.FechaConversion = Now
                            Else
                                OInformacionVehiculo.FechaConversion = CDate(datosChip.FechaConversion)
                            End If
                            OInformacionVehiculo.Contrato = ""
                            OInformacionVehiculo.Autorizado = True
                        End If
                    Catch ex As System.Exception
                        OInformacionVehiculo.FechaConversion = Now
                        OInformacionVehiculo.Autorizado = False
                        OInformacionVehiculo.CausaNegacion = ex.Message
                        OInformacionVehiculo.FechaProximoMantenimiento = Now
                        OInformacionVehiculo.Contrato = ""
                    End Try
                    Return OInformacionVehiculo
                Catch ex As System.Exception
                    Try
                        If (ApiSICOM.AplicaSICOM()) Then

                            If Not CBool(RecuperarParametro("AplicaAutorizacionSicomVehiculoVencido")) Then
                                If ex.Message.Contains("No se pudo establecer conexion con el servidor, o no se obtuvo respuesta") Or ex.Message.Contains("No hay registros asociados") Then
                                    RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa, EsGasolina)
                                Else
                                    Throw New System.Exception(ex.Message)
                                End If
                            Else
                                If ex.Message.Contains("No se pudo establecer conexion con el servidor, o no se obtuvo respuesta") Or ex.Message.Contains("No hay registros asociados") Or ex.Message.Contains("CERTIFICACION VENCIDA") Then
                                    RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa, EsGasolina)
                                Else
                                    Throw New System.Exception(ex.Message)
                                End If
                            End If

                        Else
                            Throw New System.Exception(ex.Message)
                        End If

                    Catch ex2 As System.Exception
                        Throw
                    End Try
                End Try
            End If

            ODatos.RecuperarEstadoVehiculo(oInformacion.Rom, oInformacion.Placa, EsGasolina)
            OInformacionVehiculo.Autorizado = True
            Return OInformacionVehiculo
        Catch EX As SqlClient.SqlException
            LogFallas.ReportarError(EX, "ESAutorizadoBase", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento & ", Rom: " & oInformacion.Rom, "AutorizacionBD")
            OInformacionVehiculo.Autorizado = False
            OInformacionVehiculo.CausaNegacion = EX.Message
            Return OInformacionVehiculo
        Catch EX As System.Exception
            LogFallas.ReportarError(EX, "ESAutorizadoBase", "Placa: " & oInformacion.Placa & ", Fecha: " & oInformacion.FechaProximoMantenimiento & ", Rom: " & oInformacion.Rom, "AutorizacionBD")
            OInformacionVehiculo.Autorizado = False
            OInformacionVehiculo.CausaNegacion = EX.Message
            Return OInformacionVehiculo
        End Try
    End Function
    Public Function ExisteVentaParcial(ByVal idCara As Int16) As Boolean
        Try
            Return ODatos.ExisteVentaParcial(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteVentaParcial", "Cara:" & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteVentaParcial", "Cara:" & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function TieneStocksTurnoHorario(ByVal IdTurno As Int32) As Boolean
        Try
            Return ODatos.TieneStocksTurnoHorario(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "TieneStocksTurnoHorario", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "TieneStocksTurnoHorario", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function TieneExistenciasProducto(ByVal IdManguera As Int16, Optional ByVal IdEstacion As Int16 = 0) As Boolean
        Try
            If IdEstacion = 0 Then
                Return ODatos.TieneExistenciasProducto(IdManguera)
            Else
                Return ODatos.TieneExistenciasProducto(IdManguera, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "TieneExistenciasProducto", "IdManguera: " & IdManguera & " Idestacion: " & IdEstacion, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "TieneExistenciasProducto", "IdManguera: " & IdManguera, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "TieneExistenciasProducto", "IdManguera: " & IdManguera & " Idestacion: " & IdEstacion, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "TieneExistenciasProducto", "IdManguera: " & IdManguera, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function FinalizoConsignacionesSobres(ByVal IdTurno As Int32) As Boolean
        Try
            Return ODatos.FinalizoConsignacionesSobres(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FinalizoConsignacionesSobres", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FinalizoConsignacionesSobres", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCaras() As DataSet
        Try
            Return ODatos.RecuperarCaras
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCaras", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCaras", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCaras(ByVal idEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarCaras(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCaras", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCaras", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCarasDisplay() As DataTable
        Try
            Return ODatos.RecuperarCarasDisplay()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCarasDisplay", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCarasDisplay", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarEstadoCaraDisplay(ByVal cara As Int32, ByVal estado As String)
        Try
            ODatos.ActualizarEstadoCaraDisplay(cara, estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoCaraDisplay", "CARA: " & cara & " , ESTADO: " & estado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoCaraDisplay", "CARA: " & cara & " , ESTADO: " & estado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarPropiedadesCaraDisplay(ByVal cara As Int32, ByVal estado As String, ByVal valor As Double, ByVal volumen As Double, ByVal placa As String)
        Try
            ODatos.ActualizarPropiedadesCaraDisplay(cara, estado, valor, volumen, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarPropiedadesCaraDisplay", "CARA: " & cara & " , ESTADO: " & estado & " , VALOR: " & valor & " , VOLUMEN: " & volumen & " , PLACA: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarPropiedadesCaraDisplay", "CARA: " & cara & " , ESTADO: " & estado & " , VALOR: " & valor & " , VOLUMEN: " & volumen & " , PLACA: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstadoTurnoCaraDisplay(ByVal surtidores As String, ByVal estadoTurno As String)
        Try
            ODatos.ActualizarEstadoTurnoCaraDisplay(surtidores, estadoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoTurnoCaraDisplay", "surtidores: " & surtidores & " , estadoTurno: " & estadoTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoTurnoCaraDisplay", "surtidores: " & surtidores & " , estadoTurno: " & estadoTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarPrecioCaraDisplay(ByVal cara As Int32, ByVal precio As Double)
        Try
            ODatos.ActualizarPrecioCaraDisplay(cara, precio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarPrecioCaraDisplay", "CARA: " & cara & " , PRECIO: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarPrecioCaraDisplay", "CARA: " & cara & " , PRECIO: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstadoPlacaCaraDisplay(ByVal cara As Int32, ByVal estado As String, ByVal placa As String)
        Try
            ODatos.ActualizarEstadoPlacaCaraDisplay(cara, estado, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoPlacaCaraDisplay", "CARA: " & cara & " , ESTADO: " & estado & " , PLACA" & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoPlacaCaraDisplay", "CARA: " & cara & " , ESTADO: " & estado & " , PLACA" & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarIslas() As DataSet
        Try
            Return ODatos.RecuperarIslas
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslas", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslas", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarIslas(ByVal IdEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarIslas(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslas", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslas", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIslaPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarIslaPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslaPorTurno", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslaPorTurno", "IDTURNO: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSunatParaArchivo(ByVal fInicio As String, ByVal fFin As String) As DataSet
        Try
            Return ODatos.RecuperarVentasReporteAnulados(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSunatParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSunatParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasPorDia(ByVal fInicio As DateTime, ByVal fFin As DateTime) As DataSet
        Try
            Return ODatos.RecuperarVentasPorDia(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPorDia", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPorDia", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasPorDiaCanastilla(ByVal fInicio As String, ByVal fFin As String) As DataSet
        Try
            Return ODatos.RecuperarVentasPorDiaCanastilla(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPorDiaCanastilla", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPorDiaCanastilla", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPedidoCombustiblePorFecha(ByVal fInicio As String, ByVal fFin As String) As DataSet
        Try
            Return ODatos.RecuperarPedidoCombustiblePorFecha(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPedidoCombustiblePorFecha", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPedidoCombustiblePorFecha", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarSiVehiculoEsCredito(ByVal Rom As String) As Boolean
        Try
            Return ODatos.ValidarSiVehiculoEsCredito(Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarSiVehiculoEsCredito", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarSiVehiculoEsCredito", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarSiVehiculoTieneCredito(ByVal Rom As String) As Boolean
        Try
            Return ODatos.ValidarSiVehiculoTieneCredito(Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarSiVehiculoTieneCredito", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarSiVehiculoTieneCredito", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarSiVehiculoEsCreditoGerenciado(ByVal Rom As String) As Boolean
        Try
            Return ODatos.ValidarSiVehiculoEsCreditoGerenciado(Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarSiVehiculoEsCreditoGerenciado", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarSiVehiculoEsCreditoGerenciado", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarSiVehiculoEsCreditoGerenciadoPorTarjeta(ByVal tarjeta As String) As Boolean
        Try
            Return ODatos.ValidarSiVehiculoEsCreditoGerenciadoPorTarjeta(tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarSiVehiculoEsCreditoGerenciadoPorTarjeta", "tarjeta: " & tarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarSiVehiculoEsCreditoGerenciadoPorTarjeta", "tarjeta: " & tarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCreditoPorIdentificador(ByVal rom As String, ByVal idProducto As String, ByVal valor As Decimal, ByVal cara As Int16) As IDataReader
        Try
            Return ODatos.RecuperarCreditoPorIdentificador(rom, idProducto, valor, cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "Rom: " & rom & " , Producto: " & idProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "Rom: " & rom & " , Producto: " & idProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCreditoPorIdentificador(ByVal identificador As String, ByVal idTipoIdentificador As Int32, ByVal idProducto As String, ByVal valor As Decimal, ByVal cara As Int16) As IDataReader
        Try
            Return ODatos.RecuperarCreditoPorIdentificador(identificador, idTipoIdentificador, idProducto, valor, cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & ", cara: " & cara & ", valor: " & valor & " , Producto: " & idProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & ", cara: " & cara & ", valor: " & valor & " , Producto: " & idProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSunatParaArchivo(ByVal fInicio As String, ByVal fFin As String, ByVal TimeOut As Integer) As DataSet
        Try
            Return ODatos.RecuperarVentasReporteAnulados(fInicio, fFin, TimeOut)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSunatParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSunatParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    'RecuperarVentasDocumentosParaArchivo 
    Public Function RecuperarDocumentosParaArchivo(ByVal fInicio As String, ByVal fFin As String) As DataSet
        Try
            Return ODatos.RecuperarVentasDocumentosParaArchivo(fInicio, fFin)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasDocumentosParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasDocumentosParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarDocumentosParaArchivo(ByVal fInicio As String, ByVal fFin As String, ByVal TimeOut As Integer) As DataSet
        Try
            Return ODatos.RecuperarVentasDocumentosParaArchivo(fInicio, fFin, TimeOut)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDocumentosParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDocumentosParaArchivo", "fInicio: " & fInicio & " , fFin: " & fFin & "TimeOut:" & TimeOut, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTalleres() As IDataReader
        Try
            Return ODatos.RecuperarTalleres()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTalleres", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTalleres", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTalleres(ByVal IdEstacion As Integer) As IDataReader
        Try
            Return ODatos.RecuperarTalleres(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTalleres", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTalleres", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarFechaRevisionVenta(ByVal recibo As Int64, Optional ByVal esVentaRegistrada As Boolean = True) As IDataReader
        Try
            Return ODatos.RecuperarFechaRevisionVenta(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFechaRevisionVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFechaRevisionVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarFechaRevisionVenta(ByVal recibo As Int64, ByVal IdEstacion As Integer, Optional ByVal esVentaRegistrada As Boolean = True) As IDataReader
        Try
            Return ODatos.RecuperarFechaRevisionVenta(recibo, IdEstacion, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFechaRevisionVenta", "Recibo: " & recibo & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFechaRevisionVenta", "Recibo: " & recibo & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Sub AnularPagoExtraordinario(ByVal idPago As Int32)
        Try
            ODatos.AnularPagoExtraordinario(idPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AnularPagoExtraordinario", "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AnularPagoExtraordinario", "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub AnularPagoExtraordinario(ByVal idPago As Int32, ByVal IdEstacion As Short)
        Try
            ODatos.AnularPagoExtraordinario(idPago, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AnularPagoExtraordinario", "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AnularPagoExtraordinario", "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarMovimientoCanastilla(ByVal idMovimiento As Int32) As IDataReader
        Try
            Return ODatos.RecuperarMovimientoCanastilla(idMovimiento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMovimientoCanastilla", "IdMovimiento: " & idMovimiento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMovimientoCanastilla", "IdMovimiento: " & idMovimiento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMovimientoCanastillaDetalle(ByVal idMovimiento As Int32) As DataSet
        Try
            Return ODatos.RecuperarMovimientoCanastillaDetalle(idMovimiento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMovimientoCanastillaDetalle", "IdMovimiento: " & idMovimiento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMovimientoCanastillaDetalle", "IdMovimiento: " & idMovimiento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoMovimientoCanastilla() As Int32
        Try
            Return ODatos.RecuperarUltimoMovimientoCanastilla()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoMovimientoCanastilla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoMovimientoCanastilla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoCambioPrecioFallido() As Int32
        Try
            Return ODatos.RecuperarUltimoCambioPrecioFallido()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoCambioPrecioFallido", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoCambioPrecioFallido", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoMovimientoKardex() As Int64
        Try
            Return ODatos.RecuperarUltimoMovimientoKardex()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoMovimientoKardex", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoMovimientoKardex", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaNotificacionKardex() As Int64
        Try
            Return ODatos.RecuperarUltimaNotificacionKardex()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaNotificacionKardex", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaNotificacionKardex", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboPorConsecutivoModificacion(ByVal consecutivo As Int64) As Int64
        Try
            Return ODatos.RecuperarReciboPorConsecutivoModificacion(consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorConsecutivoModificacion", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorConsecutivoModificacion", "consecutivo: " & consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Recibo Combustible GasCorp"

    Public Function ValidarDocumentoPedidoGascorp(ByVal Documento As String) As Boolean
        Try
            Return ODatos.ValidarDocumentoPedidoGascorp(Documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarDocumentoPedidoGascorp", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarDocumentoPedidoGascorp", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarTanqueoGas(ByVal Documento As String)
        Try
            ODatos.ActualizarTanqueoGas(Documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTanqueoGas", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTanqueoGas", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub AlmacenarDocumentoPedidoGasCorpTmp(ByVal Documento As String, ByVal Cantidad As Decimal)
        Try
            ODatos.AlmacenarDocumentoPedidoTmp(Documento, Cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AlmacenarDocumentoPedidoGasCorpTmp", "Documento: " & Documento & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AlmacenarDocumentoPedidoGasCorpTmp", "Documento: " & Documento & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub AlmacenarDocumentoPedidoGasCorp(ByVal Documento As String)
        Try
            ODatos.AlmacenarDocumentoPedido(Documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AlmacenarDocumentoPedidoGasCorp", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AlmacenarDocumentoPedidoGasCorp", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarInformacionPedidoGasTrailer(ByVal Documento As String) As IDataReader
        Try
            Return ODatos.RecuperarInformacionPedidoGasTrailer(Documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionPedidoGasTrailer", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionPedidoGasTrailer", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Historico Precio FuelStation"
    Public Sub CargarHistoricoPrecioFuelStation(ByVal ruta As String)
        Try
            ODatos.CargarHistoricoPrecioFuelStation(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarHistoricoPrecioFuelStation", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarHistoricoPrecioFuelStation", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub SincronizarPrecioProductoCombustibleFuelStation(ByVal idProducto As Int32, ByVal precio As Decimal, ByVal fechaHora As DateTime)
        Try
            ODatos.SincronizarPrecioProductoCombustibleFuelStation(idProducto, precio, fechaHora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarPrecioProductoCombustibleFuelStation", "idProducto: " & idProducto & " , precio: " & precio & " , fechaHora: " & fechaHora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarPrecioProductoCombustibleFuelStation", "idProducto: " & idProducto & " , precio: " & precio & " , fechaHora: " & fechaHora, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Ventas Millonarias"

    Public Function RecuperarInformacionVentaMillonariaCDC(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarInformacionVentaMillonariaCDC(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaMillonariaCDC", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaMillonariaCDC", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionCreditoVentaMillonariaCDC(ByVal recibo As Int64) As System.Data.DataTable
        Try
            Return ODatos.RecuperarInformacionCreditoVentaMillonariaCDC(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaMillonariaCDC", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaMillonariaCDC", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub AutorizarAjusteVenta(ByVal Recibo As Int64, ByVal LecturaInicial As Decimal, ByVal LecturaFinal As Decimal, ByVal Cantidad As Decimal, ByVal Abonocredito As Decimal, ByVal Valor As Decimal)
        Try
            ODatos.AutorizarAjusteVenta(Recibo, LecturaInicial, LecturaFinal, Cantidad, Abonocredito, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AutorizarAjusteVenta", "Recibo: " & Recibo & " LecturaInicial: " & LecturaInicial & " LecturaFinal: " & LecturaFinal & " Cantidad: " & Cantidad & " Abonocredito:" & Abonocredito & " Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AutorizarAjusteVenta", "Recibo: " & Recibo & " LecturaInicial: " & LecturaInicial & " LecturaFinal: " & LecturaFinal & " Cantidad: " & Cantidad & " Abonocredito:" & Abonocredito & " Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub AutorizarAjusteVentaCredito(ByVal Recibo As Int64)
        Try
            ODatos.AutorizarAjusteVentaCredito(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AutorizarAjusteVentaCredito", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AutorizarAjusteVentaCredito", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

#End Region

#Region "Auxiliares"
    Public Shared Function BytToBin(ByVal num As Byte) As String
        Try
            Dim sNum(0 To 7) As Byte
            Dim I As Integer


            If num >= 128 Then
                sNum(7) = 1
                num = CByte(num - 128)
            Else
                sNum(7) = 0
            End If

            If num >= 64 Then
                sNum(6) = 1
                num = CByte(num - 64)
            Else
                sNum(6) = 0
            End If

            If num >= 32 Then
                sNum(5) = 1
                num = CByte(num - 32)
            Else
                sNum(5) = 0
            End If

            If num >= 16 Then
                sNum(4) = 1
                num = CByte(num - 16)
            Else
                sNum(4) = 0
            End If

            If num >= 8 Then
                sNum(3) = 1
                num = CByte(num - 8)
            Else
                sNum(3) = 0
            End If

            If num >= 4 Then
                sNum(2) = 1
                num = CByte(num - 4)
            Else
                sNum(2) = 0
            End If

            If num >= 2 Then
                sNum(1) = 1
                num = CByte(num - 2)
            Else
                sNum(1) = 0
            End If

            If num >= 1 Then
                sNum(0) = 1
            Else
                sNum(0) = 0
            End If
            Dim Resultado As New Text.StringBuilder()

            For I = 7 To 0 Step -1
                Resultado.Append(sNum(I))
            Next I
            Return Resultado.ToString()
        Catch
            Throw
        End Try
    End Function
    Public Shared Function BinToLng(ByVal num As String) As Long
        Try
            Dim I As Integer

            If Len(num) <> 32 Then
                Throw New GasolutionsException("Parametro Inválido")
            End If

            For I = 32 To 1 Step -1
                If Mid(num, I, 1) = "1" Then
                    BinToLng = CLng(2 ^ (32 - I) + BinToLng)
                End If
            Next I
        Catch
            Throw
        End Try
    End Function
    Public Shared Function LongToDate(ByVal fecha As Long) As Date
        Try
            LongToDate = DateAdd("d", fecha, "28/12/1800")
        Catch
            Throw
        End Try
    End Function
#End Region

#Region " Metodos de Acceso al CDC"

    'Public Function ModificarVentaCDC(ByVal recibo As Long, ByVal pagos As List(Of MediosPagos)) As RespuestaMediosPagos
    '    Dim Respuesta As New RespuestaMediosPagos
    '    Dim ODatos As IDataReader = RecuperarGUID(recibo)
    '    Dim Estacion As DataSet = RecuperarEstaciones()
    '    Dim CodEstacion As String

    '    Try
    '        CodEstacion = Estacion.Tables(0).Rows(0).Item("Codigo").ToString()
    '        If ODatos.Read Then
    '            Respuesta = ServerCDCIG.AutorizadorRemoting.ModificarVenta(ODatos.Item("GUIDVenta").ToString, CodEstacion, pagos)
    '        Else
    '            Respuesta.Procesado = False
    '            Respuesta.MensajeError = "Fallo en Proceso de Recibo"
    '            Respuesta.Saldo = -1
    '        End If
    '        Return Respuesta
    '    Catch ex As SqlClient.SqlException
    '        Respuesta.Procesado = False
    '        Respuesta.MensajeError = "Fallo en Proceso"
    '        Respuesta.Saldo = -1
    '        LogFallas.ReportarError(ex, "ModificarVentaCDC", "RECIBO: " & recibo, "FallaStoredProcedure")
    '        Return Respuesta
    '    Catch ex As System.Exception
    '        Respuesta.Procesado = False
    '        Respuesta.MensajeError = "Fallo en Proceso"
    '        Respuesta.Saldo = -1
    '        LogFallas.ReportarError(ex, "ModificarVenta", "Recibo: " & recibo, "ModificacionVenta")
    '        Return Respuesta
    '    End Try
    'End Function

    'Public Function ModificarVentaCDC(ByVal recibo As Long, ByVal pagos As MediosPagos) As RespuestaMediosPagos
    '    Dim Respuesta As New RespuestaMediosPagos
    '    Dim ODatos As IDataReader = RecuperarGUID(recibo)
    '    Dim Estacion As DataSet = RecuperarEstaciones()
    '    Dim CodEstacion As String
    '    Try
    '        CodEstacion = Estacion.Tables(0).Rows(0).Item("Codigo").ToString()
    '        If ODatos.Read Then
    '            Respuesta = ServerCDCIG.AutorizadorRemoting.ModificarVenta(ODatos.Item("GUIDVenta").ToString, CodEstacion, pagos)
    '        Else
    '            Respuesta.Procesado = False
    '            Respuesta.MensajeError = "Fallo en Proceso de Recibo"
    '            Respuesta.Saldo = -1
    '        End If
    '        Return Respuesta
    '    Catch ex As SqlClient.SqlException
    '        Respuesta.Procesado = False
    '        Respuesta.MensajeError = "Fallo en Proceso"
    '        Respuesta.Saldo = -1
    '        LogFallas.ReportarError(ex, "ModificarVentaCDC", "RECIBO: " & recibo, "FallaStoredProcedure")
    '        Return Respuesta
    '    Catch ex As System.Exception
    '        Respuesta.Procesado = False
    '        Respuesta.MensajeError = "Fallo en Proceso"
    '        Respuesta.Saldo = -1
    '        LogFallas.ReportarError(ex, "ModificarVenta", "Recibo: " & recibo, "ModificacionVenta")
    '        Return Respuesta
    '    End Try
    'End Function

    Public Sub ModificarVenta(ByVal venta As VentaModificada)
        Try
            Dim I As Integer = 1
            For Each Pay As MediosPagos In venta.Pagos
                InsertarVentaFormaPagoTmp(venta.Recibo, Pay.IdFormaPago, Pay.Valor, Pay.NroTarjeta, Pay.TipoLectura, Pay.NroConfirmacion, Pay.Monto, I = 1, venta.numAutorizacionCheque, venta.placaCheque)
                I = 2
                'Realiza la Modificadion
            Next

            For Each Pay As MediosPagos In venta.Prepagos
                InsertarVentaFormaPagoTmp(venta.Recibo, Pay.IdFormaPago, Pay.Valor, Pay.NroTarjeta, Pay.TipoLectura, Pay.NroConfirmacion, Pay.Monto, I = 1, venta.numAutorizacionCheque, venta.placaCheque)
                I = 2
                'Realiza la Modificadion
            Next

            For Each Pay As MediosPagos In venta.Bonos
                InsertarVentaFormaPagoTmp(venta.Recibo, Pay.IdFormaPago, Pay.Valor, Pay.NroTarjeta, Pay.TipoLectura, Pay.NroConfirmacion, Pay.Monto, I = 1, venta.numAutorizacionCheque, venta.placaCheque)
                I = 2
                'Realiza la Modificadion
            Next

            ActualizarFormaPagoVenta(venta.Recibo)

            If (Not venta.placaCheque = Nothing) Then
                ActualizarChequeVenta(venta.numAutorizacionCheque, venta.placaCheque)
            End If

        Catch ex As System.Data.SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarVenta", "Recibo : " & venta.Recibo, "ModificacionVenta")
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarVenta", "Recibo : " & venta.Recibo, "ModificacionVenta")
        End Try
    End Sub






    'Public Sub ModificarVentaChile(ByVal venta As VentaModificada)
    '    Try
    '        Dim I As Integer = 1
    '        For Each Pay As MediosPagos In venta.Pagos
    '            InsertarVentaFormaPagoTmp(venta.Recibo, Pay.IdFormaPago, Pay.Valor, Pay.NroTarjeta, Pay.TipoLectura, Pay.NroConfirmacion, Pay.Monto, I = 1, venta.numAutorizacionCheque, venta.placaCheque)
    '            I = 2
    '            'Realiza la Modificadion
    '        Next

    '        For Each Pay As MediosPagos In venta.Prepagos
    '            InsertarVentaFormaPagoTmp(venta.Recibo, Pay.IdFormaPago, Pay.Valor, Pay.NroTarjeta, Pay.TipoLectura, Pay.NroConfirmacion, Pay.Monto, I = 1, venta.numAutorizacionCheque, venta.placaCheque)
    '            I = 2
    '            'Realiza la Modificadion
    '        Next

    '        For Each Pay As MediosPagos In venta.Bonos
    '            InsertarVentaFormaPagoTmp(venta.Recibo, Pay.IdFormaPago, Pay.Valor, Pay.NroTarjeta, Pay.TipoLectura, Pay.NroConfirmacion, Pay.Monto, I = 1, venta.numAutorizacionCheque, venta.placaCheque)
    '            I = 2
    '            'Realiza la Modificadion
    '        Next

    '        ActualizarFormaPagoVenta(venta.Recibo)

    '        If (Not venta.placaCheque = Nothing) Then
    '            ''ActualizarChequeVentaChile(venta.Recibo,venta.
    '        End If

    '    Catch ex As System.Data.SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "ModificarVentaChile", "Recibo : " & venta.Recibo, "ModificarVentaChile")
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "ModificarVentaChile", "Recibo : " & venta.Recibo, "ModificarVentaChile")
    '    End Try
    'End Sub

    Public Sub ModificarVentaGas(ByVal venta As VentaModificada)
        Try

            ActualizarFormaPagoVentaGas(venta.Recibo)

        Catch ex As System.Data.SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarVentaGas", "Recibo : " & venta.Recibo, "ModificacionVenta")
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarVentaGas", "Recibo : " & venta.Recibo, "ModificacionVenta")
        End Try
    End Sub

    Public Sub ModificarVentaCanastilla(ByVal venta As VentaModificada)
        Try
            Dim I As Integer = 1
            For Each Pay As MediosPagos In venta.Pagos
                InsertarVentaFormaPagoCanastillaTmp(venta.Recibo, Pay.IdFormaPago, Pay.Valor, Pay.NroTarjeta, I = 1)
                I = 2
                'Realiza la Modificadion
            Next

            For Each Pay As MediosPagos In venta.Prepagos
                InsertarVentaFormaPagoCanastillaTmp(venta.Recibo, Pay.IdFormaPago, Pay.Valor, Pay.NroTarjeta, I = 1)
                I = 2
                'Realiza la Modificadion
            Next

            For Each Pay As MediosPagos In venta.Bonos
                InsertarVentaFormaPagoCanastillaTmp(venta.Recibo, Pay.IdFormaPago, Pay.Valor, Pay.NroTarjeta, I = 1)
                I = 2
                'Realiza la Modificadion
            Next

            ActualizarFormaPagoVentaCanastilla(venta.Recibo)

        Catch ex As System.Data.SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarVentaCanastilla", "Recibo : " & venta.Recibo, "ModificacionVentaCanastilla")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarVentaCanastilla", "Recibo : " & venta.Recibo, "ModificacionVentaCanastilla")
            Throw
        End Try
    End Sub

    Public Function EsPGN() As Boolean
        Dim OHelper As New Helper
        If CBool(OHelper.RecuperarParametro("IndependizarFacturacion")) Then
            Return True
        Else
            Return False
        End If
    End Function

#End Region



#Region "FullStation"
    Public Sub ActualizarIdentificador(ByVal IdIdentificador As Integer, ByVal estado As Boolean)
        Try
            ODatos.ActualizarIdentificador(IdIdentificador, estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarIdentificador", "IdIdentificador: " & IdIdentificador & ", Estado: " & estado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarIdentificador", "IdIdentificador: " & IdIdentificador & ", Estado: " & estado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarIdentificadorLocal(ByVal idIdentificador As Int32, ByVal Identificador As String, ByVal placa As String, ByVal EsActivo As Boolean)
        Try
            ODatos.ActualizarIdentificadorLocal(idIdentificador, Identificador, placa, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarIdentificadorLocal", "IdIdentificador: " & idIdentificador & ", Identificador: " & Identificador & ", Placa: " & placa & ", EsActivo: " & EsActivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarIdentificadorLocal", "IdIdentificador: " & idIdentificador & ", Identificador: " & Identificador & ", Placa: " & placa & ", EsActivo: " & EsActivo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ExisteClienteLocal(ByVal nuip As String) As Boolean
        Try
            Return ODatos.ExisteClienteLocal(nuip)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteClienteLocal", "NUIP: " & nuip, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteClienteLocal", "NUIP: " & nuip, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarExisteClienteLocal(ByVal DNI As String) As Boolean
        Try
            Return ODatos.ValidarExisteClienteLocal(DNI)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarExisteClienteLocal", "DNI: " & DNI, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarExisteClienteLocal", "DNI: " & DNI, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdentificadoresLocalesPorPlaca(ByVal placa As String) As DataSet
        Try
            Return ODatos.RecuperarIdentificadoresLocalesPorPlaca(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadoresLocalesPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadoresLocalesPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdentificadorLocalPorRom(ByVal rom As String) As DataSet
        Try
            Return ODatos.RecuperarIdentificadorLocalPorRom(rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorRom", "Rom: " & rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorRom", "Rom: " & rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdentificadorLocalPorId(ByVal Identificador As String, ByVal idTipoIdentificador As Int32) As DataSet
        Try
            Return ODatos.RecuperarIdentificadorLocalPorId(Identificador, idTipoIdentificador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorID", "Identificador: " & Identificador & ", idTipoIdentificador:" & idTipoIdentificador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorID", "Identificador: " & Identificador & ", idTipoIdentificador:" & idTipoIdentificador, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    ''' <summary>
    ''' victor
    ''' </summary>
    ''' <param name="Identificador"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function RecuperarIdentificadorLocalPorIdPlacaRefrescar(ByVal Identificador As String) As DataSet
        Try
            Return ODatos.RecuperarIdentificadorLocalPorIdPlacaRefrescar(Identificador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorIdPlacaRefrescar", "IdIdentificador: " & Identificador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorIdPlacaRefrescar", "IdIdentificador: " & Identificador, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    ''' <summary>
    ''' victor
    ''' </summary>
    ''' <param name="Identificador"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function RecuperarIdentificadorLocalPorIdPlaca(ByVal Identificador As String) As DataSet
        Try
            Return ODatos.RecuperarIdentificadorLocalPorIdPlaca(Identificador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorIdPlaca", "IdIdentificador: " & Identificador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorIdPlaca", "IdIdentificador: " & Identificador, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    ''' <summary>
    ''' victor
    ''' </summary>
    ''' <param name="Identificador"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Function RecuperarIdentificadorLocalPorIdPlaca2(ByVal Identificador As String, ByVal placa As String) As DataSet
        Try
            Return ODatos.RecuperarIdentificadorLocalPorIdPlaca2(Identificador, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorIdPlaca", "IdIdentificador: " & Identificador & ",Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadorLocalPorIdPlaca", "IdIdentificador: " & Identificador & ",Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    ''' <summary>
    ''' victor
    ''' </summary>
    ''' <param name="identificador"></param>
    ''' <param name="placa"></param>
    ''' <param name="fecha"></param>
    ''' <remarks></remarks>
    Public Sub InsertarIdentificadorLocalPorIdPlaca(ByVal identificador As String, ByVal placa As String, ByVal fecha As Date)
        Try
            ODatos.InsertarIdentificadorLocalPorIdPlaca(identificador, placa, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarIdentificadorLocalPorIdPlaca", "IdIdentificacion: " & identificador & ", Placa: " & placa & ",FechaCrea: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarIdentificadorLocalPorIdPlaca", "IdIdentificacion: " & identificador & ", Placa: " & placa & ",FechaCrea: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    ''' <summary>
    ''' victor
    ''' </summary>
    ''' <param name="idIdentificador"></param>
    ''' <remarks></remarks>
    Public Sub EliminarIdentificadorLocalPorIdPlaca(ByVal idIdentificador As String, ByVal placa As String)
        Try
            ODatos.EliminarIdentificadorLocalPorIdPlaca(idIdentificador, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarVehiculo", "idIdentificador: " & idIdentificador & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarVehiculo", "idIdentificador: " & idIdentificador & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Function RecuperarROMPorPlaca(ByVal placa As String, Optional ByVal IdEstacion As Int16 = 0) As String
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarROMPorPlaca(placa)
            Else
                Return ODatos.RecuperarROMPorPlaca(placa, IdEstacion)
            End If
        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarROMPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarROMPorPlaca", "IdEstacion " & IdEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarROMPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarROMPorPlaca", "IdEstacion " & IdEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionPorIdentificador(ByVal Numero As String, ByVal IdTipoIdentificador As Short, Optional ByVal IdEstacion As Int16 = 0) As DataTable
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarInformacionPorIdentificador(Numero, IdTipoIdentificador)
            Else
                Return ODatos.RecuperarInformacionPorIdentificador(Numero, IdTipoIdentificador, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarInformacionPorIdentificador", "Numero: " & Numero & ", IdTipoIdentificador:  " & IdTipoIdentificador, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarInformacionPorIdentificador", "IdEstacion: " & IdEstacion & "Numero: " & Numero & ", IdTipoIdentificador:  " & IdTipoIdentificador, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarInformacionPorIdentificador", "Numero: " & Numero & ", IdTipoIdentificador:  " & IdTipoIdentificador, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarInformacionPorIdentificador", "IdEstacion: " & IdEstacion & "Numero: " & Numero & ", IdTipoIdentificador:  " & IdTipoIdentificador, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Sub EliminarVehiculo(ByVal idVehiculo As Int32)
        Try
            ODatos.EliminarVehiculo(idVehiculo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarVehiculo", "idVehiculo: " & idVehiculo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarVehiculo", "IdVehiculo: " & idVehiculo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarIdVehiculo(ByVal Placa As String) As Integer
        Try
            Return ODatos.RecuperarIdVehiculo(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdVehiculo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdVehiculo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVehiculoPorPlaca(ByVal placa As String) As IDataReader
        Try
            Return ODatos.RecuperarVehiculoPorPlaca(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculoPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculoPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarVehiculoGerenciamiento(ByVal placa As String) As Boolean
        Try
            Return ODatos.ValidarVehiculoGerenciamiento(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarvehiculoGerenciamiento", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarvehiculoGerenciamiento", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarAnulacionPgn(ByVal IdAnulacion As Int64) As DataTable
        Try
            Return ODatos.RecuperarAnulacionPgn(IdAnulacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarAnulacionPgn", "IdAnulacion: " & IdAnulacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarAnulacionPgn", "IdAnulacion: " & IdAnulacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVehiculoPlaca(ByVal placa As String) As DataSet
        Try
            Return ODatos.RecuperarVehiculoPlaca(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculoPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculoPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVehiculos() As DataSet
        Try
            Return ODatos.RecuperarVehiculos()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function SolicitaKilometrajePlaca(ByVal Placa As String) As Boolean
        Try
            Return ODatos.SolicitaKilometrajePlaca(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SolicitaKilometrajePlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SolicitaKilometrajePlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function SolicitaKilometrajePorTarjeta(ByVal Tarjeta As String) As Boolean
        Try
            Return ODatos.SolicitaKilometrajePorTarjeta(Tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SolicitaKilometrajePorTarjeta", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SolicitaKilometrajePorTarjeta", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub ValidarProductoVehiculo(ByVal Numero As String, ByVal IdTipoIdentificacion As Int32, ByVal IdProducto As Int32)
        Try
            ODatos.ValidarProductoVehiculo(Numero, IdTipoIdentificacion, IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarProductoVehiculo", "Numero: " & Numero & "IdTipoIdentificacion: " & IdTipoIdentificacion & "IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarProductoVehiculo", "Numero: " & Numero & "IdTipoIdentificacion: " & IdTipoIdentificacion & "IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw

        End Try
    End Sub

    Public Function SolicitaKilometraje(ByVal Rom As String) As Boolean
        Try
            Return ODatos.SolicitaKilometraje(Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SolicitaKilometraje", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SolicitaKilometraje", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarVehiculoLocalPorPlacaFullStationPeru(ByVal placa As String) As IDataReader
        Try
            Return ODatos.RecuperarVehiculoLocalPorPlacaFullStationPeru(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculoLocalPorPlacaFullStationPeru", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculoLocalPorPlacaFullStationPeru", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarTarjetasConsumo() As DataSet
        Try
            Return ODatos.RecuperarTarjetasConsumo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTarjetasConsumo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTarjetasConsumo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFechaProximoMantenimientoVehiculo(ByVal Rom As String, ByVal EsLecturaObligatoria As Boolean) As Date
        Try
            Return ODatos.RecuperarFechaProximoMantenimientoVehiculo(Rom, EsLecturaObligatoria)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFechaProximoMantenimientoVehiculo", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFechaProximoMantenimientoVehiculo", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPlacaPorIdentificador(ByVal ROM As String, ByVal SolicitaLectura As Boolean) As String
        Try
            Return ODatos.RecuperarPlacaPorIdentificador(ROM, SolicitaLectura)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaPorROM", "ROM: " & ROM, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPlacaPorIdentificador(ByVal idIdentificador As Integer) As String
        Try
            Return ODatos.RecuperarPlacaPorIdentificador(idIdentificador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadorPorPlaca", "idIdentificador: " & idIdentificador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadorPorPlaca", "idIdentificador: " & idIdentificador, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPlacaPorROM(ByVal ROM As String) As String
        Try
            Return ODatos.RecuperarPlacaPorROM(ROM)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaPorROM", "ROM: " & ROM, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ValidarAutorizacionCodigoCredito(ByVal Autorizacion As Integer)
        Try
            ODatos.ValidarAutorizacionCodigoCredito(Autorizacion)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarAutorizacionCodigoCredito", "Autorizacion: " & Autorizacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarPlacaVehiculoPorROM(ByVal ROM As String, Optional ByVal EsLocal As Boolean = True) As String
        Try
            Return ODatos.RecuperarPlacaVehiculoPorROM(ROM, EsLocal)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaVehiculoPorROM", "ROM: " & ROM, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarPlacaVehiculoPorTarjeta(ByVal ROM As String) As String
        Try
            Return ODatos.RecuperarPlacaVehiculoPorTarjeta(ROM)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaVehiculoPorTarjeta", "ROM: " & ROM, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarIdentificadorPorPlaca(ByVal placa As String) As IDataReader
        Try
            Return ODatos.RecuperarIdentificadorPorPlaca(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadorPorPlaca", "placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadorPorPlaca", "placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTarjetaConsumoPorNumero(ByVal Numero As String) As IDataReader
        Try
            Return ODatos.RecuperarTarjetaConsumoPorNumero(Numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTarjetaConsumoPorNumero", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTarjetaConsumoPorNumero", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTarjetaConsumoPorNumeroTarjeta(ByVal Numero As String) As DataTable
        Try
            Return ODatos.RecuperarTarjetaConsumoPorNumeroTarjeta(Numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTarjetaConsumoPorNumeroTarjeta", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTarjetaConsumoPorNumeroTarjeta", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVehiculoLocalPorPlaca(ByVal placa As String) As IDataReader
        Try
            Return ODatos.RecuperarVehiculoLocalPorPlaca(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculoLocalPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculoLocalPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVehiculoLocalPorIdentificador(ByVal Rom As String) As IDataReader
        Try
            Return ODatos.RecuperarVehiculoLocalPorIdentificador(Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculoLocalPorIdentificador", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculoLocalPorIdentificador", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarVehiculo(ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As Integer, ByVal IdCausalBloqueo As Integer, ByVal Nuip As String, ByVal precio As Decimal, ByVal rom As String, ByVal ControlKM As Boolean)
        Try
            ODatos.InsertarVehiculo(placa, modelo, IdTipoVehiculo, IdCausalBloqueo, Nuip, precio, rom, ControlKM)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVehiculo(ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As Integer, ByVal IdCausalBloqueo As Integer, ByVal Nuip As String, ByVal precio As Decimal, ByVal identificador As String, ByVal idTipoIdentificador As Int32, ByVal ControlKM As Boolean, ByVal NroTanque As Int16)
        Try
            ODatos.InsertarVehiculo(placa, modelo, IdTipoVehiculo, IdCausalBloqueo, Nuip, precio, identificador, idTipoIdentificador, ControlKM, NroTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVehiculo(ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As Integer, ByVal IdCausalBloqueo As Integer, ByVal Nuip As String, ByVal precio As Decimal, ByVal identificador As String, ByVal idTipoIdentificador As Int32, ByVal ControlKM As Boolean, ByVal NroTanque As Int16, ByVal NuipPropietario As String, ByVal AplicaDataTrack As Boolean)
        Try
            ODatos.InsertarVehiculo(placa, modelo, IdTipoVehiculo, IdCausalBloqueo, Nuip, precio, identificador, idTipoIdentificador, ControlKM, NroTanque, NuipPropietario, AplicaDataTrack)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque & " NuipPropietario" & NuipPropietario & " AplicaDataTrack" & AplicaDataTrack, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque & " NuipPropietario" & NuipPropietario & " AplicaDataTrack" & AplicaDataTrack, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarVehiculo(ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As Integer, ByVal IdCausalBloqueo As Integer, ByVal Nuip As String, ByVal precio As Decimal, ByVal rom As String, ByVal ControlKM As Boolean, ByVal NroTanque As Int16, ByVal Tarjeta As String)
        Try
            ODatos.InsertarVehiculo(placa, modelo, IdTipoVehiculo, IdCausalBloqueo, Nuip, precio, rom, ControlKM, NroTanque, Tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVehiculo(ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As String, ByVal IdCausalBloqueo As Integer, ByVal Nuip As String, ByVal precio As Decimal, ByVal rom As String, ByVal ControlKM As Boolean)
        Try
            ODatos.InsertarVehiculo(placa, modelo, IdTipoVehiculo, IdCausalBloqueo, Nuip, precio, rom, ControlKM)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVehiculoPeru(ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As Integer, ByVal precio As Decimal, ByVal identificador As String, ByVal tipoIdentificador As Int32, ByVal Ruc As String, ByVal NombreConductor As String, ByVal CodigoGerencia As String, ByVal SolicitarKilometraje As Boolean, ByVal Codigo As String)
        Try
            ODatos.InsertarVehiculoPeru(placa, modelo, IdTipoVehiculo, precio, identificador, tipoIdentificador, Ruc, NombreConductor, CodigoGerencia, SolicitarKilometraje, Codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", Precio: " & precio & ", identificador: " & identificador & ", tipoIdentificador: " & tipoIdentificador & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", Precio: " & precio & ", identificador: " & identificador & ", tipoIdentificador: " & tipoIdentificador & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarVehiculoPeru(ByVal idvehiculo As Integer, ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As Integer, ByVal precio As Decimal, ByVal identificador As String, ByVal tipoIdentificador As Int32, ByVal Ruc As String, ByVal NombreConductor As String, ByVal CodigoGerencia As String, ByVal SolicitarKilometraje As Boolean, ByVal Codigo As String)
        Try
            ODatos.ActualizarVehiculoPeru(idvehiculo, placa, modelo, IdTipoVehiculo, precio, identificador, tipoIdentificador, Ruc, NombreConductor, CodigoGerencia, SolicitarKilometraje, Codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", Precio: " & precio & ", identificador: " & identificador & ", tipoIdentificador: " & tipoIdentificador & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", Precio: " & precio & ", identificador: " & identificador & ", tipoIdentificador: " & tipoIdentificador & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarVehiculo(ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As Integer, ByVal IdCausalBloqueo As Long, ByVal Nuip As String, ByVal precio As Decimal, ByVal rom As String, ByVal ControlKM As Boolean)
        Try
            ODatos.ActualizarVehiculo(placa, modelo, IdTipoVehiculo, IdCausalBloqueo, Nuip, precio, rom, ControlKM)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarVehiculo(ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As Integer, ByVal IdCausalBloqueo As Long, ByVal Nuip As String, ByVal precio As Decimal, ByVal identificador As String, ByVal idTipoIdentificador As Int32, ByVal ControlKM As Boolean, ByVal NroTanque As Int16)
        Try
            ODatos.ActualizarVehiculo(placa, modelo, IdTipoVehiculo, IdCausalBloqueo, Nuip, precio, identificador, idTipoIdentificador, ControlKM, NroTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarVehiculo(ByVal placa As String, ByVal modelo As String, ByVal IdTipoVehiculo As Integer, ByVal IdCausalBloqueo As Long, ByVal Nuip As String, ByVal precio As Decimal, ByVal identificador As String, ByVal idTipoIdentificador As Int32, ByVal ControlKM As Boolean, ByVal NroTanque As Int16, ByVal NuipPropietario As String, ByVal AplicaDataTrack As Boolean)
        Try
            ODatos.ActualizarVehiculo(placa, modelo, IdTipoVehiculo, IdCausalBloqueo, Nuip, precio, identificador, idTipoIdentificador, ControlKM, NroTanque, NuipPropietario, AplicaDataTrack)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque & " NuipPropietario" & NuipPropietario & " AplicaDataTrack" & AplicaDataTrack, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & IdTipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador & "ControlKM: " & ControlKM & ", Tanques: " & NroTanque & " NuipPropietario" & NuipPropietario & " AplicaDataTrack" & AplicaDataTrack, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarVehiculo(ByVal placa As String, ByVal modelo As String, ByVal TipoVehiculo As String, ByVal IdCausalBloqueo As Long, ByVal Nuip As String, ByVal precio As Decimal, ByVal rom As String, ByVal ControlKM As Boolean)
        Try
            ODatos.ActualizarVehiculo(placa, modelo, TipoVehiculo, IdCausalBloqueo, Nuip, precio, rom, ControlKM)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & TipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVehiculo", "Placa: " & placa & ", Modelo: " & modelo & ", IdTipoVehiculo: " & TipoVehiculo & ", IdCausalBloqueo: " & IdCausalBloqueo & "Nuip: " & Nuip & ", Precio: " & precio & ", ROM: " & rom & "ControlKM: " & ControlKM, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarTiposVehiculo() As DataSet
        Try
            Return ODatos.RecuperarTiposVehiculo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposVehiculo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposVehiculo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTipoVehiculoPorId(ByVal idTipoVehiculo As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTipoVehiculoPorId(idTipoVehiculo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoVehiculoPorId", "idTipoVehiculo: " & idTipoVehiculo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoVehiculoPorId", "idTipoVehiculo: " & idTipoVehiculo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarTipoVehiculo(ByVal idTipoVehiculo As Int32)
        Try
            ODatos.EliminarTipoVehiculo(idTipoVehiculo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarTipoVehiculo", "idTipoVehiculo: " & idTipoVehiculo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarTipoVehiculo", "idTipoVehiculo: " & idTipoVehiculo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarTipoVehiculo(ByVal idTipoVehiculo As Int32, ByVal descripcion As String)
        Try
            ODatos.ActualizarTipoVehiculo(idTipoVehiculo, descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTipoVehiculo", "idTipoVehiculo: " & idTipoVehiculo & ", descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTipoVehiculo", "idTipoVehiculo: " & idTipoVehiculo & ", descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarTipoVehiculo(ByVal descripcion As String) As Int32
        Try
            Return ODatos.InsertarTipoVehiculo(descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTipoVehiculo", "descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTipoVehiculo", "descripcion: " & descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMotivosBloqueo() As DataSet
        Try
            Return ODatos.RecuperarMotivosBloqueo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMotivosBloqueo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMotivosBloqueo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFinancieras() As DataSet
        Try
            Return ODatos.RecuperarFinancieras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFinancieras", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFinancieras", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCargos() As DataSet
        Try
            Return ODatos.RecuperarCargos()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCargos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCargos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTipoEmpleados() As DataSet
        Try
            Return ODatos.RecuperarTipoEmpleados()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoEmpleados", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoEmpleados", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCentrosInformacion() As DataSet
        Try
            Return ODatos.RecuperarCentrosInformacion
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCentrosInformacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCentrosInformacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarEmpleado(ByVal documento As String, ByVal nombre As String, ByVal codigo As String, ByVal direccion As String, ByVal telefono As String, ByVal idCargo As Int32, ByVal estado As Int32, ByVal idCiudad As Int32, ByVal clave As String, ByVal Usuario As String)
        Try
            ODatos.InsertarEmpleado(documento, nombre, codigo, direccion, telefono, idCargo, estado, idCiudad, clave, Usuario)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", Usuario: " & Usuario, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", Usuario: " & Usuario, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarEmpleado(ByVal documento As String, ByVal nombre As String, ByVal codigo As String, ByVal direccion As String, ByVal telefono As String, ByVal idCargo As Int32, ByVal estado As Int32, ByVal idCiudad As Int32, ByVal clave As String, ByVal Usuario As String, ByVal IdEstacion As Int16)
        Try
            ODatos.InsertarEmpleado(documento, nombre, codigo, direccion, telefono, idCargo, estado, idCiudad, clave, Usuario)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", Usuario: " & Usuario, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", Usuario: " & Usuario, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarEmpleado(ByVal documento As String, ByVal nombre As String, ByVal codigo As String, ByVal direccion As String, ByVal telefono As String, ByVal idCargo As Int32, ByVal estado As Int32, ByVal idCiudad As Int32, ByVal clave As String)
        Try
            ODatos.InsertarEmpleado(documento, nombre, codigo, direccion, telefono, idCargo, estado, idCiudad, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarEmpleadoTipo(ByVal documento As String, ByVal nombre As String, ByVal codigo As String, ByVal direccion As String, ByVal telefono As String, ByVal idCargo As Int32, ByVal estado As Int32, ByVal idCiudad As Int32, ByVal clave As String, ByVal IdTipoEmpleado As String)
        Try
            ODatos.InsertarEmpleadoTipo(documento, nombre, codigo, direccion, telefono, idCargo, estado, idCiudad, clave, IdTipoEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEmpleadoTipo", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", IdTipoEmpleado: " & IdTipoEmpleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEmpleadoTipo", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", IdTipoEmpleado: " & IdTipoEmpleado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarEmpleado(ByVal documento As String, ByVal nombre As String, ByVal codigo As String, ByVal direccion As String, ByVal telefono As String, ByVal idCargo As Int32, ByVal estado As Int32, ByVal idCiudad As Int32, ByVal clave As String, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarEmpleado(documento, nombre, codigo, direccion, telefono, idCargo, estado, idCiudad, clave, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEmpleado(ByVal documento As String, ByVal nombre As String, ByVal codigo As String, ByVal direccion As String, ByVal telefono As String, ByVal idCargo As Int32, ByVal estado As Int32, ByVal idCiudad As Int32, ByVal clave As String, ByVal Usuario As String, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarEmpleado(documento, nombre, codigo, direccion, telefono, idCargo, estado, idCiudad, clave, Usuario, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarEmpleado(ByVal documento As String, ByVal nombre As String, ByVal codigo As String, ByVal direccion As String, ByVal telefono As String, ByVal idCargo As Int32, ByVal estado As Int32, ByVal idCiudad As Int32, ByVal clave As String)
        Try
            ODatos.ActualizarEmpleado(documento, nombre, codigo, direccion, telefono, idCargo, estado, idCiudad, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarEmpleadoTipo(ByVal documento As String, ByVal nombre As String, ByVal codigo As String, ByVal direccion As String, ByVal telefono As String, ByVal idCargo As Int32, ByVal estado As Int32, ByVal idCiudad As Int32, ByVal clave As String, ByVal IdTipoEmpleado As String)
        Try
            ODatos.ActualizarEmpleadoTipo(documento, nombre, codigo, direccion, telefono, idCargo, estado, idCiudad, clave, IdTipoEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEmpleadoTipo", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", IdTipoEmpleado: " & IdTipoEmpleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEmpleadoTipo", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", IdTipoEmpleado: " & IdTipoEmpleado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEmpleado(ByVal documento As String, ByVal nombre As String, ByVal codigo As String, ByVal direccion As String, ByVal telefono As String, ByVal idCargo As Int32, ByVal estado As Int32, ByVal idCiudad As Int32, ByVal clave As String, ByVal IdEstacion As Integer)
        Try
            ODatos.ActualizarEmpleado(documento, nombre, codigo, direccion, telefono, idCargo, estado, idCiudad, clave, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEmpleado", "Documento: " & documento & ", Nombre: " & nombre & ", Codigo: " & codigo & ", Direccion: " & direccion & ", Telefono: " & telefono & ", IdCargo: " & idCargo & ", Estado: " & estado & ", IdCiudad: " & idCiudad & ", IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Function RecuperarEmpleado(ByVal documento As String) As IDataReader
        Try
            Return ODatos.RecuperarEmpleado(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleado", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleado", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleado(ByVal documento As String, ByVal IdEstacion As Integer) As IDataReader
        Try
            Return ODatos.RecuperarEmpleado(documento, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleado", "Documento: " & documento & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleado", "Documento: " & documento & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleadoPorReciboVenta(ByVal Recibo As Int64) As String
        Try
            Return ODatos.RecuperarEmpleadoPorReciboVenta(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorReciboVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorReciboVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleados(ByVal documento As String) As DataSet
        Try
            Return ODatos.RecuperarEmpleados(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleados", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleados", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleadosCDC(ByVal TipoCDC As CDC) As DataTable
        Try
            Return ODatos.RecuperarEmpleadosCDC(CShort(TipoCDC))
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleadosCDC", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleadosCDC", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleados() As DataSet
        Try
            Return ODatos.RecuperarEmpleados()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleados", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleados", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleados(ByVal IdEstacion As Integer) As DataSet
        Try
            Return ODatos.RecuperarEmpleados(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleados", "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleados", "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function ExisteEmpleado(ByVal documento As String) As Boolean
        Try
            Return ODatos.ExisteEmpleado(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteEmpleado", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteEmpleado", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteEmpleado(ByVal documento As String, ByVal IdEstacion As Int16) As Boolean
        Try
            Return ODatos.ExisteEmpleado(documento, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteEmpleado", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteEmpleado", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteEmpleado(ByVal IdEmpleado As Integer) As Boolean
        Try
            Return ODatos.ExisteEmpleado(IdEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteEmpleado", "IdEmpleado: " & IdEmpleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteEmpleado", "IdEmpleado: " & IdEmpleado, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function ExisteEmpleado(ByVal IdEmpleado As Integer, ByVal IdEstacion As Integer) As Boolean
        Try
            Return ODatos.ExisteEmpleado(IdEmpleado, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteEmpleado", "IdEmpleado: " & IdEmpleado & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteEmpleado", "IdEmpleado: " & IdEmpleado & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteEmpleadoDocumento(ByVal documento As String) As Boolean
        Try
            Return ODatos.ExisteEmpleadoDocumento(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteEmpleado", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteEmpleado", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarCarasSurtidorFullStation(ByVal idCara As Int16, ByVal idSurtidor As Int16)
        Try
            ODatos.ActualizarCaraSurtidorFullStation(idCara, idSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCarasSurtidorFullStation", "IDSURTIDOR: " & idSurtidor & " , IDCARA: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCarasSurtidorFullStation", "IDSURTIDOR: " & idSurtidor & " , IDCARA: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarCarasSurtidorFullStation(ByVal idCara As Int16, ByVal idSurtidor As Int16, ByVal idestacion As Int16)
        Try
            ODatos.ActualizarCaraSurtidorFullStation(idCara, idSurtidor, idestacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCarasSurtidorFullStation", "IdEstacion: " & idestacion & "IDSURTIDOR: " & idSurtidor & " , IDCARA: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCarasSurtidorFullStation", "IdEstacion: " & idestacion & "IDSURTIDOR: " & idSurtidor & " , IDCARA: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarCarasSurtidoresFullStation() As DataSet
        Try
            Return ODatos.RecuperarCarasSurtidores()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCarasSurtidoresFullStation", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCarasSurtidoresFullStation", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCarasSurtidoresFullStation(ByVal idEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarCarasSurtidores(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCarasSurtidoresFullStation", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCarasSurtidoresFullStation", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteManejoCarroTanque(ByVal IdCara As Integer) As Boolean
        Try
            Return ODatos.ExisteManejoCarroTanque(IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteManejoCarroTanque", "Id Cara: " & IdCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteManejoCarroTanque", "Id Cara: " & IdCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarProductoPorManguera(ByVal IdManguera As Integer) As Integer
        Try
            Return ODatos.RecuperarProductoPorManguera(IdManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductoPorManguera", "IdManguera: " & IdManguera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductoPorManguera", "IdManguera: " & IdManguera, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarSurtidor(ByVal idSurtidor As Int16, ByVal idProtocolo As Int32, ByVal idIsla As Int32,
                                  ByVal ValorTope As Decimal, ByVal IdRed As Int32,
                                  ByVal ManejaCarroTanque As Boolean, ByVal CodigoPCC As String)
        Try
            ODatos.ActualizarSurtidor(idSurtidor, idProtocolo, idIsla, ValorTope, IdRed, ManejaCarroTanque, CodigoPCC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarSurtidorFullStation(ByVal idSurtidor As Int16, ByVal idProtocolo As Int32, ByVal idIsla As Int32, ByVal ValorTope As Decimal, ByVal IdRed As Int32)
        Try
            ODatos.ActualizarSurtidorFullStation(idSurtidor, idProtocolo, idIsla, ValorTope, IdRed)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarSurtidorFullStation(ByVal idSurtidor As Int16, ByVal idProtocolo As Int32, ByVal idIsla As Int32, ByVal ValorTope As Decimal, ByVal IdRed As Int32, ByVal ManejaPresionLlenado As Boolean)
        Try
            ODatos.ActualizarSurtidorFullStation(idSurtidor, idProtocolo, idIsla, ValorTope, IdRed, ManejaPresionLlenado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo & " , ManejaPresionLlenado: " & ManejaPresionLlenado.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo & " , ManejaPresionLlenado: " & ManejaPresionLlenado.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarSurtidorFullStation(ByVal idSurtidor As Int16, ByVal idProtocolo As Int32, ByVal idIsla As Int32, ByVal ValorTope As Decimal, ByVal IdRed As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.ActualizarSurtidorFullStation(idSurtidor, idProtocolo, idIsla, ValorTope, IdRed, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IdEstacion: " & idEstacion & "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IdEstacion: " & idEstacion & "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarSurtidorFullStation(ByVal idSurtidor As Int16, ByVal idProtocolo As Int32, ByVal idIsla As Int32, ByVal ValorTope As Decimal)
        Try
            ODatos.ActualizarSurtidorFullStation(idSurtidor, idProtocolo, idIsla, ValorTope)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarSurtidorFullStationBolivia(ByVal idSurtidor As Int16, ByVal idProtocolo As Int32, ByVal idIsla As Int32, ByVal ValorTope As Decimal, ByVal IdRed As Int32, ByVal AplicaControlPresionLlenado As Boolean, ByVal Aplicaliquido As Boolean)
        Try
            ODatos.ActualizarSurtidorFullStationBolivia(idSurtidor, idProtocolo, idIsla, ValorTope, IdRed, AplicaControlPresionLlenado, Aplicaliquido)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSurtidor", "IDSURTIDOR: " & idSurtidor & " , IDPROTOCOLO: " & idProtocolo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarCaraSurtidorFullStation(ByVal idCara As Int16)
        Try
            ODatos.EliminarCaraSurtidor(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarCaraSurtidorFullStation", "Numero: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarCaraSurtidorFullStation", "Numero: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub EliminarCaraSurtidorFullStation(ByVal idCara As Int16, ByVal idestacion As Int16)
        Try
            ODatos.EliminarCaraSurtidor(idCara, idestacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarCaraSurtidorFullStation", "IdEstacion: " & idestacion & "Numero: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarCaraSurtidorFullStation", "IdEstacion: " & idestacion & "Numero: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarConfiguracionFullStation() As DataSet
        Try
            Return ODatos.RecuperarConfiguracionFullStation
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConfiguracionFullStation", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConfiguracionFullStation", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConfiguracionFullStation(ByVal IdEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarConfiguracionFullStation(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConfiguracionFullStation", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConfiguracionFullStation", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdentificadores() As DataSet
        Try
            Return ODatos.RecuperarIdentificadores()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadores", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadores", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTipoCredito() As DataSet
        Try
            Return ODatos.RecuperarTipoCredito()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoCredito", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoCredito", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarEncabezadoCredito(ByVal IdCliente As Int64, ByVal Cupo As Decimal, ByVal IdTipo As Integer, ByVal Estado As Boolean, ByVal TipoFacturacion As String, ByVal ManejaCupoPorVehiculo As Boolean, ByVal PermitirUsoEnCanastilla As Boolean, ByVal EsActivoBloqueo As Boolean, ByVal FechaInicialBloqueo As DateTime, ByVal FechaFinalBloqueo As Nullable(Of DateTime), ByVal PlazoPagoFactura As Int32, AplicaRenovacion As Boolean, PeriodoRenovacion As Integer) As Integer
        Try
            Return ODatos.InsertarEncabezadoCredito(IdCliente, Cupo, IdTipo, Estado, TipoFacturacion, ManejaCupoPorVehiculo, PermitirUsoEnCanastilla, EsActivoBloqueo, FechaInicialBloqueo, FechaFinalBloqueo, PlazoPagoFactura, AplicaRenovacion, PeriodoRenovacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEncabezadoCredito", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEncabezadoCredito", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSlogansPorPlaca(ByVal placa As String, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarSlogansPorPlaca(placa)
            Else
                Return ODatos.RecuperarSlogansPorPlaca(placa, idEstacion)
            End If
        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarSlogansPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarSlogansPorPlaca", "IdEstacion: " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarSlogansPorPlaca", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarSlogansPorPlaca", "IdEstacion: " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarMensajesCovinoc(ByVal placa As String, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarMensajesCovinoc(placa)
            Else
                Return ODatos.RecuperarMensajesCovinoc(placa, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarMensajesCovinoc", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarMensajesCovinoc", "IdEstacion: " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarMensajesCovinoc", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarMensajesCovinoc", "IdEstacion: " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarMensajesFinanciacionConsumo(ByVal placa As String) As IDataReader
        Try
            Return ODatos.RecuperarMensajesFinanciacionConsumo(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajesFinanciacionConsumo", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajesFinanciacionConsumo", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEncabezadoCredito(ByVal Nuip As String, ByVal TipoAccion As oAccion) As DataSet
        Try
            Dim oOperacion As Int16

            Select Case TipoAccion
                Case oAccion.EsDocumento
                    oOperacion = 1
                Case oAccion.EsEncabezado
                    oOperacion = 0
                Case oAccion.EsFacturacion
                    oOperacion = 2
                Case oAccion.EsComodin
                    oOperacion = 3
            End Select

            Return ODatos.RecuperarEncabezadoCredito(Nuip, oOperacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoCredito", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoCredito", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarDetalleCredito(ByVal IdCreditoConsumo As Int64, ByVal IdVehiculo As Int32, ByVal IdProducto As Int16, ByVal Estado As Int16, ByVal AutorizaVenta As Boolean, ByVal CupoAsignado As Decimal) As Boolean
        Try
            Return ODatos.InsertarDetalleCredito(IdCreditoConsumo, IdVehiculo, IdProducto, Estado, AutorizaVenta, CupoAsignado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarDetalleCredito", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarDetalleCredito", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDetalleCreditoConsumo(ByVal IdCreditoConsumo As Int64) As DataSet
        Try
            Return ODatos.RecuperarDetalleCreditoConsumo(IdCreditoConsumo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDetalleCreditoConsumo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDetalleCreditoConsumo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEstadosCreditos() As DataSet
        Try
            Return ODatos.RecuperarEstadosCreditos()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstadosCreditos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstadosCreditos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFactoresdeConversion(ByVal IdSurtidor As Int32) As DataSet
        Try
            Return ODatos.RecuperarFactoresdeConversion(IdSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFactoresdeConversion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFactoresdeConversion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarComboFactores() As DataSet
        Try
            Return ODatos.RecuperarComboFactores()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFactoresdeConversion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFactoresdeConversion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ActualizaFactordeDivision(ByVal IdSurtidor As Int32, ByVal Precio As Int16, ByVal Volumen As Int16, ByVal Valor As Int16, ByVal Totalizador As Int16) As Boolean
        Try
            Return ODatos.ActualizaFactordeDivision(IdSurtidor, Precio, Volumen, Valor, Totalizador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizaFactordeDivision", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizaFactordeDivision", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ActualizaFactordeDivision(ByVal IdSurtidor As Int32, ByVal Precio As Int16, ByVal Volumen As Int16, ByVal Valor As Int16, ByVal Totalizador As Int16, ByVal PredeterminacionVol As Int16, ByVal PredeterminacionImp As Int16) As Boolean
        Try
            Return ODatos.ActualizaFactordeDivision(IdSurtidor, Precio, Volumen, Valor, Totalizador, PredeterminacionVol, PredeterminacionImp)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizaFactordeDivision", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizaFactordeDivision", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRedCaras(ByVal idRed As Integer, Optional ByVal idEstacion As Int16 = 0) As DataSet
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarRedCaras(idRed)
            Else
                Return ODatos.RecuperarRedCaras(idRed, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarRedCaras", "idRed: " & idRed, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarRedCaras", "IdEstacion: " & idEstacion & "idRed: " & idRed, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarRedCaras", "idRed: " & idRed, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarRedCaras", "IdEstacion: " & idEstacion & "idRed: " & idRed, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarManguerasPorCara(ByVal cara As Byte) As DataSet
        Try
            Return ODatos.RecuperarManguerasPorCara(cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasPorCara", "Cara: " & cara.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasPorCara", "Cara: " & cara.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarManguerasPorCara(ByVal cara As Byte, ByVal IdEstacion As Short) As DataSet
        Try
            Return ODatos.RecuperarManguerasPorCara(cara, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasPorCara", "Cara: " & cara.ToString & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasPorCara", "Cara: " & cara.ToString & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function






    Public Function RecuperarCreditoPorIdentificador(ByVal rom As String, ByVal idProducto As String, ByVal valor As Decimal) As IDataReader
        Try
            Return ODatos.RecuperarCreditoPorIdentificador(rom, idProducto, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "Rom: " & rom & " , Producto: " & idProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "Rom: " & rom & " , Producto: " & idProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCreditoPorIdentificador(ByVal rom As String, ByVal idProducto As String, ByVal valor As Decimal, ByVal precio As Decimal, ByVal cara As Int16, ByVal tipoPresetMR As Int32, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarCreditoPorIdentificador(rom, idProducto, valor, precio, cara, tipoPresetMR)
            Else
                Return ODatos.RecuperarCreditoPorIdentificador(rom, idProducto, valor, precio, cara, tipoPresetMR, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "Rom: " & rom & " , Producto: " & idProducto, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "IdEsatcion: " & idEstacion & "Rom: " & rom & " , Producto: " & idProducto, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "Rom: " & rom & " , Producto: " & idProducto, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "IdEsatcion: " & idEstacion & "Rom: " & rom & " , Producto: " & idProducto, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarCreditoPorIdentificador(ByVal identificador As String, ByVal idProducto As String, ByVal valor As Decimal, ByVal precio As Decimal, ByVal cara As Int16, ByVal tipoPresetMR As Int32, ByVal tipoIdentificacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarCreditoPorIdentificador(identificador, idProducto, valor, precio, cara, tipoPresetMR, tipoIdentificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "identificador: " & identificador & " , Producto: " & idProducto & " , TipoIdentificacion: " & tipoIdentificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditoPorIdentificador", "identificador: " & identificador & " , Producto: " & idProducto & " , TipoIdentificacion: " & tipoIdentificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosAutorizacionVehiculo(ByVal placa As String, Optional ByVal IdEstacion As Int16 = 0) As IDataReader
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarDatosAutorizacionVehiculo(placa)
            Else
                Return ODatos.RecuperarDatosAutorizacionVehiculo(placa, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarDatosAutorizacionVehiculo", "placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarDatosAutorizacionVehiculo", "IdEstacion " & IdEstacion & "placa: " & placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarDatosAutorizacionVehiculo", "placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarDatosAutorizacionVehiculo", "IdEstacion " & IdEstacion & "placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarDatosVehiculoPorTarjetaFlota(ByVal nroTarjeta As String) As IDataReader
        Try
            Return ODatos.RecuperarDatosVehiculoPorTarjetaFlota(nroTarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoPorTarjetaFlota", "nroTarjeta: " & nroTarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoPorTarjetaFlota", "nroTarjeta: " & nroTarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarPlacaUltimaVenta(ByVal cara As Byte, ByVal placa As String)
        Try
            ODatos.InsertarPlacaUltimaVenta(cara, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPlacaUltimaVenta", "cara: " & cara & " , placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPlacaUltimaVenta", "cara: " & cara & " , placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarPlacaUltimaVenta(ByVal cara As Byte, ByVal placa As String, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarPlacaUltimaVenta(cara, placa, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPlacaUltimaVenta", "IdEstacion: " & idEstacion & "cara: " & cara & " , placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPlacaUltimaVenta", "IdEstacion: " & idEstacion & "cara: " & cara & " , placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarPlacaRecibo(ByVal recibo As Long, ByVal placa As String)
        Try
            ODatos.InsertarPlacaRecibo(recibo, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPlacaRecibo", "recibo: " & recibo & " , placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPlacaRecibo", "recibo: " & recibo & " , placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarKilometrajeUltimaVenta(ByVal cara As Byte, ByVal kilometraje As String)
        Try
            ODatos.InsertarKilometrajeUltimaVenta(cara, kilometraje)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarKilometrajeUltimaVenta", "cara: " & cara & " , kilometraje: " & kilometraje, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarKilometrajeUltimaVenta", "cara: " & cara & " , kilometraje: " & kilometraje, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ExisteCreditoVehiculo(ByVal placa As String) As Boolean
        Try
            Return ODatos.ExisteCreditoVehiculo(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteCreditoVehiculo", "placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteCreditoVehiculo", "placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPreciosProductos() As DataSet
        Try
            Return ODatos.RecuperarPreciosProductos()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPreciosProductos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPreciosProductos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarPreciosProductos(ByVal idEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarPreciosProductos(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPreciosProductos", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPreciosProductos", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarMontoFacturar(ByVal FechaInicial As String, ByVal FechaFinal As String, ByVal Facturar As Boolean) As DataSet
        Try
            Return ODatos.RecuperarMontoFacturar(FechaInicial, FechaFinal, Facturar)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPreciosProductos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPreciosProductos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturasCreditoConsumo(ByVal Nuip As String) As DataSet
        Try
            Return ODatos.RecuperarFacturasCreditoConsumo(Nuip)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturasCreditoConsumo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturasCreditoConsumo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub RegistrarPagoFactura(ByVal IdFactura As Int64)
        Try
            ODatos.RegistrarPagoFactura(IdFactura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RegistrarPagoFactura", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RegistrarPagoFactura", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarClienteLocal(ByVal nuip As String) As IDataReader
        Try
            Return ODatos.RecuperarClienteLocal(nuip)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClienteLocal", "Nuip: " & nuip, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClienteLocal", "Nuip: " & nuip, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarTanqueosPorDia(ByVal placa As String) As Boolean
        Try
            Return ODatos.ValidarTanqueosPorDia(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTanqueosPorDia", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTanqueosPorDia", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ValidaRestricciones(ByVal identificador As String, ByVal producto As Integer)
        Try
            ODatos.ValidaRestricciones(identificador, producto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidaRestricciones", "identificador: " & identificador & " , Producto: " & producto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidaRestricciones", "identificador: " & identificador & " , Producto: " & producto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ValidaRestricciones(ByVal identificador As String, ByVal IdTipoIdentificador As Int32, ByVal producto As Integer)
        Try
            ODatos.ValidaRestricciones(identificador, IdTipoIdentificador, producto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidaRestricciones", "identificador: " & identificador & " , Producto: " & producto & " , IdTipoIdentificador: " & IdTipoIdentificador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidaRestricciones", "identificador: " & identificador & " , Producto: " & producto & " , IdTipoIdentificador: " & IdTipoIdentificador, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ValidaRestricciones(ByVal identificador As String, ByVal idTipoIdentificador As Int32, ByVal producto As Integer, ByVal kilometraje As String)
        Try
            ODatos.ValidaRestricciones(identificador, idTipoIdentificador, producto, kilometraje)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidaRestricciones", "identificador: " & identificador & " , Producto: " & producto & " , Kilometraje: " & kilometraje, "FallaStoredProcedure")

            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidaRestricciones", "identificador: " & identificador & " , Producto: " & producto & " , Kilometraje: " & kilometraje, "FallaStoredProcedure")

            Throw
        End Try
    End Sub

    Public Sub ValidaRestricciones(ByVal identificador As String, ByVal producto As Integer, ByVal kilometraje As String, ByVal tipoIdentificacion As Int32, Optional ByVal PIN As String = Nothing)
        Try
            ODatos.ValidaRestricciones(identificador, producto, kilometraje, tipoIdentificacion, PIN)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidaRestricciones", "identificador: " & identificador & " , Producto: " & producto & " , Kilometraje: " & kilometraje & ", tipoIdentificacion: " & tipoIdentificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidaRestricciones", "identificador: " & identificador & " , Producto: " & producto & " , Kilometraje: " & kilometraje & ", tipoIdentificacion: " & tipoIdentificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function EsventaImpresa(ByVal Recibo As Long) As Boolean
        Try
            Return ODatos.EsventaImpresa(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsventaImpresa", "producto: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsventaImpresa", "producto: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ValidarImpresionVenta(ByVal Recibo As Long)
        Try
            ODatos.ValidarImpresionVenta(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarImpresionVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarImpresionVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Function ValidarImpresionTurnoPorLote(ByVal Idturno As Integer) As Boolean
        Try
            Return ODatos.ValidarImpresionTurnoPorLote(Idturno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarImpresionTurnoPorLote", "IdTurno: " & Idturno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarImpresionTurnoPorLote", "IdTurno: " & Idturno, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ActualizarVentaImpresaReimpresion(ByVal Recibo As Long)
        Try
            ODatos.ActualizarVentaImpresaReimpresion(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVentaImpresaReimpresion", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVentaImpresaReimpresion", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarVentaImpresa(ByVal Recibo As Long)
        Try
            ODatos.ActualizarVentaImpresa(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVentaImpresa", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVentaImpresa", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub ActualizarTurnoImpreso(ByVal IdTurno As Integer)
        Try
            ODatos.ActualizarTurnoImpreso(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTurnoImpreso", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTurnoImpreso", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function EsNotificacionDelKardexActual(ByVal idNotificacion As Int64) As Boolean
        Try
            Return ODatos.EsNotificacionDelKardexActual(idNotificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsNotificacionDelKardexActual", "idNotificacion: " & idNotificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsNotificacionDelKardexActual", "idNotificacion: " & idNotificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNotificacionKardexSinImprimir(ByVal idNotificacion As Int64) As Int64
        Try
            Return ODatos.RecuperarNotificacionKardexSinImprimir(idNotificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNotificacionKardexSinImprimir", "idNotificacion: " & idNotificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNotificacionKardexSinImprimir", "idNotificacion: " & idNotificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarEstadoImpresionNotificacionKardex(ByVal idNotificacion As Int64, ByVal esImpresa As Boolean)
        Try
            ODatos.ActualizarEstadoImpresionNotificacionKardex(idNotificacion, esImpresa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoImpresionNotificacionKardex", "idNotificacion: " & idNotificacion & ", esImpresa: " & esImpresa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoImpresionNotificacionKardex", "idNotificacion: " & idNotificacion & ", esImpresa: " & esImpresa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function EsNotificacionKardexImpresa(ByVal idNotificacion As Int64) As Boolean
        Try
            Return ODatos.EsNotificacionKardexImpresa(idNotificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsNotificacionKardexImpresa", "idNotificacion: " & idNotificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsNotificacionKardexImpresa", "idNotificacion: " & idNotificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function SolicitaChipParaVenderEnCara(ByVal idCara As String) As Boolean
        Try

            Return ODatos.SolicitaChipParaVenderEnCara(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsLecturaChipObligatoria", "idCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsLecturaChipObligatoria", "idCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function EsLecturaChipObligatoria(ByVal producto As Integer, Optional ByVal IdEstacion As Integer = 0) As Boolean
        Try
            'Realizado por: Christian Galvis 01-09-10 
            If IdEstacion = 0 Then
                Return ODatos.EsLecturaChipObligatoria(producto)
            Else
                Return ODatos.EsLecturaChipObligatoria(producto, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "EsLecturaChipObligatoria", "producto: " & producto, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "EsLecturaChipObligatoria", "producto: " & producto & " estacion: " & IdEstacion, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "EsLecturaChipObligatoria", "producto: " & producto, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "EsLecturaChipObligatoria", "producto: " & producto & " estacion: " & IdEstacion, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarVehiculosporClienteLocal(ByVal NUIP As String) As DataSet
        Try
            Return ODatos.RecuperarVehiculosporClienteLocal(NUIP)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculosporClienteLocal", "NUIP: " & NUIP, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculosporClienteLocal", "NUIP: " & NUIP, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarIdCreditoLocal(ByVal placa As String) As DataSet
        Try
            Return ODatos.RecuperarIdCreditoLocal(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdCreditoLocal", "placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdCreditoLocal", "placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTipoFacturacion(ByVal Tipo As String) As DataSet
        Try
            Return ODatos.RecuperarTipoFacturacion(Tipo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoFacturacion", "Tipo: " & Tipo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoFacturacion", "Tipo: " & Tipo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function GeneraFacturacion(ByVal IdCredito As Int32, ByVal FechaFinal As String) As Boolean
        Try
            Return ODatos.GeneraFacturacion(IdCredito, FechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "GeneraFacturacion", "IdCredito: " & IdCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "GeneraFacturacion", "IdCredito: " & IdCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPrepago(ByVal Nuip As String) As DataTable
        Try
            Return ODatos.RecuperarPrepago(Nuip)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrepago", "Documento: " & Nuip, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrepago", "Documento: " & Nuip, "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Function InsertarPrepago(ByVal Afectacion As Boolean, ByVal Monto As Decimal, ByVal FechaInsercion As String, ByVal Concepto As String,
                                ByVal Documento As Int64, ByVal Cuenta As Int64, ByVal Origen As String, ByVal Placa As String, ByVal CupoAsignado As Decimal) As Boolean
        Try
            Return ODatos.InsertarPrepago(Afectacion, Monto, FechaInsercion, Concepto, Documento, Cuenta, Origen, Placa, CupoAsignado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPrepago", "Afectacion: " & Afectacion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPrepago", "Afectacion: " & Afectacion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region


    Public Function RecuperarReciboPorCara(ByVal Cara As Int16) As Long
        Try
            Return ODatos.RecuperarReciboPorCara(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorCara", "Cara: " & Cara.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorCara", "Cara: " & Cara.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub RecuperarReciboFactura(ByVal numero As String, ByRef recibo As Int64, ByRef id_documento As Int64)
        Try
            ODatos.RecuperarReciboFactura(numero, recibo, id_documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboFactura", "numero: " & numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboFactura", "numero: " & numero, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub DisminuirCupoVehiculoRetirado(ByVal Placa As String, ByVal id_documento As String)
        Try
            ODatos.DisminuirCupoVehiculoRetirado(Placa, id_documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "DisminuirCupoVehiculoRetirado", "Placa: " & Placa & " IdCredito: " & id_documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "DisminuirCupoVehiculoRetirado", "Placa: " & Placa & " IdCredito: " & id_documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub RecuperarReciboFactura(ByVal recibo As Int64, ByRef id_documento As Int64)
        Try
            ODatos.RecuperarReciboFactura(recibo, id_documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboFactura", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboFactura", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarLLaveCodigoVerificacion(ByVal Llave As String, ByVal FechaInicial As DateTime, ByVal FechaFinal As DateTime)
        Try
            ODatos.InsertarLLaveCodigoVerificacion(Llave, FechaInicial, FechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLLaveCodigoVerificacion", "Llave: " & Llave.ToString & "FechaInicial: " & FechaInicial.ToString & "FechaFinal: " & FechaFinal.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLLaveCodigoVerificacion", "Llave: " & Llave.ToString & "FechaInicial: " & FechaInicial.ToString & "FechaFinal: " & FechaFinal.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarLLaveCodigoVerificacion(ByVal IdLlave As Integer, ByVal Llave As String, ByVal FechaInicial As DateTime, ByVal FechaFinal As DateTime)
        Try
            ODatos.ActualizarLLaveCodigoVerificacion(IdLlave, Llave, FechaInicial, FechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarLLaveCodigoVerificacion", "IdLlave: " & IdLlave.ToString & "Llave: " & Llave.ToString & "FechaInicial: " & FechaInicial.ToString & "FechaFinal: " & FechaFinal.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarLLaveCodigoVerificacion", "IdLlave: " & IdLlave.ToString & "Llave: " & Llave.ToString & "FechaInicial: " & FechaInicial.ToString & "FechaFinal: " & FechaFinal.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function SolicitaLectura(ByVal IdProducto As Integer) As Boolean
        Try
            Return ODatos.SolicitaLectura(IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "IdProducto", "IdProducto: " & IdProducto.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "IdProducto", "IdProducto: " & IdProducto.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function DevolucionDocumentoCanastilla(ByVal Recibo As Integer) As Integer
        Try
            Return ODatos.DevolucionDocumentoCanastilla(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "DevolucionDocumentoCanastilla " & "," & "Recibo: " & Recibo.ToString, "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "DevolucionDocumentoCanastilla " & "," & "Recibo: " & Recibo.ToString, "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarCodigoControl(ByVal recibo As Int64, ByVal codigoautorizacionestacion As String, ByVal codigocontrol As String)
        Try
            ODatos.ActualizarCodigoControl(recibo, codigoautorizacionestacion, codigocontrol)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCodigoControl", "Recibo: " & recibo & ", CodigoAutorizacionEstacion: " & codigoautorizacionestacion & ", CodigoControl: " & codigocontrol, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCodigoControl", "Recibo: " & recibo & ", CodigoAutorizacionEstacion: " & codigoautorizacionestacion & ", CodigoControl: " & codigocontrol, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


#Region "   Uso General - Consultas Display   "

    Public Function RecuperarVentaDisplay() As DataTable
        Try
            Return ODatos.RecuperarVentaDisplay()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaDisplay", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaDisplay", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ActualizaSaldos(ByVal IdTipoCredito As Integer) As Boolean
        Try
            Return ODatos.ActualizaSaldos(IdTipoCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizaSaldos", "IdTipoCredito: " & IdTipoCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizaSaldos", "IdTipoCredito: " & IdTipoCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Terpel FullStation"
    Public Sub EliminarCupoEnReserva(ByVal idCara As Int16)
        Try
            ODatos.EliminarCupoEnReserva(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarCupoEnReserva", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarCupoEnReserva", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub EliminarCupoEnReserva(ByVal idCara As Int16, ByVal idEstacion As Int16)
        Try
            ODatos.EliminarCupoEnReserva(idCara, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarCupoEnReserva", "IdEstacion: " & idEstacion & "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarCupoEnReserva", "IdEstacion: " & idEstacion & "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub VerificarVentaGasoNet(ByVal IdCara As Int32)
        Try
            ODatos.VerificarVentaGasoNet(IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "VerificarVentaGasoNet", "IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "VerificarVentaGasoNet", "IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarConsumoEnReserva(ByVal Placa As String)
        Try
            ODatos.EliminarConsumoEnReserva(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarConsumoEnReserva", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarConsumoEnReserva", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarConsumoEnReserva(ByVal identificador As String, ByVal idTipoIdentificador As Int32)
        Try
            ODatos.EliminarConsumoEnReserva(identificador, idTipoIdentificador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarConsumoEnReserva", "identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarConsumoEnReserva", "identificador: " & identificador & ", idTipoIdentificador: " & idTipoIdentificador, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarTurnosEntreFecha(ByVal fechaInicial As String, ByVal fechaFinal As String) As IDataReader
        Try
            Return ODatos.RecuperarTurnosEntreFecha(fechaInicial, fechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnosEntreFecha", "FechaInicial: " & fechaInicial & ", FechaFinal: " & fechaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnosEntreFecha", "FechaInicial: " & fechaInicial & ", FechaFinal: " & fechaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMapaTurnoExport(ByVal idTurno As Int32) As DataTable
        Try
            Return ODatos.RecuperarMapaTurnoExport(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMapaTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMapaTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCuentasPorTurnoExport(ByVal idTurno As Int32) As DataTable
        Try
            Return ODatos.RecuperarCuentasPorTurnoExport(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCuentasPorTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCuentasPorTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosPorTurnoExport(ByVal idTurno As Int32) As DataTable
        Try
            Return ODatos.RecuperarProductosPorTurnoExport(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosPorTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosPorTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLecturasPorTurnoExport(ByVal idTurno As Int32) As DataTable
        Try
            Return ODatos.RecuperarLecturasPorTurnoExport(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasPorTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasPorTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasPorTurnoExport(ByVal idTurno As Int32) As DataTable
        Try
            Return ODatos.RecuperarVentasPorTurnoExport(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasPorTurnoExport", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasGRPPorFecha(ByVal fechaInicio As String, ByVal fechaFinal As String) As DataTable
        Try
            Return ODatos.RecuperarVentasGRPPorFecha(fechaInicio, fechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasGRPPorFecha", "fechaInicio: " & fechaInicio & " , FechaFinal " & fechaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasGRPPorFecha", "fechaInicio: " & fechaInicio & " , FechaFinal " & fechaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ImportarArchivoTerpel(ByVal Empresa As String, ByVal Direccion As String, ByVal Nit As String, ByVal Telefono As String, ByVal PorcDescuento As Decimal, ByVal TipoCuenta As String, ByVal Saldo As Decimal, ByVal ValMaxCredito As Decimal, ByVal FechaInicialCredito As DateTime, ByVal FechaFinalCredito As DateTime, ByVal BloqueadoCredito As Boolean, ByVal Placa As String, ByVal Marca As String, ByVal FechaRegistro As DateTime, ByVal Producto1 As String, ByVal Producto2 As String, ByVal Rom As String, ByVal MaxPreset As Integer, ByVal MapaHoras As String, ByVal MaxVisitasDias As Integer, ByVal BloqueoVehiculo As Boolean, ByVal ControlKilometraje As Boolean, ByVal esCorporativa As Boolean, ByVal maxVolumenSemanal As Decimal, ByVal maxVolumenMensual As Decimal, ByVal Representante As String)
        Try
            ODatos.ImportarArchivoTerpel(Empresa, Direccion, Nit, Telefono, PorcDescuento, TipoCuenta, Saldo, ValMaxCredito, FechaInicialCredito, FechaFinalCredito, BloqueadoCredito, Placa, Marca, FechaRegistro, Producto1, Producto2, Rom, MaxPreset, MapaHoras, MaxVisitasDias, BloqueoVehiculo, ControlKilometraje, esCorporativa, maxVolumenSemanal, maxVolumenMensual, Representante)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ImportarArchivoTerpel", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ImportarArchivoTerpel", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Sub

    Public Function InsertarRestriccion(ByVal IdVehiculo As Int64, ByVal Tanqueos As Int64, ByVal Preset As Decimal) As Int64
        Try
            Return ODatos.InsertarRestriccion(IdVehiculo, Tanqueos, Preset)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRestriccion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRestriccion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarRestriccion(ByVal IdVehiculo As Int64, ByVal Tanqueos As Int64, ByVal Preset As Decimal, ByVal PresetSemanal As Decimal, ByVal PresetMensual As Decimal) As Int64
        Try
            Return ODatos.InsertarRestriccion(IdVehiculo, Tanqueos, Preset, PresetSemanal, PresetMensual)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRestriccion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRestriccion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarRestriccion(ByVal IdVehiculo As Int64, ByVal Tanqueos As Int64, ByVal Preset As Decimal, ByVal PresetSemanal As Decimal, ByVal PresetMensual As Decimal, ByVal Estado As Boolean) As Int64
        Try
            Return ODatos.InsertarRestriccion(IdVehiculo, Tanqueos, Preset, PresetSemanal, PresetMensual, Estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRestriccion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRestriccion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRestriccionBasica(ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarRestriccionBasica(Placa).Tables(0)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRestriccionBasica", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRestriccionBasica", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub InsertarRestriccionDia(ByVal Placa As String, ByVal IdDia As Int64)
        Try
            ODatos.InsertarRestriccionDia(Placa, IdDia)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRestriccionDia", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRestriccionDia", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub

    Public Function RecuperarRestriccionDia(ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarRestriccionDia(Placa).Tables(0)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRestriccionDia", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRestriccionDia", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarRestriccionHora(ByVal Placa As String, ByVal HoraInicial As String, ByVal HoraFinal As String)
        Try
            ODatos.InsertarRestriccionHora(Placa, HoraInicial, HoraFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRestriccionHora", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRestriccionHora", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub

    Public Function RecuperarRestriccionHora(ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarRestriccionHora(Placa).Tables(0)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRestriccionHora", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRestriccionHora", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarRestriccionHoraDia(ByVal Placa As String, ByVal IdDia As Int16, ByVal HoraInicial As String, ByVal HoraFinal As String)
        Try
            ODatos.InsertarRestriccionHoraDia(Placa, IdDia, HoraInicial, HoraFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRestriccionHoraDia", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRestriccionHoraDia", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub

    Public Function RecuperarRestriccionHoraDia(ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarRestriccionHoraDia(Placa).Tables(0)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRestriccionHoraDia", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRestriccionHoraDia", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarRestriccionProducto(ByVal IdVehiculo As Int64, ByVal IdProducto As Int16)
        Try
            ODatos.InsertarRestriccionProducto(IdVehiculo, IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRestriccionProducto", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRestriccionProducto", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub

    Public Function RecuperarRestriccionProducto(ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarRestriccionProducto(Placa).Tables(0)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRestriccionProducto", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRestriccionProducto", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosVehiculoRestriccion(ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarDatosVehiculoRestriccion(Placa).Tables(0)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoRestriccion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoRestriccion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRestriccionesTipo(ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarRestriccionesTipo(Placa).Tables(0)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRestriccionesTipo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRestriccionesTipo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDiasSemana() As DataTable
        Try
            Return ODatos.RecuperarDiasSemana().Tables(0)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDiasSemana", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDiasSemana", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarRestriccionBasica(ByVal IdRestriccion As Int64)
        Try
            ODatos.EliminarRestriccionBasica(IdRestriccion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarRestriccionBasica", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarRestriccionBasica", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub

    Public Sub EliminarRestriccionDia(ByVal IdRestriccionDia As Int64)
        Try
            ODatos.EliminarRestriccionDia(IdRestriccionDia)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarRestriccionDia", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarRestriccionDia", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub

    Public Sub EliminarRestriccionHora(ByVal IdRestriccionHora As Int64)
        Try
            ODatos.EliminarRestriccionHora(IdRestriccionHora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarRestriccionHora", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarRestriccionHora", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub

    Public Sub EliminarRestriccionProducto(ByVal IdProducto As Int64, ByVal IdVehiculo As Int64)
        Try
            ODatos.EliminarRestriccionProducto(IdProducto, IdVehiculo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarRestriccionProducto", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarRestriccionProducto", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub

    Public Sub EliminarRestriccionHoraDia(ByVal IdRestriccionDia As Int64, ByVal IdRestriccionHora As Int64)
        Try
            ODatos.EliminarRestriccionHoraDia(IdRestriccionDia, IdRestriccionHora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarRestriccionHoraDia", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarRestriccionHoraDia", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub
    Public Function RecuperarUnidadMedida() As DataTable
        Try
            Return ODatos.RecuperarUnidadMedida()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUnidadMedida", "-", "RecuperarUnidadMedida")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUnidadMedida", "-", "RecuperarUnidadMedida")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosMedida() As DataTable
        Try
            Return ODatos.RecuperarProductosMedida()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosMedida", "-", "RecuperarProductosMedida")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosMedida", "-", "RecuperarProductosMedida")
            Throw
        End Try
    End Function
    Public Function RecuperarDatosTipoCombustible() As DataTable
        Try
            Return ODatos.RecuperarDatosTipoCombustible()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " RecuperarDatosTipoCombustible", "-", " RecuperarDatosTipoCombustible")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " RecuperarDatosTipoCombustible", "-", "RecuperarDatosTipoCombustible")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosMenoCash(ByVal IdCara As Int32, IdProducto As Int32) As IDataReader
        Try
            Return ODatos.RecuperarDatosMenoCash(IdCara, IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " RecuperarDatosMenoCash", "-", " RecuperarDatosTipoCombustible")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " RecuperarDatosMenoCash", "-", "RecuperarDatosTipoCombustible")
            Throw
        End Try
    End Function

    Public Function RecuperarNumeroGasoNet(ByVal IdCara As Int32) As IDataReader
        Try
            Return ODatos.RecuperarNumeroGasoNet(IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " RecuperarNumeroGasoNet", "-", " RecuperarDatosTipoCombustible")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " RecuperarNumeroGasoNet", "-", "RecuperarDatosTipoCombustible")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosTicketGasoNet(ByVal Recibo As String) As IDataReader
        Try
            Return ODatos.RecuperarDatosTicketGasoNet(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " RecuperarDatosTicketGasoNet", "-", " RecuperarDatosTipoCombustible")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " RecuperarDatosTicketGasoNet", "-", "RecuperarDatosTipoCombustible")
            Throw
        End Try
    End Function

    Public Function InsertarVentaGasoNet(ByVal cara As Int16, ByVal CodigoPreautorizacion As String, ByVal CodigoConfirmacion As String, ByVal MensajePreautorizacion As String, ByVal MensajeConfirmacion As String,
                                  ByVal FechaAprobacion As String, ByVal FechaConfirmacion As String, ByVal NumeroPreautorizacion As String, ByVal NumeroConfirmacion As String, ByVal ValorConfirmacion As Decimal,
                                  ByVal ValorAutorizado As String, ByVal Recibo As String, ByVal Estado As Int32, ByVal PlacaGasoNet As String, ByVal NombreCliente As String, ByVal Tarjeta As String) As Int32
        Try
            Return ODatos.InsertarVentaGasoNet(cara, CodigoPreautorizacion, CodigoConfirmacion, MensajePreautorizacion, MensajeConfirmacion, FechaAprobacion, FechaConfirmacion, NumeroPreautorizacion, NumeroConfirmacion, ValorConfirmacion,
                                  ValorAutorizado, Recibo, Estado, PlacaGasoNet, NombreCliente, Tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " InsertarVentaGasoNet", "-", " RecuperarDatosTipoCombustible")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " InsertarVentaGasoNet", "-", "RecuperarDatosTipoCombustible")
            Throw
        End Try

    End Function

    Public Sub InsertarActualizarVentaGasoNet(ByVal cara As Int16, ByVal CodigoPreautorizacion As String, ByVal CodigoConfirmacion As String, ByVal MensajePreautorizacion As String, ByVal MensajeConfirmacion As String,
                                 ByVal FechaAprobacion As String, ByVal FechaConfirmacion As String, ByVal NumeroPreautorizacion As String, ByVal NumeroConfirmacion As String, ByVal ValorConfirmacion As Decimal,
                                 ByVal ValorAutorizado As Decimal, ByVal Recibo As String, ByVal Estado As Int32, ByVal PlacaGasoNet As String, ByVal NombreCliente As String, ByVal Tarjeta As String)
        Try
            ODatos.InsertarActualizarVentaGasoNet(cara, CodigoPreautorizacion, CodigoConfirmacion, MensajePreautorizacion, MensajeConfirmacion, FechaAprobacion, FechaConfirmacion, NumeroPreautorizacion, NumeroConfirmacion, ValorConfirmacion,
                                  ValorAutorizado, Recibo, Estado, PlacaGasoNet, NombreCliente, Tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " InsertarActualizarVentaGasoNet", "-", " RecuperarDatosTipoCombustible")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " InsertarActualizarVentaGasoNet", "-", "RecuperarDatosTipoCombustible")
            Throw
        End Try

    End Sub


    Public Sub InsertarProducto(ByVal IdProducto As Int16, ByVal Nombre As String, ByVal SolicitarLectura As Boolean, ByVal Unidad As Int16)
        Try
            ODatos.InsertarProducto(IdProducto, Nombre, SolicitarLectura, Unidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarProducto", "Producto: " & Nombre, "InsertarProducto")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarProducto", "Producto: " & Nombre, "InsertarProducto")
            Throw
        End Try
    End Sub
    Public Sub InsertarProductoFullStationBolivia(ByVal IdProducto As Int16, ByVal Nombre As String, ByVal SolicitarLectura As Boolean, ByVal Unidad As Int16, ByVal Abreviatura As String)
        Try
            ODatos.InsertarProductoFullStationBolivia(IdProducto, Nombre, SolicitarLectura, Unidad, Abreviatura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarProducto", "Producto: " & Nombre, "InsertarProducto")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarProducto", "Producto: " & Nombre, "InsertarProducto")
            Throw
        End Try
    End Sub

    Public Sub InsertarProducto(ByVal IdProducto As Int16, ByVal Nombre As String, ByVal SolicitarLectura As Boolean, ByVal Unidad As Int16,
                                ByVal codigoContable As String, ByVal codigoTerpel As Nullable(Of Int64), ByVal CodigoMenoCash As String)
        Try
            ODatos.InsertarProducto(IdProducto, Nombre, SolicitarLectura, Unidad, codigoContable, codigoTerpel, CodigoMenoCash)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarProducto", "Producto: " & Nombre, "InsertarProducto")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarProducto", "Producto: " & Nombre, "InsertarProducto")
            Throw
        End Try
    End Sub

    Public Function RecuperarDocumentoFactura(ByVal Documento As String) As DataTable
        Try
            Return ODatos.RecuperarDocumentoFactura(Documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDocumentoFactura", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDocumentoFactura", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Metodos Servicios Web Financieras"

    Public Sub ActualizarPorcentajeRecaudo(ByVal codFinanciera As Integer, ByVal placa As String, ByVal porcentajeNuevo As Decimal, ByVal Fecha As DateTime)
        Try
            ODatos.ActualizarPorcentajeRecaudo(codFinanciera, placa, porcentajeNuevo, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarPorcentajeRecaudo", "-", "InsertarRestriccionDia")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarPorcentajeRecaudo", "-", "InsertarRestriccionDia")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstadoCreditoFinanciera(ByVal codFinanciera As Integer, ByVal estado As Byte, ByVal placa As String, ByVal fecha As DateTime)
        Try
            ODatos.ActualizarEstadoCreditoFinanciera(codFinanciera, estado, placa, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoCreditoFinanciera", "-", "ServiciosFinancieras")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoCreditoFinanciera", "-", "ServiciosFinancieras")
            Throw
        End Try
    End Sub

    Public Sub InsertarCreditoFinanciera(ByVal codFinanciera As Integer, ByVal suscripcion As String, ByVal nombre As String, ByVal cedula As String, ByVal direccion As String, ByVal placa As String, ByVal porcentaje As Decimal, ByVal fecha As DateTime)
        Try
            ODatos.InsertarCreditoFinanciera(codFinanciera, suscripcion, nombre, cedula, direccion, placa, porcentaje, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCreditoFinanciera", "-", "ServiciosFinancieras")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCreditoFinanciera", "-", "ServiciosFinancieras")
            Throw
        End Try
    End Sub

    Public Function RecuperarSincronizacionFinancieras() As DataSet
        Try
            Return ODatos.RecuperarSincronizacionFinancieras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSincronizacionFinancieras", "-", "ServiciosFinancieras")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSincronizacionFinancieras", "-", "ServiciosFinancieras")
            Throw
        End Try
    End Function

#End Region

#Region "Control de Saltos de  Lecturas"

    Public Sub ExisteSaltoLecturaInicial(ByVal Cara As Byte, ByVal LecturaInicial As Decimal, ByVal LecturaAnterior As Decimal, ByVal Motivo As Int16)
        Try
            ODatos.ExisteSaltoLecturaInicial(Cara, LecturaInicial, LecturaAnterior, Motivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteSaltoLecturaInicial", "Cara: " & Cara & " LecturaInicial: " & LecturaInicial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteSaltoLecturaInicial", "Cara: " & Cara & " LecturaInicial: " & LecturaInicial, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarVentaParcialCara(ByVal idCara As Int16)
        Try
            ODatos.EliminarVentaParcialCara(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarVentaParcialCara", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarVentaParcialCara", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ValidarVentasSinSistema(ByVal idManguera As Int16, ByVal lectura As Decimal, Optional ByVal IdEstacion As Int16 = 0)
        Try
            If IdEstacion = 0 Then
                ODatos.ValidarVentasSinSistema(idManguera, lectura)
            Else
                ODatos.ValidarVentasSinSistema(idManguera, lectura, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarVentasSinSistema", "idManguera: " & idManguera & ", lectura: " & lectura, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarVentasSinSistema", "IdEsatcion:" & IdEstacion & "idManguera: " & idManguera & ", lectura: " & lectura, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarVentasSinSistema", "idManguera: " & idManguera & ", lectura: " & lectura, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarVentasSinSistema", "IdEsatcion:" & IdEstacion & "idManguera: " & idManguera & ", lectura: " & lectura, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Sub

    Public Sub ValidarLecturasEnUltimaVenta(ByVal recibo As Long, ByVal esVentaRegistrada As Boolean, Optional ByVal idEstacion As Int16 = 0)
        Try
            If idEstacion = 0 Then
                ODatos.ValidarLecturasEnUltimaVenta(recibo, esVentaRegistrada)
            Else
                ODatos.ValidarLecturasEnUltimaVenta(recibo, esVentaRegistrada, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarLecturasEnUltimaVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarLecturasEnUltimaVenta", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarLecturasEnUltimaVenta", "Recibo: " & recibo, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarLecturasEnUltimaVenta", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Sub

    Public Sub VerificarConsecutivosImpresora(ByVal recibo As Long, ByVal esVentaRegistrada As Boolean)
        Try
            ODatos.VerificarConsecutivosImpresora(recibo, esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "VerificarConsecutivosImpresora", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "VerificarConsecutivosImpresora", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub VerificarConsecutivosImpresoraPorCara(ByVal idCara As Int16, ByVal placa As String, ByVal idProducto As Int32, ByVal esIdentificada As Boolean)
        Try
            ODatos.VerificarConsecutivosImpresoraPorCara(idCara, placa, idProducto, esIdentificada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "VerificarConsecutivosImpresoraPorCara", "IdCara: " & idCara & ", Placa: " & placa & ", IdProducto: " & idProducto & ", EsIdentificada: " & esIdentificada, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "VerificarConsecutivosImpresoraPorCara", "IdCara: " & idCara & ", Placa: " & placa & ", IdProducto: " & idProducto & ", EsIdentificada: " & esIdentificada, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CambiarTarjetaPorCara(ByVal idCara As Int16)
        Try
            ODatos.CambiarTarjetaPorCara(idCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CambiarTarjetaPorCara", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CambiarTarjetaPorCara", "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub CambiarTarjetaPorCara(ByVal idCara As Int16, ByVal idEstacion As Int16)
        Try
            ODatos.CambiarTarjetaPorCara(idCara, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CambiarTarjetaPorCara", "IdEstacion: " & idEstacion & "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CambiarTarjetaPorCara", "IdEstacion: " & idEstacion & "IdCara: " & idCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarLecturasCambioTarjeta(ByVal idManguera As Int16, ByVal lecturaFinal As Decimal)
        Try
            ODatos.InsertarLecturasCambioTarjeta(idManguera, lecturaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturasCambioTarjeta", "IdManguera: " & idManguera & ", Lectura Final:" & lecturaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturasCambioTarjeta", "IdManguera: " & idManguera & ", Lectura Final:" & lecturaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarLecturasCambioTarjeta(ByVal idManguera As Int16, ByVal lecturaFinal As Decimal, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarLecturasCambioTarjeta(idManguera, lecturaFinal, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturasCambioTarjeta", "IdEstacion: " & idEstacion & "IdManguera: " & idManguera & ", Lectura Final:" & lecturaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturasCambioTarjeta", "IdEstacion: " & idEstacion & "IdManguera: " & idManguera & ", Lectura Final:" & lecturaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarSaltosLecturasPorTurno(ByVal idTurno As Int32, ByVal idManguera As Integer, ByVal ordenadoMotivo As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarSaltosLecturasPorTurno(idTurno, idManguera, ordenadoMotivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarSaltosLecturasPorTurno(ByVal idTurno As Int32, ByVal idManguera As Integer, ByVal ordenadoMotivo As Boolean, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarSaltosLecturasPorTurno(idTurno, idManguera, ordenadoMotivo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorTurno", "IdEstacion: " & idEstacion & "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorTurno", "IdEstacion: " & idEstacion & "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSaltosLecturasPorFecha(ByVal fecha As String, ByVal idManguera As Integer) As IDataReader
        Try
            Return ODatos.RecuperarSaltosLecturasPorFecha(fecha, idManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorFecha", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorFecha", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarSaltosLecturasPorFecha(ByVal fecha As String, ByVal idManguera As Integer, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarSaltosLecturasPorFecha(fecha, idManguera, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorFecha", "IdEstacion: " & idEstacion & "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorFecha", "IdEstacion: " & idEstacion & "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSaltosLecturasPorFechaDia(ByVal fecha As String, ByVal idManguera As Integer) As IDataReader
        Try
            Return ODatos.RecuperarSaltosLecturasPorFechaDia(fecha, idManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorFechaDia", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorFechaDia", "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarSaltosLecturasPorFechaDia(ByVal fecha As String, ByVal idManguera As Integer, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarSaltosLecturasPorFechaDia(fecha, idManguera, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorFechaDia", "IdEstacion: " & idEstacion & "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaltosLecturasPorFechaDia", "IdEstacion: " & idEstacion & "Fecha: " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "          GET LOG         "

    'Public Function RecuperarLog(ByVal FechaHoraInicial As DateTime, ByVal FechaHoraFinal As DateTime, _
    '                             Optional ByVal CategoriaN As String = "", Optional ByVal HiloId As String = "") As DataTable
    '    Try
    '        Return ODatos.RecuperarLog(FechaHoraInicial, FechaHoraFinal)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "RecuperarLog", "Fecha: " & FechaHoraInicial, "FallaStoredProcedure")
    '        Throw
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "RecuperarLog", "Fecha: " & FechaHoraInicial, "FallaStoredProcedure")
    '        Throw
    '    End Try
    'End Function

    Public Function RecuperarLog(ByVal FechaHoraInicial As DateTime, ByVal FechaHoraFinal As DateTime, ByVal connectionString As String,
                                 Optional ByVal CategoriaN As String = "", Optional ByVal HiloId As String = "") As DataTable
        Try
            Return ODatos.RecuperarLog(FechaHoraInicial, FechaHoraFinal, connectionString)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLog", "Fecha: " & FechaHoraInicial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLog", "Fecha: " & FechaHoraInicial, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "   Servicios Web de Terpel     "

    Public Sub LiberarCupoenReserva(ByVal Rom As String)
        Try
            ODatos.LiberarCupoenReserva(Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "LiberarCupoenReserva", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "LiberarCupoenReserva", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub AlmacenarVenta(ByVal Recibo As Int64, ByVal IdFormaPago As Int32, ByVal FechaHora As DateTime,
                             ByVal Turno As Int64, ByVal Manguera As Int64, ByVal HoraInicio As DateTime, ByVal HoraFin As DateTime,
                             ByVal LecturaInicial As Decimal, ByVal LecturaFinal As Decimal, ByVal Precio As Decimal,
                             ByVal Cantidad As Decimal, ByVal Valor As Decimal, ByVal Descuento As Decimal,
                             ByVal Placa As String, ByVal IdProducto As Int32, ByVal PorcentajeDescuento As Decimal,
                             ByVal Rom As String, ByVal RecaudoOpcional As Decimal, ByVal Kilometraje As String, ByVal IdCredito As Int64,
                             ByVal Estacion As Int64)
        Try
            ODatos.AlmacenarVenta(Recibo, IdFormaPago, FechaHora, Turno, Manguera, HoraInicio, HoraFin, LecturaInicial, LecturaFinal, Precio,
                                  Cantidad, Valor, Descuento, Placa, IdProducto, PorcentajeDescuento, Rom, RecaudoOpcional, Kilometraje, IdCredito, Estacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AlmacenarVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AlmacenarVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try

    End Sub


#End Region

#Region "   Configuración de Documentos Perú    "

    Public Function RecuperarTiposDocumento() As DataTable
        Try
            Return ODatos.RecuperarTiposDocumento
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposDocumento", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposDocumento", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarTiposDocumentoVentasRecuperadas() As DataTable
        Try
            Return ODatos.RecuperarTiposDocumentoVentasRecuperadas
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposDocumentoVentasRecuperadas", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposDocumentoVentasRecuperadas", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarDocumentosImpresora(ByVal IdImpresora As Int32) As DataTable
        Try
            Return ODatos.RecuperarDocumentosImpresora(IdImpresora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDocumentosImpresora", "IdImpresora: " & IdImpresora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDocumentosImpresora", "IdImpresora: " & IdImpresora, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarDocumentoFacturaGrande(ByVal Recibo As Int64) As DataTable
        Try
            Return ODatos.RecuperarDocumentoFacturaGrande(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDocumentoFacturaGrande", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDocumentoFacturaGrande", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarConsecutivosTiposDocumento() As DataTable
        Try
            Return ODatos.RecuperarConsecutivosTiposDocumento()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsecutivosTiposDocumento", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsecutivosTiposDocumento", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarDocumentosImpresora(ByVal IdImpConsecutivo As Int32, ByVal IdImpresora As Int32,
                                       ByVal IdTipoDocumento As Int32, ByVal Prefijo As String,
                                       ByVal ConsecutivoActual As Int64, ByVal ConsecutivoDesde As Int64,
                                       ByVal ConsecutivoHasta As Int64)
        Try
            ODatos.InsertarDocumentosImpresora(IdImpConsecutivo, IdImpresora, IdTipoDocumento, Prefijo, ConsecutivoActual, ConsecutivoDesde, ConsecutivoHasta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDocumentosImpresora", "IdImpresora: " & IdImpresora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDocumentosImpresora", "IdImpresora: " & IdImpresora, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarDocumentosImpresora(ByVal IdImpConsecutivo As Int32, ByVal IdImpresora As Int32,
                                       ByVal IdTipoDocumento As Int32,
                                       ByVal ConsecutivoActual As Int64, ByVal ConsecutivoDesde As Int64,
                                       ByVal ConsecutivoHasta As Int64)
        Try
            ODatos.InsertarDocumentosImpresora(IdImpConsecutivo, IdImpresora, IdTipoDocumento, ConsecutivoActual, ConsecutivoDesde, ConsecutivoHasta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDocumentosImpresora", "IdImpresora: " & IdImpresora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDocumentosImpresora", "IdImpresora: " & IdImpresora, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarConsecutivoTipoDocumento(ByVal IdImpConsecutivo As Int32,
                                       ByVal IdTipoDocumento As Int32,
                                       ByVal ConsecutivoActual As Int64, ByVal ConsecutivoDesde As Int64,
                                       ByVal ConsecutivoHasta As Int64)
        Try
            ODatos.InsertarConsecutivoTipoDocumento(IdImpConsecutivo, IdTipoDocumento, ConsecutivoActual, ConsecutivoDesde, ConsecutivoHasta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarConsecutivoTipoDocumento", "IdTipoDocumento: " & IdTipoDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarConsecutivoTipoDocumento", "IdTipoDocumento: " & IdTipoDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Financiera"
    Public Function RecuperarFinanciera(ByVal idFinanciera As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFinanciera(idFinanciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFinanciera", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFinanciera", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosFinancieras() As DataSet
        Try
            Return ODatos.RecuperarDatosFinancieras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosFinancieras", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosFinancieras", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarFinanciera(ByVal idFinanciera As Int32, ByVal url As String, ByVal fechaEnvio As Date, ByVal ultimaVenta As String, ByVal ultimoPago As String, ByVal ultimaReversion As String, ByVal EsActivada As Boolean)
        Try
            ODatos.ActualizarFinanciera(idFinanciera, url, fechaEnvio, ultimaVenta, ultimoPago, ultimaReversion, EsActivada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFinanciera", "IdFinanciera: " & idFinanciera & " , URL: " & url & " , Fecha Envio: " & fechaEnvio.ToString & " , Ultima Venta: " & ultimaVenta & " , Ultimo Pago: " & ultimoPago & " , Ultima Reversion: " & ultimaReversion & " , Estado: " & EsActivada, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFinanciera", "IdFinanciera: " & idFinanciera & " , URL: " & url & " , Fecha Envio: " & fechaEnvio.ToString & " , Ultima Venta: " & ultimaVenta & " , Ultimo Pago: " & ultimoPago & " , Ultima Reversion: " & ultimaReversion & " , Estado: " & EsActivada, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ESVehiculoConGerenciamiento(ByVal placa As String) As Boolean
        Try
            Return ODatos.ESVehiculoConGerenciamiento(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESVehiculoConGerenciamiento", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESVehiculoConGerenciamiento", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosVehiculoConGerenciamiento(ByVal placa As String, ByVal cara As Int16) As IDataReader
        Try
            Return ODatos.RecuperarDatosVehiculoConGerenciamiento(placa, cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamiento", "Placa: " & placa & ", Cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamiento", "Placa: " & placa & ", Cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosVehiculoConGerenciamiento(ByVal placa As String, ByVal cara As Int16, ByVal RUC As String) As IDataReader
        Try
            Return ODatos.RecuperarDatosVehiculoConGerenciamiento(placa, cara, RUC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamiento", "Placa: " & placa & ", Cara: " & cara & ", RUC: " & RUC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamiento", "Placa: " & placa & ", Cara: " & cara & ", RUC: " & RUC, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    'Realizado por: Christian Galvis
    Public Function RecuperarDatosVehiculoConGerenciamiento(ByVal identificacion As String, ByVal idProducto As Int32, ByVal tipoIdentificacion As Int32, Optional ByVal IdEstacion As Int16 = 0) As IDataReader
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarDatosVehiculoConGerenciamiento(identificacion, idProducto, tipoIdentificacion)
            Else
                Return ODatos.RecuperarDatosVehiculoConGerenciamiento(identificacion, idProducto, tipoIdentificacion, IdEstacion)
            End If
        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamiento", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamiento", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamiento", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamiento", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarDatosVehiculoConGerenciamientoFullstation(ByVal cara As Int16, ByVal idProducto As Int32, ByVal identificacion As String, ByVal tipoIdentificacion As Int32, ByVal RUC As String, EsPrepago As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarDatosVehiculoConGerenciamientoFullstation(cara, idProducto, identificacion, tipoIdentificacion, RUC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamientoFullstation", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion & ", RUC: " & RUC & ", IdProducto: " & idProducto & ", IdCara: " & cara & "EsPrepago: " & EsPrepago.ToString, "FallaStoredProcedure")

            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamientoFullstation", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion & ", RUC: " & RUC & ", IdProducto: " & idProducto & ", IdCara: " & cara & "EsPrepago: " & EsPrepago.ToString, "FallaStoredProcedure")

            Throw
        End Try
    End Function

    Public Function RecuperarDatosVehiculoConGerenciamientoFullstation(ByVal cara As Int16, ByVal idProducto As Int32, ByVal identificacion As String, ByVal tipoIdentificacion As Int32, ByVal Esprepago As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarDatosVehiculoConGerenciamientoFullstation(cara, idProducto, identificacion, tipoIdentificacion, Esprepago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamientoFullstation", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion & ", Esprepago: " & Esprepago & ", IdProducto: " & idProducto & ", IdCara: " & cara, "FallaStoredProcedure")

            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamientoFullstation", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion & ", Esprepago: " & Esprepago & ", IdProducto: " & idProducto & ", IdCara: " & cara, "FallaStoredProcedure")

            Throw
        End Try
    End Function



    Public Function RecuperarDatosVehiculoConGerenciamientoFullstation(ByVal cara As Int16, ByVal idProducto As Int32, ByVal identificacion As String, ByVal tipoIdentificacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarDatosVehiculoConGerenciamientoFullstation(cara, idProducto, identificacion, tipoIdentificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamientoFullstation", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion & ", IdProducto: " & idProducto & ", IdCara: " & cara, "FallaStoredProcedure")

            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoConGerenciamientoFullstation", "Identificacion: " & identificacion & ", IdProducto: " & idProducto & ", Tipo Identificacion: " & tipoIdentificacion & ", IdProducto: " & idProducto & ", IdCara: " & cara, "FallaStoredProcedure")

            Throw
        End Try
    End Function


    Public Function RecuperarFinancieraPorCredito(ByVal idCreditoCDC As Int32, ByVal placa As String, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarFinancieraPorCredito(idCreditoCDC, placa)
            Else
                Return ODatos.RecuperarFinancieraPorCredito(idCreditoCDC, placa, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarFinancieraPorCredito", "Placa: " & placa & ", IdCreditoCDC: " & idCreditoCDC, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarFinancieraPorCredito", "IdEstacion: " & idEstacion & "Placa: " & placa & ", IdCreditoCDC: " & idCreditoCDC, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarFinancieraPorCredito", "Placa: " & placa & ", IdCreditoCDC: " & idCreditoCDC, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarFinancieraPorCredito", "IdEstacion: " & idEstacion & "Placa: " & placa & ", IdCreditoCDC: " & idCreditoCDC, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarVentaGerenciamiento(ByVal idGerencia As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentaGerenciamiento(idGerencia)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaGerenciamiento", "IdGerencia: " & idGerencia, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaGerenciamiento", "IdGerencia: " & idGerencia, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRecaudosSincronizacion(ByVal idFinanciera As Short) As DataSet
        Try
            Return ODatos.RecuperarRecaudosSincronizacion(idFinanciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRecaudosSincronizacion", "IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRecaudosSincronizacion", "IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarRecaudosFinanciera(ByVal idFinanciera As Short, ByVal recaudo As Long)
        Try
            ODatos.ActualizarRecaudosFinanciera(idFinanciera, recaudo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarRecaudosFinanciera", "idFinanciera: " & idFinanciera & " , recaudo: " & recaudo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarRecaudosFinanciera", "idFinanciera: " & idFinanciera & " , recaudo: " & recaudo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "       Tools Station       "

    Public Sub GenerarBackup(ByVal DataBase As String, Optional ByVal tiempo As Integer = -1) ', ByVal RutaArchivo As String)
        Try
            ODatos.GenerarBackup(DataBase, tiempo) ', RutaArchivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "GenerarBackup", "Base de Datos: " & DataBase, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "GenerarBackup", "Base de Datos: " & DataBase, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function RecuperarDataBases() As DataTable
        Try
            Return ODatos.RecuperarDataBases()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDataBases", "Base de Datos: " & "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDataBases", "Base de Datos: " & "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Restricciones y Gerenciamiento"
    Public Function RecuperarInformacionRestriccion(ByVal restriccion As Long) As InformacionRestriccion
        Try

            Return ODatos.RecuperarInformacionRestriccion(restriccion)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRestriccionVehiculo", "Restriccion: " & restriccion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionGerenciamiento(ByVal idGerenciamiento As Long) As InformacionGerenciamiento
        Try
            Return ODatos.RecuperarInformacionGerenciamiento(idGerenciamiento)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionGerenciamiento", "idGerenciamiento : " & idGerenciamiento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionGerenciamientoTerpel(ByVal idGerenciamiento As Long) As InformacionGerenciamiento
        Try
            Return ODatos.RecuperarInformacionGerenciamientoTerpel(idGerenciamiento)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionGerenciamientoTerpel", "idGerenciamiento : " & idGerenciamiento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionGerenciamientoFuelStation(ByVal idGerenciamiento As Long) As InformacionGerenciamiento
        Try
            Return ODatos.RecuperarInformacionGerenciamientoFuelStation(idGerenciamiento)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionGerenciamientoFuelStation", "idGerenciamiento : " & idGerenciamiento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionGerenciamientoPeruCRMStation(ByVal idGerenciamiento As Long) As InformacionGerenciamiento
        Try
            Return ODatos.RecuperarInformacionGerenciamientoPeruCRMStation(idGerenciamiento)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionGerenciamientoPeruCRMStation", "idGerenciamiento : " & idGerenciamiento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaRestriccion() As Integer
        Try
            Return ODatos.RecuperarUltimaRestriccion()
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaRestriccion", "", "FallaStoredProcedure")
            Throw
        End Try

    End Function


    Public Function ValidarRestriccionVehiculo(ByVal Placa As String, Optional ByVal IdEstacion As Int16 = 0) As Boolean
        Try
            If IdEstacion = 0 Then
                Return ODatos.ValidarRestriccionVehiculo(Placa)
            Else
                Return ODatos.ValidarRestriccionVehiculo(Placa, IdEstacion)
            End If

        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarRestriccionVehiculo", "Placa : " & Placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarRestriccionVehiculo", "IdEsatcion:" & IdEstacion & "Placa : " & Placa, "FallaStoredProcedure")
            End If

            Throw
        End Try
    End Function

    Public Sub ValidarRestriccionVehiculoPorRecibo(ByVal recibo As Long, Optional ByVal idEstacion As Int16 = 0)
        Try
            If idEstacion = 0 Then
                ODatos.ValidarRestriccionVehiculoPorRecibo(recibo)
            Else
                ODatos.ValidarRestriccionVehiculoPorRecibo(recibo, idEstacion)
            End If

        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarRestriccionVehiculoPorRecibo", "Recibo : " & recibo.ToString, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarRestriccionVehiculoPorRecibo", "IdEstacion: " & idEstacion & "Recibo : " & recibo.ToString, "FallaStoredProcedure")
            End If

            Throw
        End Try
    End Sub

    Public Function RecuperarRestriccionPorId(ByVal IdRestriccion As Int64) As DataTable
        Try
            Return ODatos.RecuperarRestriccionPorId(IdRestriccion)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRestriccionPorId", "idRestriccion : " & IdRestriccion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function GenerarReporteVentasPorFecha(ByVal fecha As String) As DataTable
        Try
            Return ODatos.GenerarReporteVentasPorFecha(fecha)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "GenerarReporteVentasPorFecha(", "fecha : " & fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Creditos CDC Gazel"
    Public Function RecuperarCreditos(ByVal placa As String, ByVal numeroCredito As String, ByVal cliente As String) As DataSet
        Try
            Return ODatos.RecuperarCreditos(placa, numeroCredito, cliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditos", "Placa: " & placa & ", Número Crédito: " & numeroCredito & ", Cliente: " & cliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditos", "Placa: " & placa & ", Número Crédito: " & numeroCredito & ", Cliente: " & cliente, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCreditosActivos(ByVal placa As String) As IDataReader
        Try
            Return ODatos.RecuperarCreditosActivos(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditosActivos", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditosActivos", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCreditosFinalizadosPorRecibo(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarCreditosFinalizadosPorRecibo(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditosFinalizadosPorRecibo", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditosFinalizadosPorRecibo", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCreditosActivos(ByVal placa As String, ByVal IdEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarCreditosActivos(placa, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditosActivos", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditosActivos", "Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCreditosConversion(ByVal placa As String, Optional ByVal idEstacion As Int16 = 0) As IDataReader
        Try
            If idEstacion = 0 Then
                Return ODatos.RecuperarCreditosConversion(placa)
            Else
                Return ODatos.RecuperarCreditosConversion(placa, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarCreditosConversion", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarCreditosConversion", "IdEstacion: " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarCreditosConversion", "Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarCreditosConversion", "IdEstacion: " & idEstacion & "Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function
#End Region

#Region "Fidelizacion CDC"
    Public Sub FidelizarVentaGazel(ByVal recibo As Int64, ByVal codigo As String, ByVal numero As String, ByVal idTipoLectura As Int32)
        Try
            ODatos.FidelizarVentaGazel(recibo, codigo, numero, idTipoLectura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FidelizarVentaGazel", "Recibo: " & recibo & " , Numero: " & numero & " , TipoLectura: " & idTipoLectura & " , Codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FidelizarVentaGazel", "Recibo: " & recibo & " , Numero: " & numero & " , TipoLectura: " & idTipoLectura & " , Codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub FidelizarVentaGazel(ByVal recibo As Int64, ByVal codigo As String, ByVal numero As String, ByVal idTipoLectura As Int32, ByVal IdEstacion As Integer)
        Try
            ODatos.FidelizarVentaGazel(recibo, codigo, numero, idTipoLectura, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FidelizarVentaGazel", "Recibo: " & recibo & " , Numero: " & numero & " , TipoLectura: " & idTipoLectura & " , Codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FidelizarVentaGazel", "Recibo: " & recibo & " , Numero: " & numero & " , TipoLectura: " & idTipoLectura & " , Codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub FidelizarVentaGazel(ByVal recibo As Int64, ByVal codigo As String, ByVal numero As String, ByVal idTipoLectura As Int32, ByVal cedula As String, ByVal tipoFidelizacion As Int32)
        Try
            ODatos.FidelizarVentaGazel(recibo, codigo, numero, idTipoLectura, cedula, tipoFidelizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FidelizarVentaGazel", "Recibo: " & recibo & " , Numero: " & numero & " , TipoLectura: " & idTipoLectura & " , Codigo: " & codigo & " , Cedula: " & cedula & " , Tipo Fidelizacion: " & tipoFidelizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FidelizarVentaGazel", "Recibo: " & recibo & " , Numero: " & numero & " , TipoLectura: " & idTipoLectura & " , Codigo: " & codigo & " , Cedula: " & cedula & " , Tipo Fidelizacion: " & tipoFidelizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarVentaFidelizada(ByVal recibo As Long, ByVal esVentaRegistrada As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarVentaFidelizada(CLng(recibo), esVentaRegistrada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaFidelizada", "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaFidelizada", "Recibo: " & recibo & " , EsVentaRegistrada: " & esVentaRegistrada.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaFidelizadaGazel(ByVal recibo As Long) As IDataReader
        Try
            Return ODatos.RecuperarVentaFidelizadaGazel(CLng(recibo))
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaFidelizada", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaFidelizada", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentaFidelizadaGazel(ByVal recibo As Long, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarVentaFidelizadaGazel(CLng(recibo), idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaFidelizada", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaFidelizada", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "       Fidelizacion Peru       "

    Public Function ManejaRedFidelizacion() As Int16
        Try
            Return ODatos.ManejaRedFidelizacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ManejaRedFidelizacion", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ManejaRedFidelizacion", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ManejaSaldoFidelizacion(ByVal idRedFidelizacion As Int16) As Boolean
        Try
            Return ODatos.ManejaSaldoFidelizacion(idRedFidelizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ManejaSaldoFidelizacion", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ManejaSaldoFidelizacion", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function FidelizacionUltimaVenta() As String
        Try
            Return ODatos.FidelizacionUltimaVenta()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FidelizacionUltimaVenta", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FidelizacionUltimaVenta", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "   Consultas de MR a Base de Datos    "

    Public Function RecuperarTramaImpresoras() As String
        Try
            Return ODatos.RecuperarTramaImpresoras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTramaImpresoras", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTramaImpresoras", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ActulizarCambioImpresoraIsla(ByVal IdIsla As Int32, ByVal IdImpresora As Int32) As String
        Try
            Return ODatos.ActulizarCambioImpresoraIsla(IdIsla, IdImpresora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActulizarCambioImpresoraIsla", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActulizarCambioImpresoraIsla", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "PagoExtraordinario"
    Public Function EsPagoExtraordinarioAnulado(ByVal idPago As Int32) As Boolean
        Try
            Return ODatos.EsPagoExtraordinarioAnulado(idPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsPagoExtraordinarioAnulado", "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsPagoExtraordinarioAnulado", "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function EsPagoExtraordinarioAnulado(ByVal idPago As Int32, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.EsPagoExtraordinarioAnulado(idPago, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsPagoExtraordinarioAnulado", "IdEstacion: " & idEstacion & "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsPagoExtraordinarioAnulado", "IdEstacion: " & idEstacion & "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ProcesarPagoExtraOrdinarioPendiente(ByVal idPago As Int32)
        Try
            ODatos.ProcesarPagoExtraOrdinarioPendiente(idPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ProcesarPagoExtraOrdinarioPendiente", "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ProcesarPagoExtraOrdinarioPendiente", "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ProcesarPagoExtraOrdinarioPendiente(ByVal idPago As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.ProcesarPagoExtraOrdinarioPendiente(idPago, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ProcesarPagoExtraOrdinarioPendiente", "IdEstacion: " & idEstacion & "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ProcesarPagoExtraOrdinarioPendiente", "IdEstacion: " & idEstacion & "IdPago: " & idPago, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ValidarPagosAFinanciera(ByVal idFinanciera As Int32) As Boolean
        Try
            Return ODatos.ValidarPagosAFinanciera(idFinanciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarPagosAFinanciera", "IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarPagosAFinanciera", "IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarMinimoTanqueoParaAbonar(ByVal recibo As Int64, ByVal cedula As String) As Boolean
        Try
            Return ODatos.ValidarMinimoTanqueoParaAbonar(recibo, cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarMinimoTanqueoParaAbonar", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarMinimoTanqueoParaAbonar", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarMinimoTanqueoParaAbonar(ByVal recibo As Int64, ByVal cedula As String, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ValidarMinimoTanqueoParaAbonar(recibo, cedula, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarMinimoTanqueoParaAbonar", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarMinimoTanqueoParaAbonar", "IdEstacion: " & idEstacion & "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Reversiones"
    Public Function ValidarReversionesAFinanciera(ByVal idFinanciera As Int32) As Boolean
        Try
            Return ODatos.ValidarReversionesAFinanciera(idFinanciera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarReversionesAFinanciera", "IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarReversionesAFinanciera", "IdFinanciera: " & idFinanciera, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "ServiPunto"
    Public Sub InsertarVehiculoServiPunto(ByVal placa As String, ByVal rom As String, ByVal fechaProximoMant As Date, Optional ByVal idEstacion As Int16 = 0)
        Try
            If idEstacion = 0 Then
                ODatos.InsertarVehiculoServiPunto(placa, rom, fechaProximoMant)
            Else
                ODatos.InsertarVehiculoServiPunto(placa, rom, fechaProximoMant, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "InsertarVehiculoServiPunto", "Placa: " & placa & ", ROM: " & rom & ", FechaProximoMantenimiento: " & fechaProximoMant.ToString(), "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "InsertarVehiculoServiPunto", "IdEstacion" & idEstacion & "Placa: " & placa & ", ROM: " & rom & ", FechaProximoMantenimiento: " & fechaProximoMant.ToString(), "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "InsertarVehiculoServiPunto", "Placa: " & placa & ", ROM: " & rom & ", FechaProximoMantenimiento: " & fechaProximoMant.ToString(), "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "InsertarVehiculoServiPunto", "IdEstacion" & idEstacion & "Placa: " & placa & ", ROM: " & rom & ", FechaProximoMantenimiento: " & fechaProximoMant.ToString(), "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Sub
#End Region

#Region "Clientes Locales Peru"


    Public Sub RegistrarBloqueoPagoFinanciamiento(ByVal IdBloqueo As Int32, ByVal FechaInicio As DateTime, ByVal FechaFin As DateTime, ByVal EsActivo As Boolean, ByVal Motivo As String)
        Try
            ODatos.RegistrarBloqueoPagoFinanciamiento(IdBloqueo, FechaInicio, FechaFin, EsActivo, Motivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RegistrarBloqueoPagoFinanciamiento", "FechaInicioBloqueo: " & FechaInicio & " , FechaFinBloqueo: " & FechaFin & "IdBloqueo: " & IdBloqueo & " Motivo: " & Motivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RegistrarBloqueoPagoFinanciamiento", "FechaInicioBloqueo: " & FechaInicio & " , FechaFinBloqueo: " & FechaFin & "IdBloqueo: " & IdBloqueo & " Motivo: " & Motivo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub ValidarFechaBloqueoPagoFinanciamiento(ByVal Placa As String)
        Try
            ODatos.ValidarFechaBloqueoPagoFinanciamiento(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarFechaBloqueoPagoFinanciamiento", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarFechaBloqueoPagoFinanciamiento", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub LevantarBloqueoPagoFinanciamiento(ByVal IdBloqueo As Int32)
        Try
            ODatos.LevantarBloqueoPagoFinanciamiento(IdBloqueo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "LevantarBloqueoPagoFinanciamiento", "IdBloqueo: " & IdBloqueo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "LevantarBloqueoPagoFinanciamiento", "IdBloqueo: " & IdBloqueo, "FallaStoredProcedure")
            Throw
        End Try

    End Sub

    Public Sub InsertarCompartimientoTmp(ByVal guid As String, ByVal IdCompartimiento As Nullable(Of Int32), ByVal Nombre As String, ByVal Capacidad As Decimal)
        Try
            ODatos.InsertarCompartimientoTmp(guid, IdCompartimiento, Nombre, Capacidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCompartimientoTmp", "guid: " & guid & " , IdCompartimiento: " & IdCompartimiento & " , Nombre: " & Nombre & " , Capacidad: " & Capacidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCompartimientoTmp", "guid: " & guid & " , IdCompartimiento: " & IdCompartimiento & " , Nombre: " & Nombre & " , Capacidad: " & Capacidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarCarroTanque(ByVal IdCarroTanque As Int32, ByVal Placa As String, ByVal Marca As String, ByVal IdTipoCarroTanque As Int32, ByVal guid As String)
        Try
            ODatos.ActualizarCarroTanque(IdCarroTanque, Placa, Marca, IdTipoCarroTanque, guid)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCarroTanque", "IdCarroTanque: " & IdCarroTanque & " , Placa: " & Placa & " , Marca: " & Marca & " , IdTipoCarroTanque: " & IdTipoCarroTanque & " , guid: " & guid, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCarroTanque", "IdCarroTanque: " & IdCarroTanque & " , Placa: " & Placa & " , Marca: " & Marca & " , IdTipoCarroTanque: " & IdTipoCarroTanque & " , guid: " & guid, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarCarroTanque(ByVal Placa As String, ByVal Marca As String, ByVal IdTipoCarroTanque As Int32, ByVal guid As String) As Int32
        Try
            Return ODatos.InsertarCarroTanque(Placa, Marca, IdTipoCarroTanque, guid)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCarroTanque", "Placa: " & Placa & " , Marca: " & Marca & " , IdTipoCarroTanque: " & IdTipoCarroTanque & " , guid: " & guid, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCarroTanque", "Placa: " & Placa & " , Marca: " & Marca & " , IdTipoCarroTanque: " & IdTipoCarroTanque & " , guid: " & guid, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarProveedor(ByVal IdProveedor As Int32, ByVal Nit As String, ByVal Nombre As String, ByVal Direccion As String, ByVal Telefono As String, ByVal Email As String, ByVal IdCiudad As Int32)
        Try
            ODatos.ActualizarProveedor(IdProveedor, Nit, Nombre, Direccion, Telefono, Email, IdCiudad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarProveedor", "IdProveedor: " & IdProveedor & " , Nit: " & Nit & " , Nombre: " & Nombre & " , Direccion: " & Direccion & " , Telefono: " & Telefono & " , Email: " & Email & " , IdCiudad: " & IdCiudad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarProveedor", "IdProveedor: " & IdProveedor & " , Nit: " & Nit & " , Nombre: " & Nombre & " , Direccion: " & Direccion & " , Telefono: " & Telefono & " , Email: " & Email & " , IdCiudad: " & IdCiudad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarProveedor(ByVal Nit As String, ByVal Nombre As String, ByVal Direccion As String, ByVal Telefono As String, ByVal Email As String, ByVal IdCiudad As Int32) As Int32
        Try
            Return ODatos.InsertarProveedor(Nit, Nombre, Direccion, Telefono, Email, IdCiudad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarProveedor", "Nit: " & Nit & " , Nombre: " & Nombre & " , Direccion: " & Direccion & " , Telefono: " & Telefono & " , Email: " & Email & " , IdCiudad: " & IdCiudad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarProveedor", "Nit: " & Nit & " , Nombre: " & Nombre & " , Direccion: " & Direccion & " , Telefono: " & Telefono & " , Email: " & Email & " , IdCiudad: " & IdCiudad, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarAutorizacionEstacion(ByVal IdAutorizacion As Int32, ByVal NroAutorizacion As String, ByVal Capacidad As Decimal, ByVal FechaInicial As Date, ByVal FechaFinal As Date)
        Try
            ODatos.ActualizarAutorizacionEstacion(IdAutorizacion, NroAutorizacion, Capacidad, FechaInicial, FechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarAutorizacionEstacion", "IdAutorizacion: " & IdAutorizacion & " , NroAutorizacion: " & NroAutorizacion & " , Capacidad: " & Capacidad & " , FechaInicial: " & FechaInicial & " , FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarAutorizacionEstacion", "IdAutorizacion: " & IdAutorizacion & " , NroAutorizacion: " & NroAutorizacion & " , Capacidad: " & Capacidad & " , FechaInicial: " & FechaInicial & " , FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarAutorizacionEstacion(ByVal IdAutorizacion As Int32, ByVal NroAutorizacion As String, ByVal Capacidad As Decimal, ByVal FechaInicial As Date, ByVal FechaFinal As Date, ByVal EsActiva As Boolean)
        Try
            ODatos.ActualizarAutorizacionEstacion(IdAutorizacion, NroAutorizacion, Capacidad, FechaInicial, FechaFinal, EsActiva)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarAutorizacionEstacion", "IdAutorizacion: " & IdAutorizacion & " , NroAutorizacion: " & NroAutorizacion & " , Capacidad: " & Capacidad & " , FechaInicial: " & FechaInicial & " , FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarAutorizacionEstacion", "IdAutorizacion: " & IdAutorizacion & " , NroAutorizacion: " & NroAutorizacion & " , Capacidad: " & Capacidad & " , FechaInicial: " & FechaInicial & " , FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarAutorizacionEstacion(ByVal NroAutorizacion As String, ByVal Capacidad As Decimal, ByVal FechaInicial As Date, ByVal FechaFinal As Date) As Int32
        Try
            Return ODatos.InsertarAutorizacionEstacion(NroAutorizacion, Capacidad, FechaInicial, FechaFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAutorizacionEstacion", "NroAutorizacion: " & NroAutorizacion & " , Capacidad: " & Capacidad & " , FechaInicial: " & FechaInicial & " , FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAutorizacionEstacion", "NroAutorizacion: " & NroAutorizacion & " , Capacidad: " & Capacidad & " , FechaInicial: " & FechaInicial & " , FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarAutorizacionEstacion(ByVal NroAutorizacion As String, ByVal Capacidad As Decimal, ByVal FechaInicial As Date, ByVal FechaFinal As Date, ByVal EsActiva As Boolean) As Int32
        Try
            Return ODatos.InsertarAutorizacionEstacion(NroAutorizacion, Capacidad, FechaInicial, FechaFinal, EsActiva)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAutorizacionEstacion", "NroAutorizacion: " & NroAutorizacion & " , Capacidad: " & Capacidad & " , FechaInicial: " & FechaInicial & " , FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAutorizacionEstacion", "NroAutorizacion: " & NroAutorizacion & " , Capacidad: " & Capacidad & " , FechaInicial: " & FechaInicial & " , FechaFinal: " & FechaFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarClienteLocal(ByVal idCliente As Int32, ByVal nombre As String, ByVal ruc As String, ByVal direccion As String, ByVal telefono As String, ByVal idCiudad As Int32)
        Try
            ODatos.ActualizarClienteLocal(idCliente, nombre, ruc, direccion, telefono, idCiudad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarClienteLocal", "Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarClienteLocal", "Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarConductorLocal(ByVal IdConductor As Int64, ByVal Ruc As String, ByVal Nombre As String, ByVal Apellido As String)
        Try
            ODatos.ActualizarConductorLocal(IdConductor, Ruc, Nombre, Apellido)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarConductorLocal", "Nombre: " & Nombre & " , Apellido: " & Apellido & " , RUC: " & Ruc, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarConductorLocal", "Nombre: " & Nombre & " , Apellido: " & Apellido & " , RUC: " & Ruc, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarClienteLocal(ByVal nombre As String, ByVal ruc As String, ByVal direccion As String, ByVal telefono As String, ByVal idCiudad As Int32) As Int32
        Try
            Return ODatos.InsertarClienteLocal(nombre, ruc, direccion, telefono, idCiudad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarClienteLocal", "Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarClienteLocal", "Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarConductorLocal(ByVal RUC As String, ByVal Nombre As String, ByVal Apellido As String) As Int32
        Try
            Return ODatos.InsertarConductorLocal(RUC, Nombre, Apellido)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarConductorLocal", "RUC: " & RUC & " , Nombre: " & Nombre & " , Apellido: " & Apellido, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarConductorLocal", "RUC: " & RUC & " , Nombre: " & Nombre & " , Apellido: " & Apellido, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarClienteLocal(ByVal idCliente As Int32, ByVal nombre As String, ByVal ruc As String, ByVal direccion As String, ByVal telefono As String, ByVal idCiudad As Int32, ByVal razonSocial As String, Optional ByVal EsActivo As Boolean = True)
        Try
            ODatos.ActualizarClienteLocal(idCliente, nombre, ruc, direccion, telefono, idCiudad, razonSocial, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarClienteLocal", "Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarClienteLocal", "Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Function InsertarClienteLocal(ByVal nombre As String, ByVal ruc As String, ByVal direccion As String, ByVal telefono As String, ByVal idCiudad As Int32, ByVal razonSocial As String, Optional ByVal EsActivo As Boolean = True) As Int32
        Try
            Return ODatos.InsertarClienteLocal(nombre, ruc, direccion, telefono, idCiudad, razonSocial, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarClienteLocal", "Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarClienteLocal", "Nombre: " & nombre & " , Direccion: " & direccion & " , Telefono: " & telefono, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub SincronizarPrecioClienteCredito(ByVal idCliente As Int32, ByVal valor As Decimal, ByVal aplicaPorcentaje As Boolean, ByVal esDescuento As Boolean, ByVal esActivo As Boolean)
        Try
            ODatos.SincronizarPrecioClienteCredito(idCliente, valor, aplicaPorcentaje, esDescuento, esActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SincronizarPrecioClienteCredito", "IdCliente: " & idCliente & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SincronizarPrecioClienteCredito", "IdCliente: " & idCliente & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Function InsertarPrecioClienteCredito(ByVal identificacion As String, ByVal valor As Decimal, ByVal aplicaPorcentaje As Boolean, ByVal esDescuento As Boolean, ByVal esActivo As Boolean, ByVal EsDescuentoVehiculo As Boolean) As Int32
        Try
            Return ODatos.InsertarPrecioClienteCredito(identificacion, valor, aplicaPorcentaje, esDescuento, esActivo, EsDescuentoVehiculo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCredito", "identificacion: " & identificacion & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCredito", "identificacion: " & identificacion & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarPrecioClienteCredito(ByVal identificacion As String, ByVal valor As Decimal, ByVal aplicaPorcentaje As Boolean, ByVal esDescuento As Boolean, ByVal esActivo As Boolean, ByVal EsDescuentoVehiculo As Boolean, ByVal AplicaEnSurtidor As Boolean) As Int32
        Try
            Return ODatos.InsertarPrecioClienteCredito(identificacion, valor, aplicaPorcentaje, esDescuento, esActivo, EsDescuentoVehiculo, AplicaEnSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCredito", "identificacion: " & identificacion & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCredito", "identificacion: " & identificacion & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarPrecioClienteCredito(ByVal IdPrecio As Int32, ByVal valor As Decimal, ByVal aplicaPorcentaje As Boolean, ByVal esDescuento As Boolean, ByVal esActivo As Boolean, ByVal EsDescuentoVehiculo As Boolean)
        Try
            ODatos.ActualizarPrecioClienteCredito(IdPrecio, valor, aplicaPorcentaje, esDescuento, esActivo, EsDescuentoVehiculo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCredito", "IdPrecio: " & IdPrecio & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCredito", "IdPrecio: " & IdPrecio & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarPrecioClienteCredito(ByVal IdPrecio As Int32, ByVal valor As Decimal, ByVal aplicaPorcentaje As Boolean, ByVal esDescuento As Boolean, ByVal esActivo As Boolean, ByVal EsDescuentoVehiculo As Boolean, ByVal AplicaEnSurtidor As Boolean)
        Try
            ODatos.ActualizarPrecioClienteCredito(IdPrecio, valor, aplicaPorcentaje, esDescuento, esActivo, EsDescuentoVehiculo, AplicaEnSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCredito", "IdPrecio: " & IdPrecio & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCredito", "IdPrecio: " & IdPrecio & " , Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarPrecioClienteCredito(ByVal Identificacion As String) As DataSet
        Try
            Return ODatos.RecuperarPrecioClienteCredito(Identificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrecioClienteCredito", "identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrecioClienteCredito", "identificacion: " & Identificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub InsertarPrecioCategoriaANH(ByVal idProducto As Integer, ByVal idCategoria As Nullable(Of Int32), ByVal precio As Double, ByVal Fecha As DateTime)
        Try
            ODatos.InsertarPrecioCategoriaANH(idProducto, idCategoria, precio, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPrecioCategoriaANH", "idProducto: " & idProducto & "idCategoria: " & idCategoria & "precio: " & precio & "Fecha: " & Fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPrecioCategoriaANH", "idProducto: " & idProducto & "idCategoria: " & idCategoria & "precio: " & precio & "Fecha: " & Fecha, "FallaStoredProcedure")
            Throw


        End Try
    End Sub
    Public Sub InsertarPrecioClienteCreditoVehiculo(ByVal IdPrecioClienteCredito As Int32, ByVal vehiculos As String)
        Try
            ODatos.InsertarPrecioClienteCreditoVehiculo(IdPrecioClienteCredito, vehiculos)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCreditoVehiculo", "IdPrecioClienteCredito: " & IdPrecioClienteCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCreditoVehiculo", "IdPrecioClienteCredito: " & IdPrecioClienteCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarPrecioClienteCreditoProductos(ByVal IdPrecioClienteCredito As Int32, ByVal Productos As String)
        Try
            ODatos.InsertarPrecioClienteCreditoProductos(IdPrecioClienteCredito, Productos)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCreditoProductos", "IdPrecioClienteCredito: " & IdPrecioClienteCredito & ", Productos: " & Productos, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPrecioClienteCreditoProductos", "IdPrecioClienteCredito: " & IdPrecioClienteCredito & ", Productos: " & Productos, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarClienteLocalPorId(ByVal idCliente As Int32) As IDataReader
        Try
            Return ODatos.RecuperarClienteLocalPorId(idCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClienteLocalPorId", "IdCliente: " & idCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClienteLocalPorId", "IdCliente: " & idCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarEmpleado(ByVal idEmpleado As Int32)
        Try
            ODatos.EliminarEmpleado(idEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarEmpleado", "idEmpleado: " & idEmpleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarEmpleado", "idEmpleado: " & idEmpleado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarClienteLocal(ByVal idCliente As Int32)
        Try
            ODatos.EliminarClienteLocal(idCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarClienteLocal", "IdCliente: " & idCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarClienteLocal", "IdCliente: " & idCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarConductorLocalPorID(ByVal IdConductor As Int32)
        Try
            ODatos.EliminarConductorLocalPorID(IdConductor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarConductorLocalPorID", "IdConductor: " & IdConductor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarConductorLocalPorID", "IdConductor: " & IdConductor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarClientesLocales(ByVal nombre As String, ByVal ruc As String) As DataSet
        Try
            Return ODatos.RecuperarClientesLocales(nombre, ruc)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClientesLocales", "Nombre: " & nombre & ", RUC: " & ruc, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClientesLocales", "Nombre: " & nombre & ", RUC: " & ruc, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarConductorLocalPorRUC(ByVal RUC As String) As DataSet
        Try
            Return ODatos.RecuperarConductorLocalPorRUC(RUC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConductorLocalPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConductorLocalPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConductorLocalPorRUC(ByVal RUC As String, ByVal IdConductor As Integer) As DataSet
        Try
            Return ODatos.RecuperarConductorLocalPorRUC(RUC, IdConductor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConductorLocalPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConductorLocalPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCarroTanquePorId(ByVal IdCarroTanque As Int32) As IDataReader
        Try
            Return ODatos.RecuperarCarroTanquePorId(IdCarroTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCarroTanquePorId", "IdCarroTanque: " & IdCarroTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCarroTanquePorId", "IdCarroTanque: " & IdCarroTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCarroTanquePorPlaca(ByVal Placa As String) As DataSet
        Try
            Return ODatos.RecuperarCarroTanquePorPlaca(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCarroTanquePorPlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCarroTanquePorPlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCompartimientosPorCarroTanque(ByVal IdCarroTanque As Int32) As DataSet
        Try
            Return ODatos.RecuperarCompartimientosPorCarroTanque(IdCarroTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCompartimientosPorCarroTanque", "IdCarroTanque: " & IdCarroTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCompartimientosPorCarroTanque", "IdCarroTanque: " & IdCarroTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarCarroTanque(ByVal IdCarroTanque As Int32)
        Try
            ODatos.EliminarCarroTanque(IdCarroTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarCarroTanque", "IdCarroTanque: " & IdCarroTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarCarroTanque", "IdCarroTanque: " & IdCarroTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarCarroTanques() As DataSet
        Try
            Return ODatos.RecuperarCarroTanques()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCarroTanques", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCarroTanques", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTiposCarroTanque() As DataSet
        Try
            Return ODatos.RecuperarTiposCarroTanque()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposCarroTanque", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposCarroTanque", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProveedorPorId(ByVal IdProveedor As Int32) As IDataReader
        Try
            Return ODatos.RecuperarProveedorPorId(IdProveedor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProveedorPorId", "IdProveedor: " & IdProveedor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProveedorPorId", "IdProveedor: " & IdProveedor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProveedorPorNit(ByVal Nit As String) As DataSet
        Try
            Return ODatos.RecuperarProveedorPorNit(Nit)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProveedorPorNit", "Nit: " & Nit, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProveedorPorNit", "Nit: " & Nit, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarProveedor(ByVal IdProveedor As Int32)
        Try
            ODatos.EliminarProveedor(IdProveedor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarProveedor", "IdProveedor: " & IdProveedor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarProveedor", "IdProveedor: " & IdProveedor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarNroAutorizacionPorId(ByVal IdNroAutorizacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarNroAutorizacionPorId(IdNroAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNroAutorizacionPorId", "IdNroAutorizacion: " & IdNroAutorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNroAutorizacionPorId", "IdNroAutorizacion: " & IdNroAutorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarAutorizacionEstacionPorNro(ByVal Nro As String) As DataSet
        Try
            Return ODatos.RecuperarAutorizacionEstacionPorNro(Nro)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarAutorizacionEstacionPorNro", "Nro: " & Nro, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarAutorizacionEstacionPorNro", "Nro: " & Nro, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarNroAutorizacionEstacion(ByVal IdNroAutorizacion As Int32)
        Try
            ODatos.EliminarNroAutorizacionEstacion(IdNroAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarNroAutorizacionEstacion", "IdNroAutorizacion: " & IdNroAutorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarNroAutorizacionEstacion", "IdNroAutorizacion: " & IdNroAutorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarNrosAutorizacionEstacion() As DataSet
        Try
            Return ODatos.RecuperarNrosAutorizacionEstacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNrosAutorizacionEstacion", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNrosAutorizacionEstacion", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Creditos Consumo Peru"

    Public Function RecuperarReciboPorFacturacion(ByVal consecutivoFacturacion As String) As Long
        Try
            Return ODatos.RecuperarReciboPorFacturacion(consecutivoFacturacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorFacturacion", "consecutivoFacturacion: " & consecutivoFacturacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorFacturacion", "consecutivoFacturacion: " & consecutivoFacturacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTiposIdentificacion() As DataSet
        Try
            Return ODatos.RecuperarTiposIdentificacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposIdentificacion", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposIdentificacion", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTiposIdentificacionVehiculo() As DataSet
        Try
            Return ODatos.RecuperarTiposIdentificacionVehiculo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposIdentificacionVehiculo", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposIdentificacionVehiculo", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTiposIncremento() As DataSet
        Try
            Return ODatos.RecuperarTiposIncremento()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposIncremento", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposIncremento", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTiposCredito() As DataSet
        Try
            Return ODatos.RecuperarTiposCredito()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposCredito", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposCredito", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub IngresarTarjetaACreditoConsumo(ByVal IdCredito As Integer, ByVal Numero As String)
        Try
            ODatos.IngresarTarjetaACreditoConsumo(IdCredito, Numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "IngresarTarjetaACreditoConsumo", "IdCredito: " & IdCredito & ", Numero: " & Numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "IngresarTarjetaACreditoConsumo", "IdCredito: " & IdCredito & ", Numero: " & Numero, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub IngresarVehiculoACreditoConsumo(ByVal idCredito As Int32, ByVal placa As String)
        Try
            ODatos.IngresarVehiculoACreditoConsumo(idCredito, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "IngresarVehiculoACreditoConsumo", "IdCredito: " & idCredito & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "IngresarVehiculoACreditoConsumo", "IdCredito: " & idCredito & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub EliminarTarjetaEnCreditoConsumo(ByVal idCredito As Int32, ByVal IdTarjetaConsumo As Int32)
        Try
            ODatos.EliminarTarjetaEnCreditoConsumo(idCredito, IdTarjetaConsumo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarTarjetaEnCreditoConsumo", "IdCredito: " & idCredito & ", IdTarjetaConsumo: " & IdTarjetaConsumo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarTarjetaEnCreditoConsumo", "IdCredito: " & idCredito & ", IdTarjetaConsumo: " & IdTarjetaConsumo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarVehiculoEnCreditoConsumo(ByVal idCredito As Int32, ByVal idVehiculo As Int32)
        Try
            ODatos.EliminarVehiculoEnCreditoConsumo(idCredito, idVehiculo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarVehiculoEnCreditoConsumo", "IdCredito: " & idCredito & ", IdVehiculo: " & idVehiculo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarVehiculoEnCreditoConsumo", "IdCredito: " & idCredito & ", IdVehiculo: " & idVehiculo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarVehiculosCreditoConsumo(ByVal idCredito As Int32) As DataSet
        Try
            Return ODatos.RecuperarVehiculosCreditoConsumo(idCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculosCreditoConsumo", "IdCredito: " & idCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculosCreditoConsumo", "IdCredito: " & idCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTarjetaCreditoConsumo(ByVal idCredito As Int32) As DataSet
        Try
            Return ODatos.RecuperarTarjetaCreditoConsumo(idCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTarjetaCreditoConsumo", "IdCredito: " & idCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTarjetaCreditoConsumo", "IdCredito: " & idCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarTarjetaEnCreditoConsumo(ByVal idCredito As Int32, ByVal idTarjetaConsumo As Int32, ByVal esActivado As Boolean)
        Try
            ODatos.ActualizarTarjetaEnCreditoConsumo(idCredito, idTarjetaConsumo, esActivado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTarjetaEnCreditoConsumo", "IdCredito: " & idCredito & ", IdTarjetaConsumo: " & idTarjetaConsumo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTarjetaEnCreditoConsumo", "IdCredito: " & idCredito & ", IdTarjetaConsumo: " & idTarjetaConsumo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarVehiculoEnCreditoConsumo(ByVal idCredito As Int32, ByVal idVehiculo As Int32, ByVal esActivado As Boolean)
        Try
            ODatos.ActualizarVehiculoEnCreditoConsumo(idCredito, idVehiculo, esActivado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVehiculoEnCreditoConsumo", "IdCredito: " & idCredito & ", IdVehiculo: " & idVehiculo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVehiculoEnCreditoConsumo", "IdCredito: " & idCredito & ", IdVehiculo: " & idVehiculo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarCreditoConsumoPorNumero(ByVal numeroCredito As String) As IDataReader
        Try
            Return ODatos.RecuperarCreditoConsumoPorNumero(numeroCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditoConsumoPorNumero", "Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditoConsumoPorNumero", "Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCreditosConsumoPorRUC(ByVal RUC As String) As DataSet
        Try
            Return ODatos.RecuperarCreditosConsumoPorRUC(RUC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditosConsumoPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditosConsumoPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ManejaCupoTipoCredito(ByVal idTipoCredito As Int32) As Boolean
        Try
            Return ODatos.ManejaCupoTipoCredito(idTipoCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ManejaCupoTipoCredito", "IdTipoCredito: " & idTipoCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ManejaCupoTipoCredito", "IdTipoCredito: " & idTipoCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ManejaCreditoConCupo(ByVal Placa As String) As Boolean
        Try
            Return ODatos.ManejaCreditoConCupo(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ManejaCreditoConCupo", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ManejaCreditoConCupo", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ManejaCreditoConCupo(ByVal Identificador As String, ByVal idTipoIdentificador As Int32) As Boolean
        Try
            Return ODatos.ManejaCreditoConCupo(Identificador, idTipoIdentificador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ManejaCreditoConCupo", "Identificador: " & Identificador & ", idTipoIdentificador: " & idTipoIdentificador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ManejaCreditoConCupo", "Identificador: " & Identificador & ", idTipoIdentificador: " & idTipoIdentificador, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarCreditoConsumo(ByVal RUC As String, ByVal cupo As Decimal, ByVal idTipoCredito As Int32, ByVal numeroCredito As String, ByVal fecha As DateTime, ByVal esActivado As Boolean) As Int32
        Try
            Return ODatos.InsertarCreditoConsumo(RUC, cupo, idTipoCredito, numeroCredito, fecha, esActivado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarCreditoConsumoFullStation(ByVal RUC As String, ByVal cupo As Decimal, ByVal idTipoCredito As Int32, ByVal numeroCredito As String, ByVal fecha As DateTime, ByVal esActivado As Boolean, ByVal IdTiposIdentificacionCredito As Int32, ByVal NroLetra As String, ByVal ValorLetra As Nullable(Of Decimal), ByVal NroOrden As Nullable(Of Int32)) As Int32
        Try
            Return ODatos.InsertarCreditoConsumoFullStation(RUC, cupo, idTipoCredito, numeroCredito, fecha, esActivado, IdTiposIdentificacionCredito, NroLetra, ValorLetra, NroOrden)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado & ", IdTiposIdentificacionCredito: " & IdTiposIdentificacionCredito & ", NroLetra: " & NroLetra & ", ValorLetra: " & ValorLetra & ", NroOrden: " & NroOrden, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado & ", IdTiposIdentificacionCredito: " & IdTiposIdentificacionCredito & ", NroLetra: " & NroLetra & ", ValorLetra: " & ValorLetra & ", NroOrden: " & NroOrden, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarCreditoConsumoFullStation(ByVal RUC As String, ByVal cupo As Decimal, ByVal idTipoCredito As Int32, ByVal numeroCredito As String, ByVal fecha As DateTime, ByVal esActivado As Boolean, ByVal IdTiposIdentificacionCredito As Int32) As Int32
        Try
            Return ODatos.InsertarCreditoConsumoFullStation(RUC, cupo, idTipoCredito, numeroCredito, fecha, esActivado, IdTiposIdentificacionCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado & ", IdTiposIdentificacionCredito: " & IdTiposIdentificacionCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado & ", IdTiposIdentificacionCredito: " & IdTiposIdentificacionCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarCreditoConsumo(ByVal idCredito As Int32, ByVal RUC As String, ByVal cupo As Decimal, ByVal idTipoCredito As Int32, ByVal numeroCredito As String, ByVal fecha As DateTime, ByVal esActivado As Boolean)
        Try
            ODatos.ActualizarCreditoConsumo(idCredito, RUC, cupo, idTipoCredito, numeroCredito, fecha, esActivado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarCreditoConsumoFullStation(ByVal idCredito As Int32, ByVal RUC As String, ByVal cupo As Decimal, ByVal idTipoCredito As Int32, ByVal numeroCredito As String, ByVal fecha As DateTime, ByVal esActivado As Boolean, ByVal IdTiposIdentificacionCredito As Int32)
        Try
            ODatos.ActualizarCreditoConsumoFullStation(idCredito, RUC, cupo, idTipoCredito, numeroCredito, fecha, esActivado, IdTiposIdentificacionCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado & ", IdTiposIdentificacionCredito: " & IdTiposIdentificacionCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado & ", IdTiposIdentificacionCredito: " & IdTiposIdentificacionCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarCreditoConsumoFullStation(ByVal idCredito As Int32, ByVal RUC As String, ByVal cupo As Decimal, ByVal idTipoCredito As Int32, ByVal numeroCredito As String, ByVal fecha As DateTime, ByVal esActivado As Boolean, ByVal IdTiposIdentificacionCredito As Int32, ByVal NroLetra As String, ByVal ValorLetra As Nullable(Of Decimal), ByVal NroOrden As Nullable(Of Int32))
        Try
            ODatos.ActualizarCreditoConsumoFullStation(idCredito, RUC, cupo, idTipoCredito, numeroCredito, fecha, esActivado, IdTiposIdentificacionCredito, NroLetra, ValorLetra, NroOrden)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado & ", IdTiposIdentificacionCredito: " & IdTiposIdentificacionCredito & ", NroLetra: " & NroLetra & ", ValorLetra: " & ValorLetra & ", NroOrden: " & NroOrden, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCreditoConsumo", "RUC: " & RUC & ", Cupo: " & cupo & ", IdTipoCredito: " & idTipoCredito & ", NumeroCredito: " & numeroCredito & ", Fecha: " & fecha & ", EsActivado: " & esActivado & ", IdTiposIdentificacionCredito: " & IdTiposIdentificacionCredito & ", NroLetra: " & NroLetra & ", ValorLetra: " & ValorLetra & ", NroOrden: " & NroOrden, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarVentasNoFacturadas(ByVal RUC As String, ByVal numeroCredito As String) As DataSet
        Try
            Return ODatos.RecuperarVentasNoFacturadas(RUC, numeroCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadas", "RUC: " & RUC & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadas", "RUC: " & RUC & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasNoFacturadasCredito(ByVal RUC As String, ByVal numeroCredito As String, ByVal FInicial As DateTime, ByVal FFinal As DateTime) As DataSet
        Try
            Return ODatos.RecuperarVentasNoFacturadasCredito(RUC, numeroCredito, FInicial, FFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadasCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito & ", Finicial: " & FInicial & ", FFinal: " & FFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadasCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito & ", Finicial: " & FInicial & ", FFinal: " & FFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentasNoFacturadasCredito(ByVal RUC As String, ByVal numeroCredito As String) As DataSet
        Try
            Return ODatos.RecuperarVentasNoFacturadasCredito(RUC, numeroCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadasCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadasCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentasNoFacturadasCredito2(ByVal RUC As String, ByVal numeroCredito As String, ByVal FInicial As DateTime, ByVal FFinal As DateTime) As DataSet
        Try
            Return ODatos.RecuperarVentasNoFacturadasCredito2(RUC, numeroCredito, FInicial, FFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadasCredito2", "RUC: " & RUC & ", Numero Credito: " & numeroCredito & ", Finicial: " & FInicial & ", FFinal: " & FFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadasCredito2", "RUC: " & RUC & ", Numero Credito: " & numeroCredito & ", Finicial: " & FInicial & ", FFinal: " & FFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub ActualizarEstadoFacturaCredito(ByVal RUC As String, ByVal numeroCredito As String)
        Try
            ODatos.ActualizarEstadoFacturaCredito(RUC, numeroCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoFacturaCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoFacturaCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Function RecuperarFacturasCredito(ByVal RUC As String, ByVal numeroCredito As String) As DataSet
        Try
            Return ODatos.RecuperarFacturasCredito(RUC, numeroCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadasCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasNoFacturadasCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function FacturarVentasCredito(ByVal RUC As String, ByVal numeroCredito As String, ByVal Finicial As DateTime, ByVal FFinal As DateTime) As Int32
        Try
            Return ODatos.FacturarVentasCredito(RUC, numeroCredito, Finicial, FFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FacturarVentasCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito & ", Finicial: " & Finicial & ", FFinal: " & FFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FacturarVentasCredito", "RUC: " & RUC & ", Numero Credito: " & numeroCredito & ", Finicial: " & Finicial & ", FFinal: " & FFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub FacturarVentasCreditoConsumoTmp(ByVal idVentaFacturacion As Int64, ByVal factura As String, ByVal numeroCredito As String, ByVal EsVentaCanastilla As Boolean, ByVal borrarTemporal As Boolean)
        Try
            ODatos.FacturarVentasCreditoConsumoTmp(idVentaFacturacion, factura, numeroCredito, EsVentaCanastilla, borrarTemporal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FacturarVentasCreditoConsumoTmp", "IdVentaFacturacion: " & idVentaFacturacion & ", Factura: " & factura & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FacturarVentasCreditoConsumoTmp", "IdVentaFacturacion: " & idVentaFacturacion & ", Factura: " & factura & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function EsVentaCanastilla(ByVal numero As String, ByVal prefijo As String) As Boolean
        Try
            Return ODatos.EsVentaCanastilla(numero, prefijo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsVentaCanastilla", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsVentaCanastilla", "Numero: " & numero & " , Prefijo: " & prefijo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub FacturarVentasCreditoConsumo(ByVal RUC As String, ByVal factura As String, ByVal numeroCredito As String)
        Try
            ODatos.FacturarVentasCreditoConsumo(RUC, factura, numeroCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FacturarVentasCreditoConsumo", "RUC: " & RUC & ", Factura: " & factura & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FacturarVentasCreditoConsumo", "RUC: " & RUC & ", Factura: " & factura & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub FacturarVentasCreditoConsumoSinRecaudo(ByVal RUC As String, ByVal factura As String, ByVal numeroCredito As String)
        Try
            ODatos.FacturarVentasCreditoConsumoSinRecaudo(RUC, factura, numeroCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FacturarVentasCreditoConsumo", "RUC: " & RUC & ", Factura: " & factura & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FacturarVentasCreditoConsumo", "RUC: " & RUC & ", Factura: " & factura & ", Numero Credito: " & numeroCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarClientePorRUC(ByVal RUC As String) As DataSet
        Try
            Return ODatos.RecuperarClientePorRUC(RUC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClienteLocalPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClienteLocalPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarClienteLocalPorRUC(ByVal RUC As String) As IDataReader
        Try
            Return ODatos.RecuperarClienteLocalPorRUC(RUC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClienteLocalPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClienteLocalPorRUC", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub AutorizarVentaCreditoConsumoPeru(ByVal RUC As String, ByVal placa As String)
        Try
            ODatos.AutorizarVentaCreditoConsumoPeru(RUC, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AutorizarVentaCreditoConsumoPeru", "RUC: " & RUC & " , Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AutorizarVentaCreditoConsumoPeru", "RUC: " & RUC & " , Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try

    End Sub
    Public Sub ActualizarVentaCreditoChile(ByVal Recibo As Int64)
        Try
            ODatos.ActualizarVentaCreditoChile(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVentaCreditoChile", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVentaCreditoChile", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try

    End Sub


    Public Sub AutorizacionVentaCredito(ByVal TipoIdentificacion As Integer, ByVal Documento As String, ByVal DocumentoAux As String)
        Try
            ODatos.AutorizacionVentaCredito(TipoIdentificacion, Documento, DocumentoAux)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AutorizacionVentaCredito", "Documento: " & Documento & " , DocumentoAux: " & DocumentoAux, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AutorizacionVentaCredito", "Documento: " & Documento & " , DocumentoAux: " & DocumentoAux, "FallaStoredProcedure")
            Throw
        End Try

    End Sub


    Public Sub AutorizacionVentaCreditoBolivia(ByVal TipoIdentificacion As Integer, ByVal Nit As String, ByVal Vale As String, ByVal Placa As String)
        Try
            ODatos.AutorizacionVentaCreditoBolivia(TipoIdentificacion, Nit, Vale, Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AutorizacionVentaCreditoBolivia", "Nit: " & Nit & " , Vale: " & Vale & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AutorizacionVentaCreditoBolivia", "Nit: " & Nit & " , Vale: " & Vale & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub AutorizacionVentaCredito(ByVal TipoIdentificacion As Integer, ByVal Documento As String, ByVal DocumentoAux As String, ByVal Nit As String)
        Try
            ODatos.AutorizacionVentaCredito(TipoIdentificacion, Documento, DocumentoAux, Nit)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AutorizacionVentaCredito", "Documento: " & Documento & " , DocumentoAux: " & DocumentoAux, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AutorizacionVentaCredito", "Documento: " & Documento & " , DocumentoAux: " & DocumentoAux, "FallaStoredProcedure")
            Throw
        End Try

    End Sub
#End Region

#Region "Generador"
    Public Function RecuperarReportesPeru() As DataTable
        Return Me.ODatos.RecuperarReportesPeru()
    End Function

#End Region

#Region "Densidad Gazel"
    Public Function ExistenProtocolosPumpControl() As Boolean
        Try
            Return ODatos.ExistenProtocolosPumpControl()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExistenProtocolosPumpControl", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExistenProtocolosPumpControl", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarHistoricoDensidad(ByVal densidad As Decimal)
        Try
            ODatos.InsertarHistoricoDensidad(densidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarHistoricoDensidad", "Densidad: " & densidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarHistoricoDensidad", "Densidad: " & densidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Terpel Ecuador"
    Public Function RecuperarTanque() As DataTable
        Try
            Return ODatos.RecuperarTanque
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanque", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanque", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTanque(ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarTanque(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanque", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanque", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasFacturar(ByVal FechaInicial As String, ByVal FechaFinal As String,
                                        Optional ByVal Placa As String = "", Optional ByVal Documento As String = "") As DataTable
        Try
            Return ODatos.RecuperarVentasFacturar(FechaInicial, FechaFinal, Placa, Documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasFacturar", "Documento: " & Documento & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasFacturar", "Documento: " & Documento & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "SRE"
    Public Sub ActualizarCondicionesPorServicio(ByVal idServicio As Int32, ByVal minTanqueoPorDia As Decimal)
        Try
            ODatos.ActualizarCondicionesPorServicio(idServicio, minTanqueoPorDia)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCondicionesPorServicio", "idServicio: " & idServicio & " , Min. Tanqueo Por Dia: " & minTanqueoPorDia, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCondicionesPorServicio", "idServicio: " & idServicio & " , Min. Tanqueo Por Dia: " & minTanqueoPorDia, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarCondicionesPorServicio(ByVal idServicio As Int32) As IDataReader
        Try
            Return ODatos.RecuperarCondicionesPorServicio(idServicio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCondicionesPorServicio", "IdServicio: " & idServicio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCondicionesPorServicio", "IdServicio: " & idServicio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormasPagoEsActivo() As DataSet
        Try
            Return ODatos.RecuperarFormasPagoEsActivo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoEsActivo", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoEsActivo", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Medios Pago"
    Public Function RecuperarMedioPagoNoAutorizadoPorRecibo(ByVal recibo As Long, ByVal documento As String, ByVal medioPago As Short) As Fabrica.MediosPagos
        Dim OMedioPago As MediosPagos = Nothing
        Try
            Dim ODatosMedios As DataTable = ODatos.RecuperarMedioPagoNoAutorizadoPorRecibo(recibo, documento, medioPago)
            OMedioPago = New MediosPagos()
            If ODatosMedios.Rows.Count > 0 Then
                For Each row As DataRow In ODatosMedios.Rows
                    'OMedioPago.EsAutorizado = CBool(row.Item("EsAutorizado"))
                    OMedioPago.Valor = CDbl(row.Item("Valor"))
                    OMedioPago.NroTarjeta = row.Item("NroTarjeta").ToString()
                    OMedioPago.NroConfirmacion = row.Item("NroConfirmacion").ToString()
                    OMedioPago.TipoLectura = CInt(row.Item("IdTipoLectura"))
                    OMedioPago.IdFormaPago = CShort(row.Item("IdFormaPago"))
                    OMedioPago.IdMediosPago = CLng(row.Item("IdMediosPago"))
                Next

                Return OMedioPago
            Else
                Return Nothing
            End If

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMedioPagoPorRecibo", "recibo: " & recibo.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMedioPagoPorRecibo", "recibo: " & recibo.ToString, "FallaStoredProcedure")
            Throw
        End Try

        Return OMedioPago
    End Function

    Public Function InsertarMediosPagoTemp(ByVal Recibo As Long, ByVal IdFormaPago As Int16, ByVal Documento As String, ByVal Valor As Double, ByVal saldo As Decimal, ByVal EsAutorizado As Boolean, ByVal IdTipoLectura As Int32, ByVal NroConfirmacion As String, ByVal MontoReal As Double, Optional ByVal esMedioPagoEspecial As Boolean = True) As Int64
        Try
            Return ODatos.InsertarMediosPagoTemp(Recibo, IdFormaPago, Documento, Valor, saldo, EsAutorizado, IdTipoLectura, NroConfirmacion, MontoReal, esMedioPagoEspecial)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMediosPagoTemp", "Recibo: " & Recibo & ", IdFormapago: " & IdFormaPago & ", Documento: " & Documento & ", Valor: " & Valor & ", EsAutorizado: " & EsAutorizado & ", IdTipoLectura: " & IdTipoLectura & ", NroConfirmacion: " & NroConfirmacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMediosPagoTemp", "Recibo: " & Recibo & ", IdFormapago: " & IdFormaPago & ", Documento: " & Documento & ", Valor: " & Valor & ", EsAutorizado: " & EsAutorizado & ", IdTipoLectura: " & IdTipoLectura & ", NroConfirmacion: " & NroConfirmacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarMedioPagoTemp(ByVal IdMedioPago As Int64)
        Try
            ODatos.EliminarMedioPagoTemp(IdMedioPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarMedioPagoTemp", "IdMedioPago: " & IdMedioPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarMedioPagoTemp", "IdMedioPago: " & IdMedioPago, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarMediosPago(ByVal recibo As Int64)
        Try
            ODatos.EliminarMediosPago(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarMedioPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarMedioPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMediosPagoTemp(ByVal IdMedioPago As Int64, ByVal valor As Double, ByVal Saldo As Double, ByVal MontoReal As Double, ByVal EsAutorizado As Boolean)
        Try
            ODatos.ActualizarMediosPagoTemp(IdMedioPago, valor, Saldo, MontoReal, EsAutorizado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMediosPagoTemp", "IdMedioPago: " & IdMedioPago & ", EsAutorizado: " & EsAutorizado.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMediosPagoTemp", "IdMedioPago: " & IdMedioPago & ", EsAutorizado: " & EsAutorizado.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstadoVenta(ByVal Recibo As Int64, ByVal IdEstado As Int32)
        Try
            ODatos.ActualizarEstadoVenta(Recibo, IdEstado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoVenta", "Recibo: " & Recibo & "IdEstado: " & IdEstado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoVenta", "Recibo: " & Recibo & "IdEstado: " & IdEstado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstadoTransmisionVenta(ByVal Recibo As Int64, ByVal IdEstado As Int32)
        Try
            ODatos.ActualizarEstadoTransmisionVenta(Recibo, IdEstado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoTransmisionVenta", "Recibo: " & Recibo & "IdEstado: " & IdEstado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoTransmisionVenta", "Recibo: " & Recibo & "IdEstado: " & IdEstado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstadoRecaudo(ByVal IdRecaudo As Int32, ByVal IdEstado As Int32)
        Try
            ODatos.ActualizarEstadoRecaudo(IdRecaudo, IdEstado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoRecaudo", "IdRecaudo: " & IdRecaudo & "IdEstado: " & IdEstado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoRecaudo", "IdRecaudo: " & IdRecaudo & "IdEstado: " & IdEstado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstadoRecaudo(ByVal IdRecaudo As Int32, ByVal IdEstado As Int32, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarEstadoRecaudo(IdRecaudo, IdEstado, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoRecaudo", "IdRecaudo: " & IdRecaudo & "IdEstado: " & IdEstado & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoRecaudo", "IdRecaudo: " & IdRecaudo & "IdEstado: " & IdEstado & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Function RecuperarMediosPagoTemporales(ByVal Recibo As Long, ByVal IdFormaPago As Integer, ByVal NroTarjeta As String) As Fabrica.MediosPagoTemporales

        Try
            Dim Datos As IDataReader = ODatos.RecuperarMediosPagoTemporales(Recibo, IdFormaPago, NroTarjeta)
            Dim ORespuesta As MediosPagoTemporales = Nothing
            If Datos.Read Then
                ORespuesta = New MediosPagoTemporales
                ORespuesta.EsAutorizado = CBool(Datos.Item("EsAutorizado"))
                ORespuesta.Saldo = CDec(Datos.Item("Saldo"))
                ORespuesta.Valor = CDbl(Datos.Item("valor"))
            End If

            Datos.Close()
            Return ORespuesta
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMediosPagoTemporales", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMediosPagoTemporales", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEstadoVenta(ByVal Recibo As Long) As Int32
        Try
            Return ODatos.RecuperarEstadoVenta(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstadoVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstadoVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarEstadoVenta(ByVal Recibo As Long, ByVal idEstacion As Int16) As Int32
        Try
            Return ODatos.RecuperarEstadoVenta(Recibo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstadoVenta", "IdEstacion: " & idEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstadoVenta", "IdEstacion: " & idEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteMedioPagoEnVenta(ByVal Recibo As Long, ByVal IdFormaPago As Integer, ByVal NroTarjeta As String) As Boolean
        Try
            Return ODatos.ExisteMedioPagoEnVenta(Recibo, IdFormaPago, NroTarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteMedioPago", "Recibo: " & Recibo & "FP: " & IdFormaPago & " , Tarjeta: " & NroTarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteMedioPago", "Recibo: " & Recibo & "FP: " & IdFormaPago & " , Tarjeta: " & NroTarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteMediosPagosEspecialesAutorizados(ByVal Recibo As Int64) As Integer
        Try
            Return ODatos.ExisteMediosPagosEspecialesAutorizados(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteMediosPagosEspecialesAutorizados", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteMediosPagosEspecialesAutorizados", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ExisteSaldoTarjeta(ByVal NroTarjeta As String, ByVal valor As Double) As Boolean
        Try
            Return ODatos.ExisteSaldoTarjeta(NroTarjeta, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteSaldoTarjeta", "Número Tarjeta: " & NroTarjeta & "Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteSaldoTarjeta", "Número Tarjeta: " & NroTarjeta & "Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSaldoCupo(ByVal NroTarjeta As String) As Double
        Try
            Return ODatos.RecuperarSaldoCupo(NroTarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaldoCupo", "Número Tarjeta: " & NroTarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaldoCupo", "Número Tarjeta: " & NroTarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarSaldoCupoVenta(ByVal Recibo As Int64) As Double
        Try
            Return ODatos.RecuperarSaldoCupoVenta(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaldoCupoVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaldoCupoVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Slogans Mexico"
    Public Function RecuperarSlogansPorContrato(ByVal contrato As String) As IDataReader
        Try
            Return ODatos.RecuperarSlogansPorContrato(contrato)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSlogansPorContrato", "Contrato: " & contrato, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSlogansPorContrato", "Contrato: " & contrato, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Producto"
    Public Sub ActualizarProducto(ByVal idProducto As Int32, ByVal solicitaLectura As Boolean)
        Try
            ODatos.ActualizarProducto(idProducto, solicitaLectura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarProducto", "Id Producto: " & idProducto & " , Solicita Lectura: " & solicitaLectura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarProducto", "Id Producto: " & idProducto & " , Solicita Lectura: " & solicitaLectura, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarProducto(ByVal idProducto As Int32, ByVal solicitaLectura As Boolean, ByVal IdEstacion As Int16)
        Try
            ODatos.ActualizarProducto(idProducto, solicitaLectura, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarProducto", "Id Producto: " & idProducto & " , Solicita Lectura: " & solicitaLectura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarProducto", "Id Producto: " & idProducto & " , Solicita Lectura: " & solicitaLectura, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarProducto(ByVal IdProducto As Int32) As String
        Try
            Return ODatos.RecuperarProducto(IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProducto", "IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProducto", "IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosEnCara(ByVal Cara As Int16) As IDataReader
        Try
            Return ODatos.RecuperarProductosEnCara(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosEnCara", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosEnCara", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductoCombustibleCodigo(ByVal Codigo As Int32) As String
        Try
            Return ODatos.RecuperarProductoCombustibleCodigo(Codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductoCombustibleCodigo", "Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductoCombustibleCodigo", "Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Aforos"
    Public Sub CargarAforos(ByVal ruta As String)
        Try
            ODatos.CargarAforos(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarAforos", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarAforos", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "   Dispositivos de Medición    "
    Public Function RecuperarTanquesActivosPorDispositivo(ByVal idDispositivo As Int32) As DataSet
        Try
            Return ODatos.RecuperarTanquesActivosPorDispositivo(idDispositivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicionActivos", "idDispositivo: " & idDispositivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicionActivos", "idDispositivo: " & idDispositivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTanquesActivosPorDispositivo(ByVal idDispositivo As Int32, ByVal IdEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarTanquesActivosPorDispositivo(idDispositivo, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicionActivos", "IdEstacion: " & IdEstacion & "idDispositivo: " & idDispositivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicionActivos", "IdEstacion: " & IdEstacion & "idDispositivo: " & idDispositivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDispositivosMedicionActivos(ByVal IdEstacion As Short) As DataSet
        Try
            Return ODatos.RecuperarDispositivosMedicionActivos(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicionActivos", "IdEstacion:" & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicionActivos", "IdEstacion:" & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarDispositivosMedicionActivos() As DataSet
        Try
            Return ODatos.RecuperarDispositivosMedicionActivos()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicionActivos", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicionActivos", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarDispositivosMedicion(ByVal IdEstacion As Integer) As DataTable
        Try
            Return ODatos.RecuperarDispositivosMedicion(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicion", "RecuperarDispositivosMedicion" & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicion", "RecuperarDispositivosMedicion" & "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function









    Public Function RecuperarDispositivosMedicion() As DataTable
        Try
            Return ODatos.RecuperarDispositivosMedicion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicion", "RecuperarDispositivosMedicion", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivosMedicion", "RecuperarDispositivosMedicion", "FallaStoredProcedure")
            Throw
        End Try
    End Function






    Public Function RecuperarDispositivoMedicionPorID(ByVal IdDispositivo As Int16) As DataTable
        Try
            Return ODatos.RecuperarDispositivoMedicionPorID(IdDispositivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDispositivoMedicionPorID", "IdDispositivo: " & IdDispositivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDispositivoMedicionPorID", "IdDispositivo: " & IdDispositivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarDispositivoMedicion(ByVal Nombre As String, ByVal EsActivo As Boolean, ByVal IdPuerto As Int16, ByVal TipoComunicacion As Int16, ByVal IP As String, ByVal PuertoIP As String)
        Try
            ODatos.InsertarDispositivoMedicion(Nombre, EsActivo, IdPuerto, TipoComunicacion, IP, PuertoIP)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarDispositivoMedicion", "Nombre: " & Nombre & " EsActivo: " & EsActivo & " IdPuerto: " & IdPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarDispositivoMedicion", "Nombre: " & Nombre & " EsActivo: " & EsActivo & " IdPuerto: " & IdPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub InsertarDispositivoMedicion(ByVal Nombre As String, ByVal EsActivo As Boolean, ByVal IdPuerto As Int16, ByVal TipoComunicacion As Int16, ByVal IP As String, ByVal PuertoIP As String, ByVal IdEstacion As Integer)
        Try
            ODatos.InsertarDispositivoMedicion(Nombre, EsActivo, IdPuerto, TipoComunicacion, IP, PuertoIP, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarDispositivoMedicion", "Nombre: " & Nombre & " EsActivo: " & EsActivo & " IdPuerto: " & IdPuerto & " IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarDispositivoMedicion", "Nombre: " & Nombre & " EsActivo: " & EsActivo & " IdPuerto: " & IdPuerto & " IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ModificarDispositivoMedicion(ByVal IdDispositivo As Int16, ByVal Nombre As String, ByVal EsActivo As Boolean, ByVal IdPuerto As Int16, ByVal TipoComunicacion As Int16, ByVal IP As String, ByVal PuertoIP As String)
        Try
            ODatos.ModificarDispositivoMedicion(IdDispositivo, Nombre, EsActivo, IdPuerto, TipoComunicacion, IP, PuertoIP)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarDispositivoMedicion", "IdDispositivo: " & IdDispositivo.ToString() & "Nombre: " & Nombre & " EsActivo: " & EsActivo & " IdPuerto: " & IdPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarDispositivoMedicion", "IdDispositivo: " & IdDispositivo.ToString() & "Nombre: " & Nombre & " EsActivo: " & EsActivo & " IdPuerto: " & IdPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub ModificarDispositivoMedicion(ByVal IdDispositivo As Int16, ByVal Nombre As String, ByVal EsActivo As Boolean, ByVal IdPuerto As Int16, ByVal TipoComunicacion As Int16, ByVal IP As String, ByVal PuertoIP As String, ByVal IdEstacion As Integer)
        Try
            ODatos.ModificarDispositivoMedicion(IdDispositivo, Nombre, EsActivo, IdPuerto, TipoComunicacion, IP, PuertoIP, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarDispositivoMedicion", "IdDispositivo: " & IdDispositivo.ToString() & "Nombre: " & Nombre & " EsActivo: " & EsActivo & " IdPuerto: " & IdPuerto & " IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarDispositivoMedicion", "IdDispositivo: " & IdDispositivo.ToString() & "Nombre: " & Nombre & " EsActivo: " & EsActivo & " IdPuerto: " & IdPuerto & " IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarDispositivoMedicion(ByVal IdDispositivo As Int16)
        Try
            ODatos.EliminarDispositivoMedicion(IdDispositivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarDispositivoMedicion", "IdDispositivo: " & IdDispositivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarDispositivoMedicion", "IdDispositivo: " & IdDispositivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarTipoComunicacionDispositivo() As DataTable
        Try
            Return ODatos.RecuperarTipoComunicacionDispositivo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoComunicacionDispositivo", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoComunicacionDispositivo", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Pedidos Combustible"
    Public Sub CargarPedidosCombustible(ByVal ruta As String)
        Try
            ODatos.CargarPedidosCombustible(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarPedidosCombustible", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarPedidosCombustible", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarPedidoCombustible(ByVal documento As String)
        Try
            ODatos.EliminarPedidoCombustible(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarPedidoCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarPedidoCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Tanques"
    Public Function EsTanqueConectadoPorSifon(ByVal codigo As String) As Boolean
        Try
            Return ODatos.EsTanqueConectadoPorSifon(codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsTanqueConectadoPorSifon", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsTanqueConectadoPorSifon", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function EsTanqueConectadoPorSifon(ByVal codigo As String, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.EsTanqueConectadoPorSifon(codigo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsTanqueConectadoPorSifon", "IdEstacion: " & idEstacion & "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsTanqueConectadoPorSifon", "IdEstacion: " & idEstacion & "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTanquesConectados() As DataTable
        Try
            Return ODatos.RecuperarTanquesConectados()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesConectados", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesConectados", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarTanquesConectados(ByVal IdEstacion As Integer) As DataTable
        Try
            Return ODatos.RecuperarTanquesConectados(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesConectados", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesConectados", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarTanquesHijoYPadreConectadosPorSifon(ByVal codigo As String) As IDataReader
        Try
            Return ODatos.RecuperarTanquesHijoYPadreConectadosPorSifon(codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesHijoYPadreConectadosPorSifon", "codigo :" & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesHijoYPadreConectadosPorSifon", "codigo :" & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTanquesHijoYPadreConectadosPorSifon(ByVal codigo As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTanquesHijoYPadreConectadosPorSifon(codigo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesHijoYPadreConectadosPorSifon", "IdEstacion: " & idEstacion & "codigo :" & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesHijoYPadreConectadosPorSifon", "IdEstacion: " & idEstacion & "codigo :" & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDiasParaAjustarStocks() As IDataReader
        Try
            Return ODatos.RecuperarDiasParaAjustarStocks()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDiasParaAjustarStocks", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDiasParaAjustarStocks", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarDiasParaAjustarStocks(ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarDiasParaAjustarStocks(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDiasParaAjustarStocks", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDiasParaAjustarStocks", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTiposTanquesConectados() As DataTable
        Try
            Return ODatos.RecuperarTiposTanquesConectados()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposTanquesConectados", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposTanquesConectados", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTanques() As IDataReader
        Try
            Return ODatos.RecuperarTanques()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanques", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanques", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTanquesDataTable() As DataTable
        Try
            Return ODatos.RecuperarTanquesDataTable()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesDataTable", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesDataTable", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTanquesDataTable(ByVal IdEstacion As Integer) As DataTable
        Try
            Return ODatos.RecuperarTanquesDataTable(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesDataTable", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesDataTable", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function





    Public Function RecuperarTanquePorId(ByVal IdTanque As Int16) As DataTable
        Try
            Return ODatos.RecuperarTanquePorId(IdTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquePorId", "IdTanque: " & IdTanque.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquePorId", "IdTanque: " & IdTanque.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTanquesPorIdDispositivo(ByVal IdDispositivo As Int16) As DataTable
        Try
            Return ODatos.RecuperarTanquesPorIdDispositivo(IdDispositivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesPorIdDispositivo", "IdDispositivo: " & IdDispositivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesPorIdDispositivo", "IdDispositivo: " & IdDispositivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimasVariablesPorTanque(ByVal codigo As String) As IDataReader
        Try
            Return ODatos.RecuperarUltimasVariablesPorTanque(codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimasVariablesPorTanque", "Codigo:" & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimasVariablesPorTanque", "Codigo:" & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimasVariablesMedicionTurno(ByVal idTurno As Int32) As DataTable
        Try
            Return ODatos.RecuperarUltimasVariablesMedicionTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimasVariablesMedicionTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimasVariablesMedicionTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturacionCombustibleTerpel(ByVal idDocumento As Int32) As DataTable
        Try
            Return ODatos.RecuperarFacturacionCombustibleTerpel(idDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturacionCombustibleTerpel", "idDocumento: " & idDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturacionCombustibleTerpel", "idDocumento: " & idDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFacturacionCanastillaTerpel(ByVal idDocumento As Int32) As DataTable
        Try
            Return ODatos.RecuperarFacturacionCanastillaTerpel(idDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturacionCanastillaTerpel", "idDocumento: " & idDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturacionCanastillaTerpel", "idDocumento: " & idDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDetalleFacturacionCombustibleTerpel(ByVal idDocumento As Int32) As DataTable
        Try
            Return ODatos.RecuperarDetalleFacturacionCombustibleTerpel(idDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDetalleFacturacionCombustibleTerpel", "idDocumento: " & idDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDetalleFacturacionCombustibleTerpel", "idDocumento: " & idDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDetalleFacturacionCanastillaTerpel(ByVal idDocumento As Int32) As DataTable
        Try
            Return ODatos.RecuperarDetalleFacturacionCanastillaTerpel(idDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDetalleFacturacionCanastillaTerpel", "idDocumento: " & idDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDetalleFacturacionCanastillaTerpel", "idDocumento: " & idDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarStockTurno(ByVal idTurno As Int32) As DataSet
        Try
            Return ODatos.RecuperarStockTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarStockTurno", "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarStockTurno", "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarTanque(ByVal Descripcion As String, ByVal Nombre As String, ByVal Codigo As String, ByVal Capacidad As Decimal, ByVal Stock As Decimal, ByVal IdDispositivo As System.Nullable(Of Int16), ByVal EsActivo As Boolean)
        Try
            ODatos.InsertarTanque(Descripcion, Nombre, Codigo, Capacidad, Stock, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTanque", "Descripcion: " & Descripcion & " Nombre: " & Nombre & " Codigo: " & Codigo & " Capacidad: " & Capacidad.ToString() & " Stock: " & Stock.ToString() & " IdDispositivo: " & EsActivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTanque", "Descripcion: " & Descripcion & " Nombre: " & Nombre & " Codigo: " & Codigo & " Capacidad: " & Capacidad.ToString() & " Stock: " & Stock.ToString() & " IdDispositivo: " & EsActivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub




    Public Sub InsertarTanquesConectados(ByVal TanquePrincipal As Integer, ByVal TanqueHijo As Integer, ByVal Tipo As Byte)
        Try
            ODatos.InsertarTanquesConectados(TanquePrincipal, TanqueHijo, Tipo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTanquesConectados", "TanquePrincipal: " & CStr(TanquePrincipal) & ", TanqueHijo: " & CStr(TanqueHijo) & ", Tipo: " & CStr(Tipo), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTanquesConectados", "TanquePrincipal: " & CStr(TanquePrincipal) & ", TanqueHijo: " & CStr(TanqueHijo) & ", Tipo: " & CStr(Tipo), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarTanquesConectados(ByVal TanquePrincipal As Integer, ByVal TanqueHijo As Integer, ByVal Tipo As Byte, ByVal IdEstacion As Int16)
        Try
            ODatos.InsertarTanquesConectados(TanquePrincipal, TanqueHijo, Tipo, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTanquesConectados", "TanquePrincipal: " & CStr(TanquePrincipal) & ", TanqueHijo: " & CStr(TanqueHijo) & ", Tipo: " & CStr(Tipo), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTanquesConectados", "TanquePrincipal: " & CStr(TanquePrincipal) & ", TanqueHijo: " & CStr(TanqueHijo) & ", Tipo: " & CStr(Tipo), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarTanquesConectados(ByVal TanquePrincipal As Integer, ByVal TanqueHijo As Integer, ByVal Tipo As Byte)
        Try
            ODatos.EliminarTanquesConectados(TanquePrincipal, TanqueHijo, Tipo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarTanquesConectados", "TanquePrincipal: " & CStr(TanquePrincipal) & ", TanqueHijo: " & CStr(TanqueHijo) & ", Tipo: " & CStr(Tipo), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarTanquesConectados", "TanquePrincipal: " & CStr(TanquePrincipal) & ", TanqueHijo: " & CStr(TanqueHijo) & ", Tipo: " & CStr(Tipo), "FallaStoredProcedure")
            Throw
        End Try
    End Sub




    Public Sub EliminarTanquesConectados(ByVal TanquePrincipal As Integer, ByVal TanqueHijo As Integer, ByVal Tipo As Byte, ByVal IdEstacion As Integer)
        Try
            ODatos.EliminarTanquesConectados(TanquePrincipal, TanqueHijo, Tipo, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarTanquesConectados", "TanquePrincipal: " & CStr(TanquePrincipal) & ", TanqueHijo: " & CStr(TanqueHijo) & ", Tipo: " & CStr(Tipo) & "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarTanquesConectados", "TanquePrincipal: " & CStr(TanquePrincipal) & ", TanqueHijo: " & CStr(TanqueHijo) & ", Tipo: " & CStr(Tipo) & "IdEstacion:" & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ModificarTanque(ByVal IdTanque As Int16, ByVal Descripcion As String, ByVal Nombre As String, ByVal Codigo As String, ByVal Capacidad As Decimal, ByVal Stock As Decimal, ByVal IdDispositivo As System.Nullable(Of Int16), ByVal EsActivo As Boolean)
        Try
            ODatos.ModificarTanque(IdTanque, Descripcion, Nombre, Codigo, Capacidad, Stock, IdDispositivo, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarTanque", "IdTanque: " & IdTanque.ToString() & " Descripcion: " & Descripcion & " Nombre: " & Nombre & " Codigo: " & Codigo & " Capacidad: " & Capacidad.ToString() & " Stock: " & Stock.ToString() & " IdDispositivo: " & EsActivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarTanque", "IdTanque: " & IdTanque.ToString() & " Descripcion: " & Descripcion & " Nombre: " & Nombre & " Codigo: " & Codigo & " Capacidad: " & Capacidad.ToString() & " Stock: " & Stock.ToString() & " IdDispositivo: " & EsActivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub ModificarTanque(ByVal IdTanque As Int16, ByVal Descripcion As String, ByVal Nombre As String, ByVal Codigo As String, ByVal Capacidad As Decimal, ByVal Stock As Decimal, ByVal IdDispositivo As System.Nullable(Of Int16), ByVal EsActivo As Boolean, ByVal IdEstacion As Integer)
        Try
            ODatos.ModificarTanque(IdTanque, Descripcion, Nombre, Codigo, Capacidad, Stock, IdDispositivo, EsActivo, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarTanque", "IdTanque: " & IdTanque.ToString() & " Descripcion: " & Descripcion & " Nombre: " & Nombre & " Codigo: " & Codigo & " Capacidad: " & Capacidad.ToString() & " Stock: " & Stock.ToString() & " IdDispositivo: " & EsActivo.ToString() & " IdEstacion: " & IdEstacion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarTanque", "IdTanque: " & IdTanque.ToString() & " Descripcion: " & Descripcion & " Nombre: " & Nombre & " Codigo: " & Codigo & " Capacidad: " & Capacidad.ToString() & " Stock: " & Stock.ToString() & " IdDispositivo: " & EsActivo.ToString() & " IdEstacion: " & IdEstacion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarTanqueProducto(ByVal IdEstacion As Integer) As DataTable
        Try
            Return ODatos.RecuperarTanqueProducto(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanqueProducto", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanqueProducto", "IdEstacion: " & IdEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarTanqueProducto() As DataTable
        Try
            Return ODatos.RecuperarTanqueProducto()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanqueProducto", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanqueProducto", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarTanqueProductoPorTanque(ByVal IdTanque As Int16) As DataTable
        Try
            Return ODatos.RecuperarTanqueProductoPorTanque(IdTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanqueProductoPorTanque", "IdTanque: " & IdTanque.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanqueProductoPorTanque", "IdTanque: " & IdTanque.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarTanqueProducto(ByVal IdTanque As Int16, ByVal IdProducto As Int16)
        Try
            ODatos.InsertarTanqueProducto(IdTanque, IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTanqueProducto", "IdTanque: " & IdTanque.ToString() & " IdProducto: " & IdProducto.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTanqueProducto", "IdTanque: " & IdTanque.ToString() & " IdProducto: " & IdProducto.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub




    Public Sub InsertarTanqueProducto(ByVal IdTanque As Int16, ByVal IdProducto As Int16, ByVal IdEstacion As Integer)
        Try
            ODatos.InsertarTanqueProducto(IdTanque, IdProducto, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTanqueProducto", "IdTanque: " & IdTanque.ToString() & " IdProducto: " & IdProducto.ToString() & " IdEstacion: " & IdEstacion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTanqueProducto", "IdTanque: " & IdTanque.ToString() & " IdProducto: " & IdProducto.ToString() & " IdEstacion: " & IdEstacion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarTanqueProducto(ByVal IdTanque As Int16, ByVal IdProducto As Int16)
        Try
            ODatos.EliminarTanqueProducto(IdTanque, IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarTanqueProducto", "IdTanque: " & IdTanque.ToString() & " IdProducto: " & IdProducto.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarTanqueProducto", "IdTanque: " & IdTanque.ToString() & " IdProducto: " & IdProducto.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarIdDispositivoporTanque(ByVal Tanque As String) As Int16
        Try
            ODatos.RecuperarIdDispositivoporTanque(Tanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdDispositivoporTanque", "Tanque: " & Tanque.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdDispositivoporTanque", "anque: " & Tanque.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function




#End Region
#Region " Logueo de Alarmas y Variables de Medición "
    'Se implementan los metodos de accesso a datos necesarios para el logueo de variables y alarmas
    Public Sub InsertaAlarmaMedicion(ByVal IdTipoAlarma As Int16, ByVal IdDispositivoMedicion As Int16, ByVal IdTurno As Int64, ByVal IdTanque As Int16)
        Try
            ODatos.InsertaAlarmaMedicion(IdTipoAlarma, IdDispositivoMedicion, IdTurno, IdTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertaAlarmaMedicion", "IdTanque: " & IdTanque.ToString() & " IdDispositivoMedicion: " & IdDispositivoMedicion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertaAlarmaMedicion", "IdTanque: " & IdTanque.ToString() & " IdDispositivoMedicion: " & IdDispositivoMedicion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertaAlarmaMedicion(ByVal IdTipoAlarma As Int16, ByVal IdDispositivoMedicion As Int16, ByVal IdTurno As Int64, ByVal IdTanque As Int16, ByVal idEstacion As Int16)
        Try
            ODatos.InsertaAlarmaMedicion(IdTipoAlarma, IdDispositivoMedicion, IdTurno, IdTanque, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertaAlarmaMedicion", "IdEstacion: " & idEstacion & "IdTanque: " & IdTanque.ToString() & " IdDispositivoMedicion: " & IdDispositivoMedicion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertaAlarmaMedicion", "IdEstacion: " & idEstacion & "IdTanque: " & IdTanque.ToString() & " IdDispositivoMedicion: " & IdDispositivoMedicion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertaVariableMedicion(ByVal IdTipoVariable As Int16, ByVal IdDispositivoMedicion As Int16, ByVal IdTurno As Int64, ByVal idTanque As Int16, ByVal Valor As Decimal)
        Try
            ODatos.InsertaVariableMedicion(IdTipoVariable, IdDispositivoMedicion, IdTurno, idTanque, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertaVariableMedicion", "IdTanque: " & idTanque.ToString() & " IdDispositivoMedicion: " & IdDispositivoMedicion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertaVariableMedicion", "IdTanque: " & idTanque.ToString() & " IdDispositivoMedicion: " & IdDispositivoMedicion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertaVariableMedicion(ByVal IdTipoVariable As Int16, ByVal IdDispositivoMedicion As Int16, ByVal IdTurno As Int64, ByVal idTanque As Int16, ByVal Valor As Decimal, ByVal idEstacion As Int16)
        Try
            ODatos.InsertaVariableMedicion(IdTipoVariable, IdDispositivoMedicion, IdTurno, idTanque, Valor, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertaVariableMedicion", "IdEstacion: " & idEstacion & "IdTanque: " & idTanque.ToString() & " IdDispositivoMedicion: " & IdDispositivoMedicion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertaVariableMedicion", "IdEstacion: " & idEstacion & "IdTanque: " & idTanque.ToString() & " IdDispositivoMedicion: " & IdDispositivoMedicion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarAlarmaMedicion(ByVal IdTipoAlarma As Int16, ByVal CodTanque As String)
        Try
            ODatos.InsertarAlarmaMedicion(IdTipoAlarma, CodTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAlarmaMedicion", "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAlarmaMedicion", "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarAlarmaMedicion(ByVal IdTipoAlarma As Int16, ByVal CodTanque As String, ByVal idestacion As Int16)
        Try
            ODatos.InsertarAlarmaMedicion(IdTipoAlarma, CodTanque, idestacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAlarmaMedicion", "IdEstacion: " & idestacion & "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAlarmaMedicion", "IdEstacion: " & idestacion & "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVariableMedicion(ByVal IdTipoVariable As Int16, ByVal Valor As Decimal, ByVal CodTanque As String)
        Try
            ODatos.InsertarVariableMedicion(IdTipoVariable, Valor, CodTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVariableMedicion", "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVariableMedicion", "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarVariableMedicion(ByVal IdTipoVariable As Int16, ByVal Valor As Decimal, ByVal CodTanque As String, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarVariableMedicion(IdTipoVariable, Valor, CodTanque, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVariableMedicion", "IdEstacion: " & idEstacion & "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVariableMedicion", "IdEstacion: " & idEstacion & "CodTanque: " & CodTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region
#Region "Motivos Calibracion"
    Public Function RecuperarMotivosCalibracion() As IDataReader
        Try
            Return ODatos.RecuperarMotivosCalibracion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMotivosCalibracion", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMotivosCalibracion", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Turnos"
    Public Function ValidarTurnoAbierto(ByVal empleado As String) As Boolean
        Try
            Return ODatos.ValidarTurnoAbierto(empleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTurnoAbierto", "empleado: " & empleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTurnoAbierto", "empleado: " & empleado, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalPorTipoFormaPago(ByVal idTipoFormaPago As Int16) As Decimal
        Try
            Return ODatos.RecuperarTotalPorTipoFormaPago(idTipoFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalPorTipoFormaPago", "idTipoFormaPago: " & idTipoFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalPorTipoFormaPago", "idTipoFormaPago: " & idTipoFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Empleados"
    Public Function EsEmpleadoAdministrador(ByVal empleado As String) As Boolean
        Try
            Return ODatos.EsEmpleadoAdministrador(empleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsEmpleadoAdministrador", "empleado: " & empleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsEmpleadoAdministrador", "empleado: " & empleado, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Ajustes Por Baja    "

    Public Function InsertarPorAjusteBajaCombustible(ByVal Producto As Int32, ByVal Tanque As String, ByVal Cantidad As Decimal, ByVal Fecha As DateTime) As String
        Try
            Return ODatos.InsertarPorAjusteBajaCombustible(Producto, Tanque, Cantidad, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPorAjusteBajaCombustible", "Producto: " & Producto.ToString & " Tanque: " & Tanque.ToString & " Cantidad: " & Cantidad.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPorAjusteBajaCombustible", "Producto: " & Producto.ToString & " Tanque: " & Tanque.ToString & " Cantidad: " & Cantidad.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarPorAjusteBajaCanastilla(ByVal codigoProducto As Int32, ByVal Cantidad As Int32, ByVal Fecha As DateTime) As String
        Try
            Return ODatos.InsertarPorAjusteBajaCanastilla(codigoProducto, Cantidad, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPorAjusteBajaCanastilla", "Producto: " & codigoProducto.ToString & " Cantidad: " & Cantidad.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPorAjusteBajaCanastilla", "Producto: " & codigoProducto.ToString & " Cantidad: " & Cantidad.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Calibraciones"
    Public Function InsertarCalibracion(ByVal idCara As Int16, ByVal idManguera As Int16, ByVal idMotivo As Int32, ByVal valor As Decimal, ByVal cantidad As Decimal, ByVal idProducto As Int32, ByVal lecturaFinal As Decimal, ByVal precio As Decimal) As Int32
        Try
            Return ODatos.InsertarCalibracion(idCara, idManguera, idMotivo, valor, cantidad, idProducto, lecturaFinal, precio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCalibracion", "cara: " & idCara & " , lecturaFinal: " & lecturaFinal & ", cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & idProducto & " , Precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCalibracion", "cara: " & idCara & " , lecturaFinal: " & lecturaFinal & ", cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & idProducto & " , Precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarCalibracion(ByVal idCara As Int16, ByVal idManguera As Int16, ByVal idMotivo As Int32, ByVal valor As Decimal, ByVal cantidad As Decimal, ByVal idProducto As Int32, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal idEmpleadoAdministrador As String) As Int32
        Try
            Return ODatos.InsertarCalibracion(idCara, idManguera, idMotivo, valor, cantidad, idProducto, lecturaFinal, precio, idEmpleadoAdministrador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCalibracion", "cara: " & idCara & " , lecturaFinal: " & lecturaFinal & ", cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & idProducto & " , Precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCalibracion", "cara: " & idCara & " , lecturaFinal: " & lecturaFinal & ", cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & idProducto & " , Precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function InsertarCalibracion(ByVal idCara As Int16, ByVal idManguera As Int16, ByVal idMotivo As Int32, ByVal valor As Decimal, ByVal cantidad As Decimal, ByVal idProducto As Int32, ByVal lecturaFinal As Decimal, ByVal precio As Decimal, ByVal IdEstacion As Integer) As Int32
        Try
            Return ODatos.InsertarCalibracion(idCara, idManguera, idMotivo, valor, cantidad, idProducto, lecturaFinal, precio, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCalibracion", "cara: " & idCara & " , lecturaFinal: " & lecturaFinal & ", cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & idProducto & " , Precio: " & precio & " , IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCalibracion", "cara: " & idCara & " , lecturaFinal: " & lecturaFinal & ", cantidad: " & cantidad & " , Valor: " & valor & " , Producto: " & idProducto & " , Precio: " & precio & " , IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCalibracion(ByVal idCalibracion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarCalibracion(idCalibracion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCalibracion", "IdCalibracion:" & idCalibracion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCalibracion", "IdCalibracion:" & idCalibracion, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarCalibracion(ByVal idCalibracion As Int32, ByVal IdEstacion As Integer) As IDataReader
        Try
            Return ODatos.RecuperarCalibracion(idCalibracion, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCalibracion", "IdCalibracion:" & idCalibracion & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCalibracion", "IdCalibracion:" & idCalibracion & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarCalibracionesPorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarCalibracionesPorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCalibracionesPorTurno", "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCalibracionesPorTurno", "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCalibracionesPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarCalibracionesPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCalibracionesPorTurno", "IdEstacion: " & idEstacion & "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCalibracionesPorTurno", "IdEstacion: " & idEstacion & "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarDatosCalibracion(ByVal Manguera As Int32) As IDataReader
        Try
            Return ODatos.ValidarDatosCalibracion(Manguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarDatosCalibracion", "Manguera = " & Manguera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarDatosCalibracion", "Manguera = " & Manguera, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarCredencialesCalibracion(ByVal empleado As String, ByVal clave As String) As Boolean
        Try
            Return ODatos.ValidarCredencialesCalibracion(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesCalibracion", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesCalibracion", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteTurnoAbiertoEnManguera(ByVal idManguera As Int16) As Boolean
        Try
            Return ODatos.ExisteTurnoAbiertoEnManguera(idManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteTurnoAbiertoEnManguera", "idManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteTurnoAbiertoEnManguera", "idManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Resoluciones Canastilla"
    Public Function ExisteResolucionValida() As Boolean
        Try
            Return ODatos.ExisteResolucionValida()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteResolucionValida", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteResolucionValida", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarResolucionActivaCanastilla() As String
        Try
            Return ODatos.RecuperarResolucionActivaCanastilla()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarResolucionActivaCanastilla", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarResolucionActivaCanastilla", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarMovimientoDetalle(ByVal IdMovimiento As Integer, ByVal IdProducto As Integer, ByVal Cantidad As Integer)
        Try
            ODatos.InsertarMovimientoDetalle(IdMovimiento, IdProducto, Cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMovimientoDetalle", "IdMovimiento: " & IdMovimiento & ", IdProducto: " & IdProducto & ", Cantidad: " & Cantidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMovimientoDetalle", "IdMovimiento: " & IdMovimiento & ", IdProducto: " & IdProducto & ", Cantidad: " & Cantidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Consumos Internos"
    Public Function ValidarCredencialesConsumoInterno(ByVal empleado As String, ByVal clave As String) As Boolean
        Try
            Return ODatos.ValidarCredencialesConsumoInterno(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesConsumoInterno", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesConsumoInterno", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   ManagmentKardex     "

    Public Function RecuperarManguerasActualizarProducto(ByVal Manguera As Short, Optional ByVal IdEstacion As Int16 = 0) As DataTable
        Try
            If IdEstacion = 0 Then
                Return ODatos.RecuperarManguerasActualizarProducto(Manguera)
            Else
                Return ODatos.RecuperarManguerasActualizarProducto(Manguera, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarManguerasActualizarProducto", "manguera: " & Manguera.ToString(), "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarManguerasActualizarProducto", "manguera: " & Manguera.ToString() & " idestacion: " & IdEstacion, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "RecuperarManguerasActualizarProducto", "manguera: " & Manguera.ToString(), "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "RecuperarManguerasActualizarProducto", "manguera: " & Manguera.ToString() & " idestacion: " & IdEstacion, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function RecuperarManguerasCambioPrecioReciboCombustible(ByVal Documento As String) As IDataReader
        Try
            Return ODatos.RecuperarManguerasCambioPrecioReciboCombustible(Documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasCambioPrecioReciboCombustible", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasCambioPrecioReciboCombustible", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarManguerasCambioPrecioReciboCombustible(ByVal Documento As String, ByVal IdEstacion As Short) As IDataReader
        Try
            Return ODatos.RecuperarManguerasCambioPrecioReciboCombustible(Documento, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasCambioPrecioReciboCombustible", "Documento: " & Documento & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasCambioPrecioReciboCombustible", "Documento: " & Documento & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarTransferenciadeCombustibles(ByVal Tanque As String, ByVal Cantidad As Decimal, ByVal EstacionReceptora As String)
        Try
            ODatos.InsertarTransferenciadeCombustibles(Tanque, Cantidad, EstacionReceptora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTransferenciadeCombustibles", "tanque: " & Tanque.ToString() & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTransferenciadeCombustibles", "tanque: " & Tanque.ToString() & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarTransferenciadeCombustibles(ByVal Tanque As String, ByVal Cantidad As Decimal, ByVal EstacionReceptora As String, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarTransferenciadeCombustibles(Tanque, Cantidad, EstacionReceptora, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTransferenciadeCombustibles", "IdEstacion: " & idEstacion & "tanque: " & Tanque.ToString() & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTransferenciadeCombustibles", "IdEstacion: " & idEstacion & "tanque: " & Tanque.ToString() & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarSaldoTanque(ByVal CodigoTanque As String, ByVal IdProducto As Int16) As Decimal
        Try
            Return ODatos.RecuperarSaldoTanque(CodigoTanque, IdProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaldoTanque", "tanque: " & CodigoTanque & " Producto: " & IdProducto.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaldoTanque", "tanque: " & CodigoTanque & " Producto: " & IdProducto.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarSaldoTanque(ByVal CodigoTanque As String, ByVal IdProducto As Int16, ByVal IdEstacion As Short) As Decimal
        Try
            Return ODatos.RecuperarSaldoTanque(CodigoTanque, IdProducto, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSaldoTanque", "tanque: " & CodigoTanque & " Producto: " & IdProducto.ToString() & " IdEstacion: " & IdEstacion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSaldoTanque", "tanque: " & CodigoTanque & " Producto: " & IdProducto.ToString() & " IdEstacion: " & IdEstacion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarRemarcacionKardex(ByVal Tanque As String, ByVal ProductoB As Int16, ByVal cantidad As Decimal, ByVal TanqueAlta As String, ByVal ProductoA As Int16)
        Try
            ODatos.InsertarRemarcacionKardex(Tanque, ProductoB, cantidad, TanqueAlta, ProductoA)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRemarcacionKardex", "tanque: " & Tanque.ToString() & " Producto Baja: " & ProductoB.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRemarcacionKardex", "tanque: " & Tanque.ToString() & " Producto Baja: " & ProductoB.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarRemarcacionKardex(ByVal Tanque As String, ByVal ProductoB As Int16, ByVal cantidad As Decimal, ByVal TanqueAlta As String, ByVal ProductoA As Int16, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarRemarcacionKardex(Tanque, ProductoB, cantidad, TanqueAlta, ProductoA, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRemarcacionKardex", "IdEstacion: " & idEstacion & "tanque: " & Tanque.ToString() & " Producto Baja: " & ProductoB.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRemarcacionKardex", "IdEstacion: " & idEstacion & "tanque: " & Tanque.ToString() & " Producto Baja: " & ProductoB.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarIdTanqueStock(ByVal Nombre As String) As IDataReader
        Try
            Return ODatos.RecuperarIdTanqueStock(Nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdTanqueStock", "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdTanqueStock", "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosTanque(ByVal tanque As String) As DataTable
        Try
            Return ODatos.RecuperarProductosTanque(tanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosTanque", "Tanque: " & tanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosTanque", "Tanque: " & tanque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosCombustible() As DataTable
        Try
            Return ODatos.RecuperarProductosCombustible()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosCombustible", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosCombustible", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosCombustiblePedido(ByVal documento As String, ByVal placa As String) As ReciboDeCombustible
        Try
            'Instanciamos la clase de ReciboDeCombustible
            Dim oRecibo As New ReciboDeCombustible
            'Obtenemos la información que nos retorna la BD
            Dim drPedido As IDataReader = ODatos.RecuperarProductosCombustiblePedido(documento)
            'Variable que nos va a definir el tamaño del nombre del producto
            Dim tamano As Integer = 0

            'Para la primera línea que nos trajo la BD
            If drPedido.Read Then

                'Obtenemos si el pedido es local o no
                oRecibo.EsPedidoLocal = CBool(drPedido.Item("EsPedidoLocal"))
                'Obtenemos si la estación maneja ley de frontera o no
                oRecibo.EsLeyFrontera = CBool(drPedido.Item("EsLeyFrontera"))

                'Creamos e Instanciamos un objeto del tipo CantidadProducto
                Dim oCantidad As CantidadProductos = New CantidadProductos

                'Adicionamos a la lista el código del producto y su respectiva cantidad
                oCantidad.CodigoProducto = CInt(drPedido.Item("Codigo"))
                oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                oCantidad.Nombre = drPedido.Item("Nombre").ToString()

                'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                tamano = 14 - CStr(oCantidad.CodigoProducto).Length

                'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                If oCantidad.Nombre.Length > tamano Then
                    'Redimensionamos el nombre
                    oCantidad.Nombre = oCantidad.Nombre.Substring(0, tamano)
                End If

                'Adicionamos los valores a la lista
                oRecibo.lstProductos.Add(oCantidad)

                'Recorremos los demás datos que nos trajeron
                While (drPedido.Read())

                    'Instanciamos un objeto del tipo CantidadProducto
                    oCantidad = New CantidadProductos

                    'Adicionamos a la lista el código del producto y su respectiva cantidad
                    oCantidad.CodigoProducto = CInt(drPedido.Item("Codigo"))
                    oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                    oCantidad.Nombre = drPedido.Item("Nombre").ToString()

                    'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                    tamano = 14 - CStr(oCantidad.CodigoProducto).Length

                    'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                    If oCantidad.Nombre.Length > tamano Then
                        'Redimensionamos el nombre
                        oCantidad.Nombre = oCantidad.Nombre.Substring(0, tamano)
                    End If

                    'Adicionamos los valores a la lista
                    oRecibo.lstProductos.Add(oCantidad)

                End While

            End If

            'Cerramos el dataReader
            drPedido.Close()

            'Guardamos la placa y el documento
            oRecibo.Documento = documento
            oRecibo.Placa = placa
            'Está comenzando el Recibo de Combustible
            oRecibo.EsDetenido = False

            'Retornamos los datos
            Return oRecibo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosCombustiblePedido", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosCombustiblePedido", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function






    Public Function RecuperarProductosCombustiblePedido(ByVal documento As String, ByVal placa As String, ByVal Tanque As String) As ReciboDeCombustible
        Try
            'Instanciamos la clase de ReciboDeCombustible
            Dim oRecibo As New ReciboDeCombustible
            'Obtenemos la información que nos retorna la BD
            Dim drPedido As IDataReader = ODatos.RecuperarProductosCombustiblePedido(documento, Tanque)
            'Variable que nos va a definir el tamaño del nombre del producto
            Dim tamano As Integer = 0

            'Para la primera línea que nos trajo la BD
            If drPedido.Read Then

                'Obtenemos si el pedido es local o no
                oRecibo.EsPedidoLocal = CBool(drPedido.Item("EsPedidoLocal"))
                'Obtenemos si la estación maneja ley de frontera o no
                oRecibo.EsLeyFrontera = CBool(drPedido.Item("EsLeyFrontera"))

                'Creamos e Instanciamos un objeto del tipo CantidadProducto
                Dim oCantidad As CantidadProductos = New CantidadProductos

                'Adicionamos a la lista el código del producto y su respectiva cantidad
                oCantidad.CodigoProducto = CInt(drPedido.Item("Codigo"))
                oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                oCantidad.Nombre = drPedido.Item("Nombre").ToString()

                'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                tamano = 14 - CStr(oCantidad.CodigoProducto).Length

                'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                If oCantidad.Nombre.Length > tamano Then
                    'Redimensionamos el nombre
                    oCantidad.Nombre = oCantidad.Nombre.Substring(0, tamano)
                End If

                'Adicionamos los valores a la lista
                oRecibo.lstProductos.Add(oCantidad)

                'Recorremos los demás datos que nos trajeron
                While (drPedido.Read())

                    'Instanciamos un objeto del tipo CantidadProducto
                    oCantidad = New CantidadProductos

                    'Adicionamos a la lista el código del producto y su respectiva cantidad
                    oCantidad.CodigoProducto = CInt(drPedido.Item("Codigo"))
                    oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                    oCantidad.Nombre = drPedido.Item("Nombre").ToString()

                    'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                    tamano = 14 - CStr(oCantidad.CodigoProducto).Length

                    'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                    If oCantidad.Nombre.Length > tamano Then
                        'Redimensionamos el nombre
                        oCantidad.Nombre = oCantidad.Nombre.Substring(0, tamano)
                    End If

                    'Adicionamos los valores a la lista
                    oRecibo.lstProductos.Add(oCantidad)

                End While

            End If

            'Cerramos el dataReader
            drPedido.Close()

            'Guardamos la placa y el documento
            oRecibo.Documento = documento
            oRecibo.Placa = placa
            'Está comenzando el Recibo de Combustible
            oRecibo.EsDetenido = False

            'Retornamos los datos
            Return oRecibo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosCombustiblePedido", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosCombustiblePedido", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperaProductosPorCodigoTanque(ByVal documento As String, ByVal placa As String, ByVal Tanque As String) As ReciboDeCombustible
        Try
            'Instanciamos la clase de ReciboDeCombustible
            Dim oRecibo As New ReciboDeCombustible
            'Obtenemos la información que nos retorna la BD
            Dim drPedido As IDataReader = ODatos.RecuperaProductosPorCodigoTanque(Tanque, documento)
            'Variable que nos va a definir el tamaño del nombre del producto
            Dim tamano As Integer = 0

            'Para la primera línea que nos trajo la BD
            If drPedido.Read Then

                'Obtenemos si el pedido es local o no
                oRecibo.EsPedidoLocal = CBool(drPedido.Item("EsPedidoLocal"))
                'Obtenemos si la estación maneja ley de frontera o no
                oRecibo.EsLeyFrontera = CBool(drPedido.Item("EsLeyFrontera"))

                'Creamos e Instanciamos un objeto del tipo CantidadProducto
                Dim oCantidad As CantidadProductos = New CantidadProductos

                'Adicionamos a la lista el código del producto y su respectiva cantidad
                oCantidad.CodigoProducto = CInt(drPedido.Item("Codigo"))
                oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                oCantidad.Nombre = drPedido.Item("Nombre").ToString()

                'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                tamano = 14 - CStr(oCantidad.CodigoProducto).Length

                'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                If oCantidad.Nombre.Length > tamano Then
                    'Redimensionamos el nombre
                    oCantidad.Nombre = oCantidad.Nombre.Substring(0, tamano)
                End If

                'Adicionamos los valores a la lista
                oRecibo.lstProductos.Add(oCantidad)

                'Recorremos los demás datos que nos trajeron
                While (drPedido.Read())

                    'Instanciamos un objeto del tipo CantidadProducto
                    oCantidad = New CantidadProductos

                    'Adicionamos a la lista el código del producto y su respectiva cantidad
                    oCantidad.CodigoProducto = CInt(drPedido.Item("Codigo"))
                    oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                    oCantidad.Nombre = drPedido.Item("Nombre").ToString()

                    'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                    tamano = 14 - CStr(oCantidad.CodigoProducto).Length

                    'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                    If oCantidad.Nombre.Length > tamano Then
                        'Redimensionamos el nombre
                        oCantidad.Nombre = oCantidad.Nombre.Substring(0, tamano)
                    End If

                    'Adicionamos los valores a la lista
                    oRecibo.lstProductos.Add(oCantidad)

                End While

            End If

            'Cerramos el dataReader
            drPedido.Close()

            'Guardamos la placa y el documento
            oRecibo.Documento = documento
            oRecibo.Placa = placa
            'Está comenzando el Recibo de Combustible
            oRecibo.EsDetenido = False

            'Retornamos los datos
            Return oRecibo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosCombustiblePedido", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosCombustiblePedido", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarProductosCombustiblePedidoChile(ByVal documento As String, ByVal placa As String) As ReciboDeCombustible
        Try
            'Instanciamos la clase de ReciboDeCombustible
            Dim oRecibo As New ReciboDeCombustible
            'Obtenemos la información que nos retorna la BD
            Dim drPedido As IDataReader = ODatos.RecuperarProductosCombustiblePedidoChile(documento)
            'Variable que nos va a definir el tamaño del nombre del producto
            Dim tamano As Integer = 0
            Dim drTipoPedido As IDataReader = ODatos.RecuperarDatosTipoPedidoCombustible(documento)

            'Para la primera línea que nos trajo la BD
            If drPedido.Read Then

                'Obtenemos si el pedido es local o no
                oRecibo.EsPedidoLocal = CBool(drPedido.Item("EsPedidoLocal"))
                'Obtenemos si la estación maneja ley de frontera o no
                oRecibo.EsLeyFrontera = CBool(drPedido.Item("EsLeyFrontera"))

                'Creamos e Instanciamos un objeto del tipo CantidadProducto
                Dim oCantidad As CantidadProductos = New CantidadProductos

                'Adicionamos a la lista el código del producto y su respectiva cantidad
                oCantidad.CodigoProducto = CInt(drPedido.Item("Codigo"))
                oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                oCantidad.Nombre = drPedido.Item("Nombre").ToString()

                'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                tamano = 14 - CStr(oCantidad.CodigoProducto).Length

                'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                If oCantidad.Nombre.Length > tamano Then
                    'Redimensionamos el nombre
                    oCantidad.Nombre = oCantidad.Nombre.Substring(0, tamano)
                End If

                'Adicionamos los valores a la lista
                oRecibo.lstProductos.Add(oCantidad)

                'Recorremos los demás datos que nos trajeron
                While (drPedido.Read())

                    'Instanciamos un objeto del tipo CantidadProducto
                    oCantidad = New CantidadProductos

                    'Adicionamos a la lista el código del producto y su respectiva cantidad
                    oCantidad.CodigoProducto = CInt(drPedido.Item("Codigo"))
                    oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                    oCantidad.Nombre = drPedido.Item("Nombre").ToString()

                    'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                    tamano = 14 - CStr(oCantidad.CodigoProducto).Length

                    'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                    If oCantidad.Nombre.Length > tamano Then
                        'Redimensionamos el nombre
                        oCantidad.Nombre = oCantidad.Nombre.Substring(0, tamano)
                    End If

                    'Adicionamos los valores a la lista
                    oRecibo.lstProductos.Add(oCantidad)

                End While

            End If

            'Cerramos el dataReader
            drPedido.Close()



            If drTipoPedido.Read() Then
                oRecibo.Ruc = drTipoPedido.Item("Ruc").ToString()
                oRecibo.TipoCombustible = CInt(drTipoPedido.Item("IdTipoCombustible").ToString())
                oRecibo.GuiaDespacho = drTipoPedido.Item("DocumentoPago").ToString()
            Else
                oRecibo.Ruc = "0"
                oRecibo.TipoCombustible = -1
                oRecibo.GuiaDespacho = "0"
            End If

            drTipoPedido.Close()

            'Guardamos la placa y el documento
            oRecibo.Documento = documento
            oRecibo.Placa = placa
            'Está comenzando el Recibo de Combustible
            oRecibo.EsDetenido = False

            'Retornamos los datos
            Return oRecibo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosCombustiblePedido", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosCombustiblePedido", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarReciboCombustibleTmp(ByVal oReciboCombustible As ReciboDeCombustible, ByVal estado As Integer)
        Try
            'Variable que nos definirá si es ley de frontera (inicialmente)
            Dim EsLeyFrontera As Nullable(Of Boolean)

            'Recorremos el objeto para enviar la info a la BD
            For i As Integer = 0 To oReciboCombustible.lstConfiguracionRecibo.Count - 1
                With oReciboCombustible
                    ODatos.InsertarReciboCombustibleTmp(.Documento, .lstConfiguracionRecibo.Item(i).CodProducto, .lstConfiguracionRecibo.Item(i).Tanque, EsLeyFrontera, .lstConfiguracionRecibo.Item(i).Cantidad, estado, .Placa)
                End With
            Next
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarReciboCombustibleTmp", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarReciboCombustibleTmp", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarReciboCombustibleTmp(ByVal oReciboCombustible As ReciboDeCombustible, ByVal estado As Integer)
        Try
            'Variable que nos definirá si es ley de frontera (inicialmente)
            Dim EsLeyFrontera As Nullable(Of Boolean)

            'Recorremos el objeto para enviar la info a la BD
            For i As Integer = 0 To oReciboCombustible.lstConfiguracionRecibo.Count - 1
                With oReciboCombustible
                    ODatos.ActualizarReciboCombustibleTmp(.Documento, EsLeyFrontera, estado)
                End With
            Next
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarReciboCombustibleTmp", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarReciboCombustibleTmp", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ExisteDocumentoReciboTmp(ByVal documento As String) As Boolean
        Try
            Return ODatos.ExisteDocumentoReciboTmp(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteDocumentoReciboTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteDocumentoReciboTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function ExisteHojaRutaDocumentoReciboTmp(ByVal documento As String) As Boolean
        Try
            Return ODatos.ExisteDocumentoReciboTmp(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteHojaRutaDocumentoReciboTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteHojaRutaDocumentoReciboTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarReciboCombustibleTmpColombia(ByVal documento As String) As ReciboDeCombustible
        Try
            'Instanciamos la clase de ReciboDeCombustible
            Dim oRecibo As New ReciboDeCombustible
            'Obtenemos la información que nos retorna la BD
            Dim drPedido As IDataReader = ODatos.RecuperarReciboCombustibleTmp(documento)
            'Variable que nos va a definir el tamaño del nombre del producto
            Dim tamano As Integer = 0

            'Para la primera línea que nos trajo la BD
            If drPedido.Read Then

                'Creamos e Instanciamos un objeto del tipo CantidadProducto
                Dim oCantidad As ConfiguracionReciboCombustible = New ConfiguracionReciboCombustible

                'Adicionamos a la lista el código del producto y su respectiva cantidad
                oCantidad.CodProducto = CInt(drPedido.Item("CodProducto"))
                oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                oCantidad.NombreProducto = drPedido.Item("Nombre").ToString()
                oCantidad.Tanque = drPedido.Item("CodTanque").ToString()
                'Guardamos la placa
                oRecibo.Placa = drPedido.Item("Placa").ToString()
                oRecibo.Estado = CInt(drPedido.Item("Estado"))


                'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                tamano = 14 - CStr(oCantidad.CodProducto).Length

                'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                If oCantidad.NombreProducto.Length > tamano Then
                    'Redimensionamos el nombre
                    oCantidad.NombreProducto = oCantidad.NombreProducto.Substring(0, tamano)
                End If

                'Adicionamos los valores a la lista
                oRecibo.lstConfiguracionRecibo.Add(oCantidad)

                'Recorremos los demás datos que nos trajeron
                While (drPedido.Read())

                    'Instanciamos un objeto del tipo CantidadProducto
                    oCantidad = New ConfiguracionReciboCombustible

                    'Adicionamos a la lista el código del producto y su respectiva cantidad
                    oCantidad.CodProducto = CInt(drPedido.Item("CodProducto"))
                    oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                    oCantidad.NombreProducto = drPedido.Item("Nombre").ToString()
                    oCantidad.Tanque = drPedido.Item("CodTanque").ToString()

                    'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                    tamano = 14 - CStr(oCantidad.CodProducto).Length

                    'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                    If oCantidad.NombreProducto.Length > tamano Then
                        'Redimensionamos el nombre
                        oCantidad.NombreProducto = oCantidad.NombreProducto.Substring(0, tamano)
                    End If

                    'Adicionamos los valores a la lista
                    oRecibo.lstConfiguracionRecibo.Add(oCantidad)

                End While

            End If

            'Cerramos el dataReader
            drPedido.Close()

            'Guardamos el documento
            oRecibo.Documento = documento
            'Está comenzando el Recibo de Combustible
            oRecibo.EsDetenido = False

            'Retornamos los datos
            Return oRecibo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboCombustibleTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboCombustibleTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboCombustibleTmp(ByVal documento As String) As ReciboDeCombustible
        Try
            'Instanciamos la clase de ReciboDeCombustible
            Dim oRecibo As New ReciboDeCombustible
            'Obtenemos la información que nos retorna la BD
            Dim drPedido As IDataReader = ODatos.RecuperarReciboCombustibleTmp(documento)
            'Variable que nos va a definir el tamaño del nombre del producto
            Dim tamano As Integer = 0

            'Para la primera línea que nos trajo la BD
            If drPedido.Read Then

                'Creamos e Instanciamos un objeto del tipo CantidadProducto
                Dim oCantidad As ConfiguracionReciboCombustible = New ConfiguracionReciboCombustible

                'Adicionamos a la lista el código del producto y su respectiva cantidad
                oCantidad.CodProducto = CInt(drPedido.Item("CodProducto"))
                oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                oCantidad.NombreProducto = drPedido.Item("Nombre").ToString()
                oCantidad.Tanque = drPedido.Item("CodTanque").ToString()
                'Guardamos la placa
                oRecibo.Placa = drPedido.Item("Placa").ToString()
                oRecibo.Estado = CInt(drPedido.Item("Estado"))

                oRecibo.Nit = CStr(drPedido.Item("Nit"))
                oRecibo.HojaRuta = CStr(drPedido.Item("HojaRuta"))

                'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                tamano = 14 - CStr(oCantidad.CodProducto).Length

                'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                If oCantidad.NombreProducto.Length > tamano Then
                    'Redimensionamos el nombre
                    oCantidad.NombreProducto = oCantidad.NombreProducto.Substring(0, tamano)
                End If

                'Adicionamos los valores a la lista
                oRecibo.lstConfiguracionRecibo.Add(oCantidad)

                'Recorremos los demás datos que nos trajeron
                While (drPedido.Read())

                    'Instanciamos un objeto del tipo CantidadProducto
                    oCantidad = New ConfiguracionReciboCombustible

                    'Adicionamos a la lista el código del producto y su respectiva cantidad
                    oCantidad.CodProducto = CInt(drPedido.Item("CodProducto"))
                    oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                    oCantidad.NombreProducto = drPedido.Item("Nombre").ToString()
                    oCantidad.Tanque = drPedido.Item("CodTanque").ToString()

                    'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                    tamano = 14 - CStr(oCantidad.CodProducto).Length

                    'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                    If oCantidad.NombreProducto.Length > tamano Then
                        'Redimensionamos el nombre
                        oCantidad.NombreProducto = oCantidad.NombreProducto.Substring(0, tamano)
                    End If

                    'Adicionamos los valores a la lista
                    oRecibo.lstConfiguracionRecibo.Add(oCantidad)

                End While

            End If

            'Cerramos el dataReader
            drPedido.Close()

            'Guardamos el documento
            oRecibo.Documento = documento
            'Está comenzando el Recibo de Combustible
            oRecibo.EsDetenido = False

            'Retornamos los datos
            Return oRecibo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboCombustibleTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboCombustibleTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboCombustibleTmpChile(ByVal documento As String) As ReciboDeCombustible
        Try
            'Instanciamos la clase de ReciboDeCombustible
            Dim oRecibo As New ReciboDeCombustible
            'Obtenemos la información que nos retorna la BD
            Dim drPedido As IDataReader = ODatos.RecuperarReciboCombustibleChileTmp(documento)
            'Variable que nos va a definir el tamaño del nombre del producto
            Dim tamano As Integer = 0
            ''Recupero el tipo de combustible asociado al pedido -- storage - flota - propio
            Dim drTipoPedido As IDataReader = ODatos.RecuperarDatosTipoPedidoCombustible(documento)

            'Para la primera línea que nos trajo la BD
            If drPedido.Read Then

                'Creamos e Instanciamos un objeto del tipo CantidadProducto
                Dim oCantidad As ConfiguracionReciboCombustible = New ConfiguracionReciboCombustible

                'Adicionamos a la lista el código del producto y su respectiva cantidad
                oCantidad.CodProducto = CInt(drPedido.Item("CodProducto"))
                oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                oCantidad.NombreProducto = drPedido.Item("Nombre").ToString()
                oCantidad.Tanque = drPedido.Item("CodTanque").ToString()
                'Guardamos la placa
                oRecibo.Placa = drPedido.Item("Placa").ToString()
                oRecibo.Estado = CInt(drPedido.Item("Estado"))

                'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                tamano = 14 - CStr(oCantidad.CodProducto).Length

                'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                If oCantidad.NombreProducto.Length > tamano Then
                    'Redimensionamos el nombre
                    oCantidad.NombreProducto = oCantidad.NombreProducto.Substring(0, tamano)
                End If

                'Adicionamos los valores a la lista
                oRecibo.lstConfiguracionRecibo.Add(oCantidad)

                'Recorremos los demás datos que nos trajeron
                While (drPedido.Read())

                    'Instanciamos un objeto del tipo CantidadProducto
                    oCantidad = New ConfiguracionReciboCombustible

                    'Adicionamos a la lista el código del producto y su respectiva cantidad
                    oCantidad.CodProducto = CInt(drPedido.Item("CodProducto"))
                    oCantidad.Cantidad = CDec(drPedido.Item("Cantidad"))
                    oCantidad.NombreProducto = drPedido.Item("Nombre").ToString()
                    oCantidad.Tanque = drPedido.Item("CodTanque").ToString()

                    'Comenzamos a obtener el tamaño, 14 es por el tamaño de la MR
                    tamano = 14 - CStr(oCantidad.CodProducto).Length

                    'Evaluamos que el tamaño del nombre no sea mayor que la variable tamano
                    If oCantidad.NombreProducto.Length > tamano Then
                        'Redimensionamos el nombre
                        oCantidad.NombreProducto = oCantidad.NombreProducto.Substring(0, tamano)
                    End If

                    'Adicionamos los valores a la lista
                    oRecibo.lstConfiguracionRecibo.Add(oCantidad)

                End While

            End If

            'Cerramos el dataReader
            drPedido.Close()

            If drTipoPedido.Read() Then
                oRecibo.Ruc = drTipoPedido.Item("Ruc").ToString()
                oRecibo.TipoCombustible = CInt(drTipoPedido.Item("IdTipoCombustible").ToString())
                oRecibo.GuiaDespacho = drTipoPedido.Item("DocumentoPago").ToString()
            Else
                oRecibo.Ruc = "0"
                oRecibo.TipoCombustible = -1
                oRecibo.GuiaDespacho = "0"
            End If

            drTipoPedido.Close()

            'Guardamos el documento
            oRecibo.Documento = documento
            'Está comenzando el Recibo de Combustible
            oRecibo.EsDetenido = False

            'Retornamos los datos
            Return oRecibo
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboCombustibleTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboCombustibleTmp", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarManejaLeyFrontera() As Boolean
        Try
            Return ODatos.RecuperarManejaLeyFrontera()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManejaLeyFrontera", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManejaLeyFrontera", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarAjustePorTipoMotivo(ByVal Tanque As String, ByVal Producto As Int16, ByVal Cantidad As Decimal, ByVal TipoMotivo As Short)
        Try
            ODatos.InsertarAjustePorTipoMotivo(Tanque, Producto, Cantidad, TipoMotivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAjustePorTipoMotivo", "Tanque: " & Tanque & " Cantidad :" & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAjustePorTipoMotivo", "Tanque: " & Tanque & " Cantidad :" & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarAjustePorOperacion(ByVal Tanque As String, ByVal Cantidad As Decimal)
        Try
            ODatos.InsertarAjustePorOperacion(Tanque, Cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAjustePorOperacion", "Tanque: " & Tanque & " Cantidad :" & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAjustePorOperacion", "Tanque: " & Tanque & " Cantidad :" & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarTanqueo(ByVal Volumen As Decimal, ByVal Stock As Decimal, ByVal Placa As String, ByVal NumRemision As String, ByVal IdTanque As Integer, ByVal Costo As Decimal, ByVal IdProducto As Integer, ByVal EsLeyFrontera As Boolean)
        Try
            ODatos.InsertarTanqueo(Volumen, Stock, Placa, NumRemision, IdTanque, Costo, IdProducto, EsLeyFrontera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTanqueo", "Volumen: " & Volumen & ", Stock: " & Stock & ", Placa: " & Placa & ", NumRemision: " & NumRemision & ", IdTanque: " & IdTanque & ", Costo: " & Costo & ", IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTanqueo", "Volumen: " & Volumen & ", Stock: " & Stock & ", Placa: " & Placa & ", NumRemision: " & NumRemision & ", IdTanque: " & IdTanque & ", Costo: " & Costo & ", IdProducto: " & IdProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarTanqueo(ByVal Volumen As Decimal, ByVal Stock As Decimal, ByVal Placa As String, ByVal NumRemision As String, ByVal IdTanque As Integer, ByVal Costo As Decimal, ByVal IdProducto As Integer, ByVal EsLeyFrontera As Boolean, ByVal Ruc As String, ByVal GuiaDespacho As String, ByVal TipoCombustible As Integer)
        Try
            ODatos.InsertarTanqueo(Volumen, Stock, Placa, NumRemision, IdTanque, Costo, IdProducto, EsLeyFrontera, Ruc, GuiaDespacho, TipoCombustible)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTanqueo", "Volumen: " & Volumen & ", Stock: " & Stock & ", Placa: " & Placa & ", NumRemision: " & NumRemision & ", IdTanque: " & IdTanque & ", Costo: " & Costo & ", IdProducto: " & IdProducto & "Ruc:" & Ruc & "GuiaDespacho:" & GuiaDespacho & "TipoCombustible: " & TipoCombustible.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTanqueo", "Volumen: " & Volumen & ", Stock: " & Stock & ", Placa: " & Placa & ", NumRemision: " & NumRemision & ", IdTanque: " & IdTanque & ", Costo: " & Costo & ", IdProducto: " & IdProducto & "Ruc:" & Ruc & "GuiaDespacho:" & GuiaDespacho & "TipoCombustible: " & TipoCombustible.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarTanqueo(ByVal Volumen As Decimal, ByVal Stock As Decimal, ByVal Placa As String, ByVal NumRemision As String, ByVal IdTanque As Integer, ByVal Costo As Decimal, ByVal IdProducto As Integer, ByVal EsLeyFrontera As Boolean, ByVal Ruc As String, ByVal GuiaDespacho As String, ByVal TipoCombustible As Integer, ByVal IdEstacion As Integer)
        Try
            ODatos.InsertarTanqueo(Volumen, Stock, Placa, NumRemision, IdTanque, Costo, IdProducto, EsLeyFrontera, Ruc, GuiaDespacho, TipoCombustible)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTanqueo", "Volumen: " & Volumen & ", Stock: " & Stock & ", Placa: " & Placa & ", NumRemision: " & NumRemision & ", IdTanque: " & IdTanque & ", Costo: " & Costo & ", IdProducto: " & IdProducto & "Ruc:" & Ruc & "GuiaDespacho:" & GuiaDespacho & "TipoCombustible: " & TipoCombustible.ToString & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTanqueo", "Volumen: " & Volumen & ", Stock: " & Stock & ", Placa: " & Placa & ", NumRemision: " & NumRemision & ", IdTanque: " & IdTanque & ", Costo: " & Costo & ", IdProducto: " & IdProducto & "Ruc:" & Ruc & "GuiaDespacho:" & GuiaDespacho & "TipoCombustible: " & TipoCombustible.ToString & "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub




    Public Function RecuperarLeyFronteraPedidoCombustible(ByVal Documento As String, ByVal Codigo As Integer) As Decimal
        Try
            Return ODatos.RecuperarLeyFronteraPedidoCombustible(Documento, Codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLeyFronteraPedidoCombustible", "Documento: " & Documento & " Codigo: " & Codigo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLeyFronteraPedidoCombustible", "Documento: " & Documento & " Codigo: " & Codigo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarAforoTanque(ByVal IdTanque As Int32) As DataSet
        Try
            Return ODatos.RecuperarAforoTanque(IdTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarAforoTanque", "IdTanque: " & IdTanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarAforoTanque", "IdTanque: " & IdTanque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarAforoTanque(ByVal IdTanque As Int32, ByVal IdAforo As Nullable(Of Int32), ByVal Altura As Decimal, ByVal Cantidad As Decimal)
        Try
            ODatos.ActualizarAforoTanque(IdTanque, IdAforo, Altura, Cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarAforoTanque", "IdTanque: " & IdTanque & ", Altura: " & Altura & ", Cantidad: " & Cantidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarAforoTanque", "IdTanque: " & IdTanque & ", Altura: " & Altura & ", Cantidad: " & Cantidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarAforoTanque(ByVal IdAforo As Int32)
        Try
            ODatos.EliminarAforoTanque(IdAforo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarAforoTanque", "IdAforo: " & IdAforo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarAforoTanque", "IdAforo: " & IdAforo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub EliminarVentasPorFechaPlaca(FechaInicial As DateTime, FechaFinal As DateTime, Placa As String)
        Try
            ODatos.EliminarVentasPorFechaPlaca(FechaInicial, FechaFinal, Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarVentasPorFechaPlaca", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarVentasPorFechaPlaca", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub InsertarUnidadMedida(ByVal nombre As String, Optional ByVal CodigoMenoCash As String = Nothing)
        Try
            ODatos.InsertarUnidadMedida(nombre, CodigoMenoCash)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarUnidadMedida", "nombre: " & nombre & "CodigoMenoCash: " & CodigoMenoCash, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarUnidadMedida", "nombre: " & nombre & "CodigoMenoCash: " & CodigoMenoCash, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarUnidadMedida(ByVal nombre As String, ByVal IdUnidad As Int32)
        Try
            ODatos.ActualizarUnidadMedida(nombre, IdUnidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarUnidadMedida", "nombre: " & nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarUnidadMedida", "nombre: " & nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarUnidadMedida(ByVal IdUnidad As Int32)
        Try
            ODatos.EliminarUnidadMedida(IdUnidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarUnidadMedida", "IdUnidad: " & IdUnidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarUnidadMedida", "IdUnidad: " & IdUnidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarEncabezadoCredito(ByVal IdCredito As Int64, ByVal IdCliente As Int64, ByVal Cupo As Decimal, ByVal IdTipo As Integer, ByVal Estado As Boolean, ByVal TipoFacturacion As String, ByVal ManejaCupoPorVehiculo As Boolean, ByVal PermitirUsoEnCanastilla As Boolean, ByVal EsActivoBloqueo As Boolean, ByVal FechaInicialBloqueo As DateTime, ByVal FechaFinalBloqueo As Nullable(Of DateTime), ByVal PlazoPagoFactura As Int32, AplicaRenovacion As Boolean, PeriodoRenovacion As Integer) As Boolean
        Try
            Return ODatos.InsertarEncabezadoCredito(IdCredito, IdCliente, Cupo, IdTipo, Estado, TipoFacturacion, ManejaCupoPorVehiculo, PermitirUsoEnCanastilla, EsActivoBloqueo, FechaInicialBloqueo, FechaFinalBloqueo, PlazoPagoFactura, AplicaRenovacion, PeriodoRenovacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarEncabezadoCredito", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarEncabezadoCredito", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCantidadporAforo(ByVal Tanque As String, ByVal alturaMax As Decimal, ByVal alturaAgua As Decimal) As Decimal
        Try
            Return ODatos.RecuperarCantidadporAforo(Tanque, alturaMax, alturaAgua)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCantidadporAforo", "tanque: " & Tanque & " AlturaMaxima: " & alturaMax & ", AlturaAgua: " & alturaAgua, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCantidadporAforo", "tanque: " & Tanque & " AlturaMaxima: " & alturaMax & ", AlturaAgua: " & alturaAgua, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ValidarAforoTanque(ByVal Tanque As String, ByVal Altura As Decimal)
        Try
            ODatos.ValidarAforoTanque(Tanque, Altura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarAforoTanque", "Tanque: " & Tanque & " Altura: " & Altura.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarAforoTanque", "Tanque: " & Tanque & " Altura: " & Altura.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarCombinacionManguera(ByVal IdManguera As Int16)
        Try
            ODatos.ActualizarCombinacionManguera(IdManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCombinacionManguera", "IdManguera: " & IdManguera.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCombinacionManguera", "IdManguera: " & IdManguera.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarCombinacionManguera(ByVal IdManguera As Int16, ByVal idEstacion As Int16)
        Try
            ODatos.ActualizarCombinacionManguera(IdManguera, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarCombinacionManguera", "IdEstacion: " & idEstacion & "IdManguera: " & IdManguera.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarCombinacionManguera", "IdEstacion: " & idEstacion & "IdManguera: " & IdManguera.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Movimientos de Combustible"
    Public Function ValidarCredencialesTraslado(ByVal empleado As String, ByVal clave As String) As Boolean
        Try
            Return ODatos.ValidarCredencialesTraslado(empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesTraslado", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesTraslado", "empleado: " & empleado & " , Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarCambioTanqueBypass(ByVal tanque As String) As Boolean
        Try
            Return ODatos.ValidarCambioTanqueBypass(tanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCambioTanqueBypass", "tanque: " & tanque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCambioTanqueBypass", "tanque: " & tanque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RealizarCambioTanqueBypass(ByVal codTanque As String, ByVal cedula As String) As String
        Try
            Return ODatos.RealizarCambioTanqueBypass(codTanque, cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RealizarCambioTanqueBypass", "CodTanque: " & codTanque & " , Cedula: " & cedula, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RealizarCambioTanqueBypass", "CodTanque: " & codTanque & " , Cedula: " & cedula, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarPedidoCombustibleTmp(ByVal Documento As String, ByVal codProducto As Integer, ByVal cantidad As Decimal, ByVal esLeyFrontera As Boolean)

        Try
            ODatos.InsertarPedidoCombustibleTmp(Documento, codProducto, cantidad, esLeyFrontera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPedidoCombustibleTmp", "Documento: " + Documento + ", CodProducto: " + CStr(codProducto) + ", Cantidad: " + CStr(cantidad), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPedidoCombustibleTmp", "Documento: " + Documento + ", CodProducto: " + CStr(codProducto) + ", Cantidad: " + CStr(cantidad), "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub InsertarPedidoCombustibleTmp(ByVal Documento As String, ByVal codProducto As Integer, ByVal cantidad As Decimal, ByVal esLeyFrontera As Boolean, ByVal Hoja As String, ByVal Nit As String, ByVal NroAutorizacion As String)

        Try
            ODatos.InsertarPedidoCombustibleTmp(Documento, codProducto, cantidad, esLeyFrontera, Hoja, Nit, NroAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPedidoCombustibleTmp", "Documento: " + Documento + ", CodProducto: " + CStr(codProducto) + ", Cantidad: " + CStr(cantidad), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPedidoCombustibleTmp", "Documento: " + Documento + ", CodProducto: " + CStr(codProducto) + ", Cantidad: " + CStr(cantidad), "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarPedidoCombustible(ByVal documento As String)

        Try
            ODatos.InsertarPedidoCombustible(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPedidoCombustible", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPedidoCombustible", "Documento: " + documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub InsertarPedidoCombustible(ByVal documento As String, ByVal Nit As String, ByVal Hoja As String, ByVal NroAutorizacion As String)
        Try
            ODatos.InsertarPedidoCombustible(documento, Nit, Hoja, NroAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPedidoCombustible", "Documento: " & documento & "Nit: " & Nit & "Hoja: " & Hoja, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPedidoCombustible", "Documento: " & documento & "Nit: " & Nit & "Hoja: " & Hoja, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarPedidoCombustible(ByVal documento As String, ByVal Rut As String, ByVal Guia As String, ByVal IdTipoCombustible As Integer)

        Try
            ODatos.InsertarPedidoCombustible(documento, Rut, Guia, IdTipoCombustible)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPedidoCombustible", "Documento: " & documento & "Rut: " & Rut & "Guia: " & Guia & "IdTipoCombustible: " & IdTipoCombustible.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPedidoCombustible", "Documento: " & documento & "Rut: " & Rut & "Guia: " & Guia & "IdTipoCombustible: " & IdTipoCombustible.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function RecuperarMovimientosCombustiblePorTurno(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarMovimientosCombustiblePorTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMovimientosCombustiblePorTurno", "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMovimientosCombustiblePorTurno", "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarMovimientosCombustiblePorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarMovimientosCombustiblePorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMovimientosCombustiblePorTurno", "IdEstacion: " & idEstacion & "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMovimientosCombustiblePorTurno", "IdEstacion: " & idEstacion & "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarManguerasDescolgadasPorTanque(ByVal tanques As String) As IDataReader
        Try
            Return ODatos.RecuperarManguerasDescolgadasPorTanque(tanques)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasDescolgadasPorTanque", "Tanques:" & tanques, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasDescolgadasPorTanque", "Tanques:" & tanques, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ModificarEstadoManguerasPorTanque(ByVal codTanque As String, ByVal esActivado As Boolean)
        Try
            ODatos.ModificarEstadoManguerasPorTanque(codTanque, esActivado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarEstadoManguerasPorTanque", "CodTanque: " & codTanque & " , EsActivado: " & esActivado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarEstadoManguerasPorTanque", "CodTanque: " & codTanque & " , EsActivado: " & esActivado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ModificarEstadoManguerasPorTanque(ByVal codTanque As String, ByVal esActivado As Boolean, ByVal idEstacion As Int16)
        Try
            ODatos.ModificarEstadoManguerasPorTanque(codTanque, esActivado, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarEstadoManguerasPorTanque", "IdEstacion: " & idEstacion & "CodTanque: " & codTanque & " , EsActivado: " & esActivado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarEstadoManguerasPorTanque", "IdEstacion: " & idEstacion & "CodTanque: " & codTanque & " , EsActivado: " & esActivado, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ValidarProductoEnTanque(ByVal CodTanque As String, ByVal Cantidad As Decimal, ByVal CodProducto As Integer) As IDataReader
        Try
            Return ODatos.ValidarProductoEnTanque(CodTanque, Cantidad, CodProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarProductoEnTanque", "CodTanque: " & CodTanque & " , Cantidad: " & Cantidad & ", Producto: " & CodProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarProductoEnTanque", "CodTanque: " & CodTanque & " , Cantidad: " & Cantidad & ", Producto: " & CodProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function ValidarProductoEnTanqueAjustes(ByVal CodTanque As String, ByVal Cantidad As Decimal, ByVal CodProducto As Integer, ByVal TipoOperacion As Integer) As IDataReader
        Try
            Return ODatos.ValidarProductoEnTanqueAjustes(CodTanque, Cantidad, CodProducto, TipoOperacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarProductoEnTanqueAjustes", "CodTanque: " & CodTanque & " , Cantidad: " & Cantidad & ", Producto: " & CodProducto & ", TipoOperacion: " & TipoOperacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarProductoEnTanqueAjustes", "CodTanque: " & CodTanque & " , Cantidad: " & Cantidad & ", Producto: " & CodProducto & ", TipoOperacion: " & TipoOperacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarProductoEnTanqueRemarcacionPeru(ByVal CodTanque As String, ByVal Cantidad As Decimal, ByVal CodProducto As Integer, ByVal EsPorBaja As Boolean) As IDataReader
        Try
            Return ODatos.ValidarProductoEnTanqueRemarcacionPeru(CodTanque, Cantidad, CodProducto, EsPorBaja)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarProductoEnTanqueRemarcacionPeru", "CodTanque: " & CodTanque & " , Cantidad: " & Cantidad & ", Producto: " & CodProducto & "EsPorBaja: " & EsPorBaja.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarProductoEnTanqueRemarcacionPeru", "CodTanque: " & CodTanque & " , Cantidad: " & Cantidad & ", Producto: " & CodProducto & "EsPorBaja: " & EsPorBaja.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarProductoEnTanqueRemarcacion(ByVal CodTanque As String, ByVal Cantidad As Decimal, ByVal CodProducto As Integer, ByVal EsPorBaja As Boolean) As IDataReader
        Try
            Return ODatos.ValidarProductoEnTanqueRemarcacion(CodTanque, Cantidad, CodProducto, EsPorBaja)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarProductoEnTanqueRemarcacion", "CodTanque: " & CodTanque & " , Cantidad: " & Cantidad & ", Producto: " & CodProducto & "EsPorBaja: " & EsPorBaja.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarProductoEnTanqueRemarcacion", "CodTanque: " & CodTanque & " , Cantidad: " & Cantidad & ", Producto: " & CodProducto & "EsPorBaja: " & EsPorBaja.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarTanquesSinDispositivoMedicion(ByVal Tanques As String) As IDataReader
        Try
            Return ODatos.RecuperarTanquesSinDispositivoMedicion(Tanques)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTanquesSinDispositivoMedicion", "Tanques:" & Tanques, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTanquesSinDispositivoMedicion", "Tanques:" & Tanques, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarRemarcacionCanastilla(ByVal Codigo As Integer, ByVal Cantidad As Integer) As String
        Try
            Return ODatos.ValidarRemarcacionCanastilla(Codigo, Cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarRemarcacionCanastilla", "Codigo: " & Codigo & ", Cantidad : " & Cantidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarRemarcacionCanastilla", "Codigo: " & Codigo & ", Cantidad : " & Cantidad, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RemarcacionCanastilla(ByVal CodBaja As Integer, ByVal Cantidad As Double, ByVal CodAlta As Integer) As Boolean
        Try
            Return ODatos.RemarcacionCanastilla(CodBaja, Cantidad, CodAlta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RemarcacionCanastilla", "CodigoBaja: " & CodBaja & ", Cantidad : " & Cantidad & ", CodigoAlta: " & CodAlta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RemarcacionCanastilla", "CodigoBaja: " & CodBaja & ", Cantidad : " & Cantidad & ", CodigoAlta: " & CodAlta, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RemarcacionCanastilla(ByVal CodBaja As Integer, ByVal Cantidad As Double, ByVal CodAlta As Integer, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.RemarcacionCanastilla(CodBaja, Cantidad, CodAlta, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RemarcacionCanastilla", "IdEstacion: " & idEstacion & "CodigoBaja: " & CodBaja & ", Cantidad : " & Cantidad & ", CodigoAlta: " & CodAlta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RemarcacionCanastilla", "IdEstacion: " & idEstacion & "CodigoBaja: " & CodBaja & ", Cantidad : " & Cantidad & ", CodigoAlta: " & CodAlta, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

    Public Function EsVentaPrepago(ByVal Recibo As Int64) As Boolean
        Try
            Return ODatos.EsVentaPrepago(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsVentaPrepago", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsVentaPrepago", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#Region "Productos Combustible"
    Public Function ESInformacionCombustible(ByVal tipoInformacion As Int16, ByVal valor As String) As Boolean
        Try
            Return ODatos.ESInformacionCombustible(tipoInformacion, valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESInformacionCombustible", "TipoInformacion: " & tipoInformacion & ", Valor: " & valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESInformacionCombustible", "TipoInformacion: " & tipoInformacion & ", Valor: " & valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ESCaraCombustible(ByVal cara As Int16) As Boolean
        Try
            Return ODatos.ESCaraCombustible(cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESCaraCombustible", "Cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESCaraCombustible", "Cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ESCaraCombustible(ByVal cara As Int16, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ESCaraCombustible(cara, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ESCaraCombustible", "IdEstacion: " & idEstacion & "Cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ESCaraCombustible", "IdEstacion: " & idEstacion & "Cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCodigoProductoCombustible(ByVal idProducto As Int32) As String
        Try
            Return ODatos.RecuperarCodigoProductoCombustible(idProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoCombustible", "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoCombustible", "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCodigoProductoCombustible(ByVal idProducto As Int32, ByVal idEstacion As Int16) As String
        Try
            Return ODatos.RecuperarCodigoProductoCombustible(idProducto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoCombustible", "IdEstacion: " & idEstacion & "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoCombustible", "IdEstacion: " & idEstacion & "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCodigoProductoCanastilla(ByVal idProducto As Int32) As String
        Try
            Return ODatos.RecuperarCodigoProductoCanastilla(idProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoCanastilla", "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoCanastilla", "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCodigoProductoCanastilla(ByVal idProducto As Int32, ByVal idEstacion As Int16) As String
        Try
            Return ODatos.RecuperarCodigoProductoCanastilla(idProducto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoCanastilla", "IdEstacion: " & idEstacion & "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCodigoProductoCanastilla", "IdEstacion: " & idEstacion & "idProducto: " & idProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function SolicitaLecturaChip(ByVal idProducto As Int32) As Boolean
        Try
            Return ODatos.SolicitaLecturaChip(idProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SolicitaLecturaChip", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SolicitaLecturaChip", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function SolicitaLecturaChip(ByVal idProducto As Int32, ByVal IdEstacion As Integer) As Boolean
        Try
            Return ODatos.SolicitaLecturaChip(idProducto, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "SolicitaLecturaChip", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "SolicitaLecturaChip", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


#End Region

#Region "   Validar Tanqueos Simultaneos    "

    Public Function ValidarTanqueoSimultaneo(ByVal Rom As String, Optional ByVal idEstacion As Int16 = 0) As Int16
        Try
            If idEstacion = 0 Then
                Return ODatos.ValidarTanqueoSimultaneo(Rom)
            Else
                Return ODatos.ValidarTanqueoSimultaneo(Rom, idEstacion)
            End If
        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarTanqueoSimultaneo", "Rom: " & Rom, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarTanqueoSimultaneo", "IdEstacion" & idEstacion & "Rom: " & Rom, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarTanqueoSimultaneo", "Rom: " & Rom, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarTanqueoSimultaneo", "IdEstacion" & idEstacion & "Rom: " & Rom, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function ValidarTanqueoSimultaneoPorPlaca(ByVal placa As String) As Int16
        Try
            Return ODatos.ValidarTanqueoSimultaneoPorPlaca(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTanqueoSimultaneoPorPlaca", "placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTanqueoSimultaneoPorPlaca", "placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Resolucion de Factura   "

    Public Function InsertaResolucion(ByVal IdConsecutivo As Int64, ByVal NoResolucionFactura As String, ByVal Prefijo As String, ByVal NumeroInicial As Int64, ByVal NumeroFinal As Int64,
                                      ByVal FechaInicialResFactura As DateTime, ByVal FechaFinalResFactura As DateTime, ByVal NoResolGContribuyente As String,
                                      ByVal FechaResGContribuyente As DateTime, ByVal NoResAutoRetenedor As String, ByVal FechaNoResAutoRetenedor As DateTime) As DataTable
        Try
            Return ODatos.InsertaResolucion(IdConsecutivo, NoResolucionFactura, Prefijo, NumeroInicial, NumeroFinal, FechaInicialResFactura, FechaFinalResFactura, NoResolGContribuyente, FechaResGContribuyente, NoResAutoRetenedor, FechaResGContribuyente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertaResolucion", "IdConsecutivo: " & IdConsecutivo.ToString() & " ResolucionFactura: " & NoResolucionFactura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertaResolucion", "IdConsecutivo: " & IdConsecutivo.ToString() & " ResolucionFactura: " & NoResolucionFactura, "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Function RecuperarResolucionGrid() As DataTable
        Try
            Return ODatos.RecuperarResolucionGrid()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarResolucionGrid", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarResolucionGrid", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarResolucionGrid(ByVal IdEstacion As Integer) As DataTable
        Try
            Return ODatos.RecuperarResolucionGrid(IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarResolucionGrid", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarResolucionGrid", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ActualizarConsecutivoActualResolucionActiva(ByVal NumeroActual As Int64)
        Try
            ODatos.ActualizarConsecutivoActualResolucionActiva(NumeroActual)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarConsecutivoActualResolucionActiva", "NumeroActual: " & NumeroActual.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarConsecutivoActualResolucionActiva", "NumeroActual: " & NumeroActual.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Cambios de Precios"
    Public Sub ReportarCambioPrecioFallido(ByVal IdManguera As Int16, ByVal precio As Decimal)
        Try
            ODatos.ReportarCambioPrecioFallido(IdManguera, precio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ReportarCambioPrecioFallido", "IdManguera: " & IdManguera & ", Precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ReportarCambioPrecioFallido", "IdManguera: " & IdManguera & ", Precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ReportarCambioPrecioFallido(ByVal IdManguera As Int16, ByVal precio As Decimal, ByVal idEstacion As Int16)
        Try
            ODatos.ReportarCambioPrecioFallido(IdManguera, precio, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ReportarCambioPrecioFallido", "IdEstacion: " & idEstacion & "IdManguera: " & IdManguera & ", Precio: " & precio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ReportarCambioPrecioFallido", "IdEstacion: " & idEstacion & "IdManguera: " & IdManguera & ", Precio: " & precio, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Financiera Terpel"

    Public Function RecuperarParametrosCDC(ByVal Nombre As String, ByVal idEstacion As Int16) As String
        Try

            Return ODatos.RecuperarParametrosCDC(Nombre, idEstacion)


        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorSobre", "IdEstacion:" & idEstacion & "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorSobre", "IdEstacion:" & idEstacion & "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarParametrosCDC(ByVal Nombre As String) As String
        Try

            Return ODatos.RecuperarParametrosCDC(Nombre)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorSobre", "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorSobre", "Nombre: " & Nombre, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteRecibo(ByVal Recibo As Int64) As Boolean
        Try
            Return ODatos.ExisteRecibo(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteReciboCanastilla(ByVal Recibo As Int64) As Boolean
        Try
            Return ODatos.ExisteReciboCanastilla(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteReciboCanastilla", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteReciboCanastilla", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarTarjetaCupo(ByVal nroTarjeta As String, ByVal Cupo As Double, ByVal identificacion As String) As String
        Try
            Return ODatos.InsertarTarjetaCupo(nroTarjeta, Cupo, identificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTarjetaCupo", "Nro Tarjeta: " & nroTarjeta & ", Cupo: " & Cupo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTarjetaCupo", "Nro Tarjeta: " & nroTarjeta & ", Cupo: " & Cupo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarTarjetaCupo(ByVal nroTarjeta As String, ByVal Cupo As Double, ByVal identificacion As String, ByVal Activa As String) As String
        Try
            Return ODatos.InsertarTarjetaCupo(nroTarjeta, Cupo, identificacion, Activa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarTarjetaCupo", "Nro Tarjeta: " & nroTarjeta & ", Cupo: " & Cupo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarTarjetaCupo", "Nro Tarjeta: " & nroTarjeta & ", Cupo: " & Cupo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarCupoPrepago(ByVal nroTarjeta As String, ByVal Cupo As Double, ByVal factura As Int32) As String
        Try
            Return ODatos.InsertarCupoPrepago(nroTarjeta, Cupo, factura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCupoPrepago", "Nro Tarjeta: " & nroTarjeta & ", Cupo: " & Cupo & ", Factura: " & factura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCupoPrepago", "Nro Tarjeta: " & nroTarjeta & ", Cupo: " & Cupo & ", Factura: " & factura, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarCupoTarjeta(ByVal nroTarjeta As String, ByVal Cupo As Double, ByVal idTurno As Int32) As Int32
        Try
            Return ODatos.InsertarCupoTarjeta(nroTarjeta, Cupo, idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCupoTarjeta", "Nro Tarjeta: " & nroTarjeta & ", Cupo: " & Cupo & ", IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCupoTarjeta", "Nro Tarjeta: " & nroTarjeta & ", Cupo: " & Cupo & ", IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCupoPrepago(ByVal IdCupo As Int32) As DataTable
        Try
            Return ODatos.RecuperarCupoPrepago(IdCupo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCupoPrepago", "IdCupo: " & IdCupo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCupoPrepago", "IdCupo: " & IdCupo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTarjetaPorNumero(ByVal Numero As String) As IDataReader
        Try
            Return ODatos.RecuperarTarjetaPorNumero(Numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTarjetaPorNumero", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTarjetaPorNumero", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarClienteTarjeta(ByVal NroTarjeta As String) As String
        Try
            Return ODatos.RecuperarClienteTarjeta(NroTarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClienteTarjeta", "NroTarjeta: " & NroTarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClienteTarjeta", "NroTarjeta: " & NroTarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarCupoPrepagoDetalle(ByVal idCupo As Int32, ByVal IdFormaPago As Int16, ByVal Valor As Double)
        Try
            ODatos.InsertarCupoPrepagoDetalle(idCupo, IdFormaPago, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCupoPrepagoDetalle", "IdCupo: " & idCupo & ", IdFormaPago: " & IdFormaPago & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCupoPrepagoDetalle", "IdCupo: " & idCupo & ", IdFormaPago: " & IdFormaPago & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub IngresarFacturaVentaCombustible(ByVal Recibo As Int64)
        Try
            ODatos.IngresarFacturaVentaCombustible(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " IngresarFacturaVentaCombustible", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " IngresarFacturaVentaCombustible", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub IngresarFacturaVentaCombustible(ByVal Recibo As Int64, ByVal EsLeyFrontera As Boolean)
        Try
            ODatos.IngresarFacturaVentaCombustible(Recibo, EsLeyFrontera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " IngresarFacturaVentaCombustible", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " IngresarFacturaVentaCombustible", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub IngresarFacturaVentaCombustible(ByVal Recibo As Int64, ByVal EsLeyFrontera As Boolean, ByVal idEstacion As Int16)
        Try
            ODatos.IngresarFacturaVentaCombustible(Recibo, EsLeyFrontera, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " IngresarFacturaVentaCombustible", "IdEstacion: " & idEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " IngresarFacturaVentaCombustible", "IdEstacion: " & idEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Function InsertarFacturaReciboVentaCanastilla(ByVal Recibo As Int64) As Int64
        Try
            Return ODatos.InsertarFacturaReciboVentaCanastilla(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " InsertarFacturaReciboVentaCanastilla", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " InsertarFacturaReciboVentaCanastilla", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarFacturaReciboVentaCanastilla(ByVal Recibo As Int64, ByVal idEstacion As Int16) As Int64
        Try
            Return ODatos.InsertarFacturaReciboVentaCanastilla(Recibo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " InsertarFacturaReciboVentaCanastilla", "IdEstacion: " & idEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " InsertarFacturaReciboVentaCanastilla", "IdEstacion: " & idEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormaPagoEfectivo() As IDataReader
        Try
            Return ODatos.RecuperarFormaPagoEfectivo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaPagoEfectivo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaPagoEfectivo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarCheque(ByVal NumeroAutorizacion As Int64, ByVal ValorCheque As Decimal, ByVal Recibo As Long) As String
        Try
            Return ODatos.ValidarCheque(NumeroAutorizacion, ValorCheque, Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCheque", "NumeroAutorizacion: " & NumeroAutorizacion & ", ValorCheque: " & ValorCheque & ", Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCheque", "NumeroAutorizacion: " & NumeroAutorizacion & ", ValorCheque: " & ValorCheque & ", Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarCambioChequeMr(ByVal NumeroAutorizacion As Int64, ByVal Valor As Decimal, ByVal IdTurno As Int32, ByVal Recibo As Int64, ByVal IdCara As Int16)
        Try
            ODatos.InsertarCambioChequeMr(NumeroAutorizacion, Valor, IdTurno, Recibo, IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCambioChequeMr", "NumeroAutorizacion: " & NumeroAutorizacion & ", Valor: " & Valor & ", IdTurno: " & IdTurno & ", Recibo: " & Recibo & ", IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCambioChequeMr", "NumeroAutorizacion: " & NumeroAutorizacion & ", Valor: " & Valor & ", IdTurno: " & IdTurno & ", Recibo: " & Recibo & ", IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarCambioCheque(ByVal NumeroAutorizacion As Int64, ByVal Valor As Decimal, ByVal IdTurno As Int32, ByVal Recibo As Int64, ByVal IdCara As Int16)
        Try
            ODatos.InsertarCambioCheque(NumeroAutorizacion, Valor, IdTurno, Recibo, IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCambioCheque", "NumeroAutorizacion: " & NumeroAutorizacion & ", Valor: " & Valor & ", IdTurno: " & IdTurno & ", Recibo: " & Recibo & ", IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCambioCheque", "NumeroAutorizacion: " & NumeroAutorizacion & ", Valor: " & Valor & ", IdTurno: " & IdTurno & ", Recibo: " & Recibo & ", IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarCambioCheque(ByVal NumeroAutorizacion As Int64, ByVal Valor As Decimal, ByVal IdTurno As Int32, ByVal Recibo As Int64, ByVal IdCara As Int16, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarCambioCheque(NumeroAutorizacion, Valor, IdTurno, Recibo, IdCara, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarCambioCheque", "IdEstacion: " & idEstacion & "NumeroAutorizacion: " & NumeroAutorizacion & ", Valor: " & Valor & ", IdTurno: " & IdTurno & ", Recibo: " & Recibo & ", IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarCambioCheque", "IdEstacion: " & idEstacion & "NumeroAutorizacion: " & NumeroAutorizacion & ", Valor: " & Valor & ", IdTurno: " & IdTurno & ", Recibo: " & Recibo & ", IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarNumeroCheque(ByVal NumeroAutorizacion As Int64) As String
        Try
            Return ODatos.RecuperarNumeroCheque(NumeroAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNumeroCheque", "NumeroAutorizacion: " & NumeroAutorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNumeroCheque", "NumeroAutorizacion: " & NumeroAutorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSurtidorporCara(ByVal IdCara As Int16) As String
        Try
            Return ODatos.RecuperarSurtidorporCara(IdCara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidorporCara", "IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidorporCara", "IdCara: " & IdCara, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub ActualizarEstadoTarjetaCupo(ByVal IdCliente As String, ByVal Numero As String, ByVal Activa As String)
        Try
            ODatos.ActualizarEstadoTarjetaCupo(IdCliente, Numero, Activa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoTarjetaCupo", "IdCliente: " & IdCliente & ", Numero: " & Numero, "Activa: " & Activa & ",FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoTarjetaCupo", "IdCliente: " & IdCliente & ", Numero: " & Numero, "Activa: " & Activa & ",FallaStoredProcedure")
            Throw
        End Try
    End Sub

#End Region



#Region "   Consignacion de Sobres  "
    Public Function InsertarSobre(ByVal Turno As Int32, ByVal IdTipoTurno As Int16, ByVal TipoConsignacion As Int16, ByVal Cantidad As Decimal) As DataTable
        Try
            Return ODatos.InsertarSobre(Turno, IdTipoTurno, TipoConsignacion, Cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSobre", "Turno: " & Turno.ToString() & " TipoConsignacion: " & TipoConsignacion.ToString() & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSobre", "Turno: " & Turno.ToString() & " TipoConsignacion: " & TipoConsignacion.ToString() & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarSobre(ByVal Turno As Int32, ByVal IdTipoTurno As Int16, ByVal TipoConsignacion As Int16, ByVal Cantidad As Decimal, ByVal TipoMoneda As Integer) As DataTable
        Try
            Return ODatos.InsertarSobre(Turno, IdTipoTurno, TipoConsignacion, Cantidad, TipoMoneda)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSobre", "TipoMoneda: " & TipoMoneda & "Turno: " & Turno.ToString() & " TipoConsignacion: " & TipoConsignacion.ToString() & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSobre", "TipoMoneda: " & TipoMoneda & "Turno: " & Turno.ToString() & " TipoConsignacion: " & TipoConsignacion.ToString() & " Cantidad: " & Cantidad.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsignaciondeSobresTurno(ByVal Turno As Int64, ByVal IdTipoTurno As Int16) As DataTable
        Try
            Return ODatos.RecuperarConsignaciondeSobresTurno(Turno, IdTipoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurno", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurno", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarConsignaciondeSobresImpresion(ByVal Turno As Int64, ByVal IdTipoTurno As Int16) As DataTable
        Try
            Return ODatos.RecuperarConsignaciondeSobresImpresion(Turno, IdTipoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresImpresion", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresImpresion", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarConsignaciondeSobresTurnoDolares(ByVal Turno As Int64, ByVal IdTipoTurno As Int16) As DataTable
        Try
            Return ODatos.RecuperarConsignaciondeSobresTurnoDolares(Turno, IdTipoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurnoDolares", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurnoDolares", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarConsignaciondeSobresTurno(ByVal Turno As Int64, ByVal IdTipoTurno As Int16, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarConsignaciondeSobresTurno(Turno, IdTipoTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurno", "IdEstacion: " & idEstacion & "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurno", "IdEstacion: " & idEstacion & "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsignaciondeSobresTurnoTrabajo(ByVal Turno As Int32) As DataTable
        Try
            Return ODatos.RecuperarConsignaciondeSobresTurnoTrabajo(Turno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurnoTrabajo", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurnoTrabajo", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarConsignaciondeSobresTurnoTrabajo(ByVal Turno As Int32, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarConsignaciondeSobresTurnoTrabajo(Turno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurnoTrabajo", "IdEstacion: " & idEstacion & "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsignaciondeSobresTurnoTrabajo", "IdEstacion: " & idEstacion & "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoPorCredenciales(ByVal Empleado As String, ByVal Clave As String) As Int64
        Try
            Return ODatos.RecuperarTurnoPorCredenciales(Empleado, Clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoPorCredenciales", "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoPorCredenciales", "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoPorCredencialesTable(ByVal Empleado As String, ByVal Clave As String) As DataTable
        Try
            Return ODatos.RecuperarTurnoPorCredencialesTable(Empleado, Clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoPorCredenciales", "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoPorCredenciales", "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarTurnoPorCredencialesTable(ByVal Empleado As String, ByVal Clave As String, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarTurnoPorCredencialesTable(Empleado, Clave, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoPorCredenciales", "IdEstacion: " & idEstacion & "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoPorCredenciales", "IdEstacion: " & idEstacion & "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoConsignaciones(ByVal Empleado As String, ByVal Clave As String, ByVal esTurnoCombustible As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarTurnoConsignaciones(Empleado, Clave, esTurnoCombustible)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoConsignaciones", "Empleado: " & Empleado & ", Clave: " & Clave & ", EsTurnoCombustible: " & esTurnoCombustible, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoConsignaciones", "Empleado: " & Empleado & ", Clave: " & Clave & ", EsTurnoCombustible: " & esTurnoCombustible, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTurnoCredencialesPorTipo(ByVal Empleado As String, ByVal Clave As String) As IDataReader
        Try
            Return ODatos.RecuperarTurnoCredencialesPorTipo(Empleado, Clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoCredencialesPorTipo", "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoCredencialesPorTipo", "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsTurnoTrabajo(ByVal Empleado As String, ByVal Clave As String) As Boolean
        Try
            Return ODatos.EsTurnoTrabajo(Empleado, Clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsTurnoTrabajo", "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsTurnoTrabajo", "Empleado: " & Empleado & ", Clave: " & Clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsTurnoAutoServicio(ByVal cara As Int16, Optional ByVal idEstacion As Int16 = 0) As Boolean
        Try
            If idEstacion = 0 Then
                Return ODatos.EsTurnoAutoServicio(cara)
            Else
                Return ODatos.EsTurnoAutoServicio(cara, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "EsTurnoAutoServicio", "Cara: " & cara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "EsTurnoAutoServicio", "IdEsatcion: " & idEstacion & "Cara: " & cara, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "EsTurnoAutoServicio", "Cara: " & cara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "EsTurnoAutoServicio", "IdEsatcion: " & idEstacion & "Cara: " & cara, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Function EsFinalizaConsignacionSobreTurno(ByVal idTurno As Integer) As Boolean
        Try
            Return ODatos.EsFinalizaConsignacionSobreTurno(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EsFinalizaConsignacionSobreTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsFinalizaConsignacionSobreTurno", "Idturno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub InsertarSobre(ByVal IdTurno As Int64, ByVal IdTipoTurno As Int16, ByVal IdTipoconsignacion As Int16, ByVal Cantidad As Decimal)
        Try
            ODatos.InsertarSobre(IdTurno, IdTipoTurno, IdTipoconsignacion, Cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSobre", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSobre", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarSobreLote(ByVal IdTurno As Int64, ByVal IdTipoTurno As Int16, ByVal Sobres As Dictionary(Of Short, Decimal))
        Try
            ODatos.InsertarSobreLote(IdTurno, IdTipoTurno, Sobres)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSobreLote", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSobreLote", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub InsertarSobreLote(ByVal IdTurno As Int64, ByVal IdTipoTurno As Int16, ByVal Sobres As List(Of ConsignacionSobre))
        Try
            ODatos.InsertarSobreLote(IdTurno, IdTipoTurno, Sobres)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSobreLote", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSobreLote", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub InsertarSobreLote(ByVal IdTurno As Int64, ByVal IdTipoTurno As Int16, ByVal Sobres As Dictionary(Of Short, Decimal), ByVal idEstacion As Int16)
        Try
            ODatos.InsertarSobreLote(IdTurno, IdTipoTurno, Sobres, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSobreLote", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSobreLote", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarSobreLoteTurnoTrabajo(ByVal IdTurno As Int32, ByVal Sobres As Dictionary(Of Short, Decimal))
        Try
            ODatos.InsertarSobreLoteTurnoTrabajo(IdTurno, Sobres)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSobreLoteTurnoTrabajo", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSobreLoteTurnoTrabajo", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub InsertarSobreLoteTurnoTrabajo(ByVal IdTurno As Int32, ByVal Sobres As Dictionary(Of Short, Decimal), ByVal idEstacion As Int16)
        Try
            ODatos.InsertarSobreLoteTurnoTrabajo(IdTurno, Sobres, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSobreLoteTurnoTrabajo", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSobreLoteTurnoTrabajo", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarEmpleadoPorTurno(ByVal IdTurno As Int64, ByVal IdTipoTurno As Int16) As DataTable
        Try
            Return ODatos.RecuperarEmpleadoPorTurno(IdTurno, IdTipoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorTurno", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorTurno", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarEmpleadoPorTurno(ByVal IdTurno As Int64, ByVal IdTipoTurno As Int16, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarEmpleadoPorTurno(IdTurno, IdTipoTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorTurno", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorTurno", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarTurnoConsignacionSobre(ByVal IdTurno As Int64, ByVal IdTipoTurno As Int16)
        Try
            ODatos.ActualizarTurnoConsignacionSobre(IdTurno, IdTipoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTurnoConsignacionSobre", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTurnoConsignacionSobre", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarTurnoConsignacionSobre(ByVal IdTurno As Int64, ByVal IdTipoTurno As Int16, ByVal idestacion As Int16)
        Try
            ODatos.ActualizarTurnoConsignacionSobre(IdTurno, IdTipoTurno, idestacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTurnoConsignacionSobre", "IdEstacion: " & idestacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTurnoConsignacionSobre", "IdEstacion: " & idestacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarTurnoTrabajoConsignacionSobre(ByVal IdTurno As Int32)
        Try
            ODatos.ActualizarTurnoTrabajoConsignacionSobre(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTurnoTrabajoConsignacionSobre", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTurnoTrabajoConsignacionSobre", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarTurnoTrabajoConsignacionSobre(ByVal IdTurno As Int32, ByVal idEstacion As Int16)
        Try
            ODatos.ActualizarTurnoTrabajoConsignacionSobre(IdTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTurnoTrabajoConsignacionSobre", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTurnoTrabajoConsignacionSobre", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "   Cambio de Cheques   "

    Public Function RecuperarNumeroChequePorTurno(ByVal Turno As Int32) As DataTable
        Try
            Return ODatos.RecuperarNumeroChequePorTurno(Turno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNumeroChequePorTurno", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNumeroChequePorTurno", "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarNumeroChequePorTurno(ByVal Turno As Int32, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarNumeroChequePorTurno(Turno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNumeroChequePorTurno", "IdEstacion: " & idEstacion & "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNumeroChequePorTurno", "IdEstacion: " & idEstacion & "Turno: " & Turno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCambiosChequePorTurno(ByVal Turno As Int32, ByVal NumeroCheque As String) As DataTable
        Try
            Return ODatos.RecuperarCambiosChequePorTurno(Turno, NumeroCheque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCambiosChequePorTurno", "Turno: " & Turno.ToString() & ", NumeroCheque: " & NumeroCheque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCambiosChequePorTurno", "Turno: " & Turno.ToString() & ", NumeroCheque: " & NumeroCheque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "   Manejo de Documentos(Factura Combustible)   "
    Public Function RecuperarIdDocumentoPorRecibo(ByVal Recibo As Int32) As Int64
        Try
            Return ODatos.RecuperarIdDocumentoPorRecibo(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarReciboPorNumeroFactura(ByVal Prefijo As String, ByVal consecutivo As Int64) As Int64
        Try
            Return ODatos.RecuperarReciboPorNumeroFactura(Prefijo, consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorNumeroFactura", "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorNumeroFactura", "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdDocumentoPorNumeroFactura(ByVal Prefijo As String, ByVal consecutivo As Int64) As Int64
        Try
            Return ODatos.RecuperarIdDocumentoPorNumeroFactura(Prefijo, consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorNumeroFactura", "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorNumeroFactura", "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarIdDocumentoPorNumeroFactura(ByVal Prefijo As String, ByVal consecutivo As Int64, ByVal idEstacion As Int16) As Int64
        Try
            Return ODatos.RecuperarIdDocumentoPorNumeroFactura(Prefijo, consecutivo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorNumeroFactura", "IdEstacion: " & idEstacion & "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorNumeroFactura", "IdEstacion: " & idEstacion & "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdDocumentoPorNumeroFacturaCanastilla(ByVal Prefijo As String, ByVal consecutivo As Int64, Optional ByVal EsConsolidada As Boolean = False) As Int64
        Try
            Return ODatos.RecuperarIdDocumentoPorNumeroFacturaCanastilla(Prefijo, consecutivo, EsConsolidada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorNumeroFacturaCanastilla", "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorNumeroFacturaCanastilla", "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarIdDocumentoPorNumeroFacturaCanastilla(ByVal Prefijo As String, ByVal consecutivo As Int64, ByVal idEstacion As Int16, Optional ByVal EsConsolidada As Boolean = False) As Int64
        Try
            Return ODatos.RecuperarIdDocumentoPorNumeroFacturaCanastilla(Prefijo, consecutivo, EsConsolidada, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorNumeroFacturaCanastilla", "IdEstacion: " & idEstacion & "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorNumeroFacturaCanastilla", "IdEstacion: " & idEstacion & "Prefijo: " & Prefijo.ToString() & " consecutivo: " & consecutivo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEncabezadoFactura(ByVal IdDocumento As Int64) As DataTable
        Try
            Return ODatos.RecuperarEncabezadoFactura(IdDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoFactura", " IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoFactura", "IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEncabezadoFactura(ByVal IdDocumento As Int64, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarEncabezadoFactura(IdDocumento, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoFactura", "IdEstacion: " & idEstacion & " IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoFactura", "IdEstacion: " & idEstacion & "IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEncabezadoFacturaCanastilla(ByVal IdDocumento As Int64) As DataTable
        Try
            Return ODatos.RecuperarEncabezadoFacturaCanastilla(IdDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoFacturaCanastilla", " IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoFacturaCanastilla", "IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarEncabezadoFacturaCanastilla(ByVal IdDocumento As Int64, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarEncabezadoFacturaCanastilla(IdDocumento, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoFacturaCanastilla", "IdEstacion: " & idEstacion & " IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoFacturaCanastilla", "IdEstacion: " & idEstacion & "IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDetalleFactura(ByVal IdDocumento As Int64) As DataTable
        Try
            Return ODatos.RecuperarDetalleFactura(IdDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDetalleFactura", " IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDetalleFactura", "IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarDetalleFactura(ByVal IdDocumento As Int64, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarDetalleFactura(IdDocumento, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDetalleFactura", "IdEstacion: " & idEstacion & " IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDetalleFactura", "IdEstacion: " & idEstacion & "IdDocumento: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdDocumentoPorRecibo(ByVal Recibo As Int64) As Int64
        Try
            Return ODatos.RecuperarIdDocumentoPorRecibo(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorRecibo", " Recibo: " & Recibo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorRecibo", "Recibo: " & Recibo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdDocumentoPorReciboDataTable(ByVal Recibo As Int64) As DataTable
        Try
            Return ODatos.RecuperarIdDocumentoPorReciboDataTable(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorRecibo", " Recibo: " & Recibo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorRecibo", "Recibo: " & Recibo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarIdDocumentoPorReciboDataTable(ByVal Recibo As Int64, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarIdDocumentoPorReciboDataTable(Recibo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorRecibo", "IdEstacion: " & idEstacion & " Recibo: " & Recibo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdDocumentoPorRecibo", "IdEstacion: " & idEstacion & "Recibo: " & Recibo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function EsVentaLeydeFrontera(ByVal Recibo As Int32) As DataTable
        Try
            Return ODatos.EsVentaLeydeFrontera(Recibo)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EsVentaLeydeFrontera", "Recibo: " & Recibo.ToString(), "")
            Throw
        End Try
    End Function

#End Region

#Region "   TaskManagement Terpel   "

    Public Function InsertarFacturaConsolidadaVentaCombustible(ByVal Hora As String) As Int64
        Try
            Return ODatos.InsertarFacturaConsolidadaVentaCombustible(Hora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaConsolidadaVentaCombustible", "Hora: " & Hora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaConsolidadaVentaCombustible", "Hora: " & Hora, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarFacturaConsolidadaVentaCombustibleTable(ByVal Hora As String, Optional TimeOut As Integer = 800) As DataTable
        Try
            Return ODatos.InsertarFacturaConsolidadaVentaCombustibleTable(Hora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaConsolidadaVentaCombustibleTable", "Hora: " & Hora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaConsolidadaVentaCombustibleTable", "Hora: " & Hora, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarFacturaConsolidadaVentaCanastilla(ByVal Hora As String) As Int64
        Try
            Return ODatos.InsertarFacturaConsolidadaVentaCanastilla(Hora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaConsolidadaVentaCanastilla", "Hora: " & Hora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaConsolidadaVentaCanastilla", "Hora: " & Hora, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Ventas fuera del sistema"
    Public Function RecuperarVentasRecuperadas(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentasRecuperadas(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasRecuperadas", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasRecuperadas", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentasRecuperadas(ByVal idTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarVentasRecuperadas(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasRecuperadas", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasRecuperadas", "IdEstacion: " & idEstacion & "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFallosDeSistema(ByVal idTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarFallosDeSistema(idTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFallosDeSistema", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFallosDeSistema", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub HabilitarMangueraConVentasFueraDelSistema(ByVal idManguera As Int16)
        Try
            ODatos.HabilitarMangueraConVentasFueraDelSistema(idManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "HabilitarMangueraConVentasFueraDelSistema", "idManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "HabilitarMangueraConVentasFueraDelSistema", "idManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub HabilitarMangueraConVentasFueraDelSistemaFullStation(ByVal idManguera As Integer, ByVal IdBloqueo As Integer, ByVal EsFallaTecnica As Boolean)
        Try
            ODatos.HabilitarMangueraConVentasFueraDelSistemaFullStation(CShort(idManguera), IdBloqueo, EsFallaTecnica)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "HabilitarMangueraConVentasFueraDelSistema", "idManguera: " & idManguera & "IdBloqueo: " & IdBloqueo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "HabilitarMangueraConVentasFueraDelSistema", "idManguera: " & idManguera & "IdBloqueo: " & IdBloqueo.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub HabilitarMangueraConVentasFueraDelSistema(ByVal idManguera As Int16, ByVal idEstacion As Int16)
        Try
            ODatos.HabilitarMangueraConVentasFueraDelSistema(idManguera, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "HabilitarMangueraConVentasFueraDelSistema", "IdEstacion: " & idEstacion & "idManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "HabilitarMangueraConVentasFueraDelSistema", "IdEstacion: " & idEstacion & "idManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Function RecuperarManguerasBloqueadasFueraDelSistema() As IDataReader
        Try
            Return ODatos.RecuperarManguerasBloqueadasFueraDelSistema()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasBloqueadasFueraDelSistema", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasBloqueadasFueraDelSistema", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Function RecuperarManguerasBloqueadasFueraDelSistema(ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarManguerasBloqueadasFueraDelSistema(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasBloqueadasFueraDelSistema", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasBloqueadasFueraDelSistema", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDifLecturaActualVsVentasPorBloqueo(ByVal idManguera As Int16) As IDataReader
        Try
            Return ODatos.RecuperarDifLecturaActualVsVentasPorBloqueo(idManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDifLecturaActualVsVentasPorBloqueo", "idManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDifLecturaActualVsVentasPorBloqueo", "idManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarVehiculoCredito(ByVal Placa As String) As Boolean
        Try
            Return ODatos.ValidarVehiculoCredito(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVehiculoCredito", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVehiculoCredito", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function VerificarBonoSodexo(ByVal NroConfirmacion As String, ByVal IdFormaPago As Integer) As Boolean
        Try
            Return ODatos.VerificarBonoSodexo(NroConfirmacion, IdFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "VerificarBonoSodexo", "NroConfirmacion: " & NroConfirmacion & "IdFormaPago: " & IdFormaPago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "VerificarBonoSodexo", "NroConfirmacion: " & NroConfirmacion & "IdFormaPago: " & IdFormaPago, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarVehiculoCredito(ByVal Placa As String, ByVal Ruc As String, ByVal NumeroCredito As String) As Boolean
        Try
            Return ODatos.ValidarVehiculoCredito(Placa, Ruc, NumeroCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVehiculoCredito", "Placa: " & Placa & "NumeroCredito: " & NumeroCredito & "Ruc: " & Ruc, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVehiculoCredito", "Placa: " & Placa & "NumeroCredito: " & NumeroCredito & "Ruc: " & Ruc, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function TieneCreditoSuspendidoVehiculo(ByVal Placa As String, Optional ByVal IdEstacion As Int16 = 0) As Boolean
        Try
            If IdEstacion = 0 Then
                Return ODatos.TieneCreditoSuspendidoVehiculo(Placa)
            Else
                Return ODatos.TieneCreditoSuspendidoVehiculo(Placa, IdEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "TieneCreditoSuspendidoVehiculo", "Placa: " & Placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "TieneCreditoSuspendidoVehiculo", "IdEsatcion: " & IdEstacion & "Placa: " & Placa, "FallaStoredProcedure")
            End If
            Throw
        Catch ex As System.Exception
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "TieneCreditoSuspendidoVehiculo", "Placa: " & Placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "TieneCreditoSuspendidoVehiculo", "IdEsatcion: " & IdEstacion & "Placa: " & Placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function


    Public Function RecuperarTurnoPorCara(ByVal Cara As Int32, ByVal Placa As String) As IDataReader
        Try
            Return ODatos.RecuperarTurnoPorCara(Cara, Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoPorCara", "Cara: " & Cara & "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoPorCara", "Cara: " & Cara & "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Sub ValidacionEstadoCreditoVehiculo(ByVal Placa As String)
        Try
            ODatos.ValidacionEstadoCreditoVehiculo(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidacionEstadoCreditoVehiculo", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidacionEstadoCreditoVehiculo", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "   Registro Sobrante y Faltantes de Turno  "
    Public Function RecuperarTurnoFechaSurtidorHorario(ByVal Fecha As String, ByVal TurnoHorario As Int16, ByVal Surtidor As Int16) As DataTable
        Try
            Return ODatos.RecuperarTurnoFechaSurtidorHorario(Fecha, TurnoHorario, Surtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTurnoFechaSurtidorHorario", "Fecha: " & Fecha & " TurnoHorario: " & TurnoHorario.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoFechaSurtidorHorario", "Fecha: " & Fecha & " TurnoHorario: " & TurnoHorario.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarSobranteTurno(ByVal IdTurno As Int32, ByVal IdEmpleado As Int32, ByVal IdSurtidor As Int32, ByVal Fecha As String, ByVal Valor As Decimal, ByVal IdTipoTurno As Int32)
        Try
            ODatos.InsertarSobranteTurno(IdTurno, IdEmpleado, IdSurtidor, Fecha, Valor, IdTipoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSobranteTurno", "Fecha: " & Fecha & " Turno: " & IdTurno.ToString() & " IdEmpleado: " & IdEmpleado.ToString() & " IdSurtidor: " & IdSurtidor.ToString() & " IdTipoTurno: " & IdTipoTurno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSobranteTurno", "Fecha: " & Fecha & " Turno: " & IdTurno.ToString() & " IdEmpleado: " & IdEmpleado.ToString() & " IdSurtidor: " & IdSurtidor.ToString() & " IdTipoTurno: " & IdTipoTurno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarIsleros() As DataTable
        Try
            Return ODatos.RecuperarIsleros()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIsleros", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIsleros", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIslerosConSaldo() As DataTable
        Try
            Return ODatos.RecuperarIslerosConSaldo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslerosConSaldo", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslerosConSaldo", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSobranteEmpleado(ByVal IdEmpleado As Int32) As DataTable
        Try
            Return ODatos.RecuperarSobranteEmpleado(IdEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSobranteEmpleado", "IdEmpleado: " & IdEmpleado.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSobranteEmpleado", "IdEmpleado: " & IdEmpleado.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSobranteFaltanteTurno(ByVal IdTurno As Int32, ByVal IdTipoTurno As Int16) As IDataReader
        Try
            Return ODatos.RecuperarSobranteFaltanteTurno(IdTurno, IdTipoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteTurno", "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteTurno", "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarSobranteFaltanteMonedaExtranjeraTurno(ByVal IdTurno As Int32, ByVal IdTipoTurno As Int16) As IDataReader
        Try
            Return ODatos.RecuperarSobranteFaltanteMonedaExtranjeraTurno(IdTurno, IdTipoTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteMonedaExtranjeraTurno", "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteMonedaExtranjeraTurno", "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSobranteFaltanteTurno(ByVal IdTurno As Int32, ByVal IdTipoTurno As Int16, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarSobranteFaltanteTurno(IdTurno, IdTipoTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteTurno", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteTurno", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarSobranteFaltanteTurnoTrabajo(ByVal IdTurno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarSobranteFaltanteTurnoTrabajo(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteTurnoTrabajo", "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteTurnoTrabajo", "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarSobranteFaltanteTurnoTrabajo(ByVal IdTurno As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarSobranteFaltanteTurnoTrabajo(IdTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteTurnoTrabajo", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSobranteFaltanteTurnoTrabajo", "IdEstacion: " & idEstacion & "IdTurno: " & IdTurno.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleadoporNumeroDocumento(ByVal Numero As String) As DataTable
        Try
            Return ODatos.RecuperarEmpleadoporNumeroDocumento(Numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleadoporNumeroDocumento", "Numero: " & Numero.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleadoporNumeroDocumento", "Numero: " & Numero.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleadoPorCedula(ByVal cedula As String) As IDataReader
        Try
            Return ODatos.RecuperarEmpleadoPorCedula(cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorCedula", "Cedula: " & cedula, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorCedula", "Cedula: " & cedula, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarEmpleadoPorCedula(ByVal cedula As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarEmpleadoPorCedula(cedula, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorCedula", "IdEstacion: " & idEstacion & "Cedula: " & cedula, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleadoPorCedula", "IdEstacion: " & idEstacion & "Cedula: " & cedula, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFaltanteEmpleadoValor(ByVal IdEmpleado As Int32, ByVal Fecha As String, ByVal Valor As Decimal) As DataTable
        Try
            Return ODatos.RecuperarFaltanteEmpleadoValor(IdEmpleado, Fecha, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFaltanteEmpleadoValor", "IdEmpleado: " & IdEmpleado.ToString() & " Fecha: " & Fecha & " Valor: " & Valor.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFaltanteEmpleadoValor", "IdEmpleado: " & IdEmpleado.ToString() & " Fecha: " & Fecha & " Valor: " & Valor.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExistenFaltantesParaCruzar(ByVal IdEmpleado As Int32, ByVal Fecha As String, ByVal Valor As Decimal) As Boolean
        Try
            Return ODatos.ExistenFaltantesParaCruzar(IdEmpleado, Fecha, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExistenFaltantesParaCruzar", "IdEmpleado: " & IdEmpleado.ToString() & " Fecha: " & Fecha & " Valor: " & Valor.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExistenFaltantesParaCruzar", "IdEmpleado: " & IdEmpleado.ToString() & " Fecha: " & Fecha & " Valor: " & Valor.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarConciliacion(ByVal IdSobrante As Int32, ByVal IdFaltante As Int32)
        Try
            ODatos.ActualizarConciliacion(IdSobrante, IdFaltante)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarConciliacion", "IdSobrante: " & IdSobrante.ToString() & " IdFaltante: " & IdFaltante.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarConciliacion", "IdSobrante: " & IdSobrante.ToString() & " IdFaltante: " & IdFaltante.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarConciliacion(ByVal IdSobrante As Int32, ByVal NroCuenta As String, ByVal Banco As String, ByVal FechaConsignacion As Date)
        Try
            ODatos.ActualizarConciliacion(IdSobrante, NroCuenta, Banco, FechaConsignacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarConciliacion", "IdSobrante: " & IdSobrante.ToString() & ", NroCuenta: " & NroCuenta & ", Banco: " & Banco & ", FechaConsignacion: " & FechaConsignacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarConciliacion", "IdSobrante: " & IdSobrante.ToString() & ", NroCuenta: " & NroCuenta & ", Banco: " & Banco & ", FechaConsignacion: " & FechaConsignacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region " CHEQUES TERPEL "

    Public Function RecuperarCodigoBancoEmisor() As DataSet
        Try
            Return ODatos.RecuperarCodigoBancoEmisor()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCodigoBancoEmisor", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCodigoBancoEmisor", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNombreEntidadAutorizadora() As IDataReader
        Try
            Return ODatos.RecuperarNombreEntidadAutorizadora()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNombreEntidadAutorizadora", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNombreEntidadAutorizadora", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEmpleadoAutorizacionCheque(ByVal numAutorizacion As Long) As IDataReader
        Try
            Return ODatos.RecuperarEmpleadoAutorizacionCheque(numAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEmpleadoAutorizacionCheque", "NumAutorizacion: " & numAutorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEmpleadoAutorizacionCheque", "NumAutorizacion: " & numAutorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarClientesIdentificados() As DataSet
        Try
            Return ODatos.RecuperarClientesIdentificados()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClientesIdentificados", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClientesIdentificados", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosClienteIdentificado(ByVal TipoBusqueda As Short, ByVal DatoBusqueda As String) As DataSet
        Try
            Return ODatos.RecuperarDatosClienteIdentificado(TipoBusqueda, DatoBusqueda)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosClienteIdentificado", "TipoBusqueda: " & TipoBusqueda & ", DatoBusqueda: " & DatoBusqueda, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosClienteIdentificado", "TipoBusqueda: " & TipoBusqueda & ", DatoBusqueda: " & DatoBusqueda, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVehiculosPorClienteIdentificado(ByVal IdCliente As Integer) As DataSet
        Try
            Return ODatos.RecuperarVehiculosPorClienteIdentificado(IdCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculosPorClienteIdentificado", "IdCliente: " & IdCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculosPorClienteIdentificado", "IdCliente: " & IdCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVehiculosPorClienteIdentificadoSinPrecio(ByVal IdCliente As Integer) As DataSet
        Try
            Return ODatos.RecuperarVehiculosPorClienteIdentificadoSinPrecio(IdCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculosPorClienteIdentificadoSinPrecio", "IdCliente: " & IdCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculosPorClienteIdentificadoSinPrecio", "IdCliente: " & IdCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosPorPrecioClienteCredito(ByVal IdPrecio As Integer) As DataSet
        Try
            Return ODatos.RecuperarProductosPorPrecioClienteCredito(IdPrecio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosPorPrecioClienteCredito", "IdPrecio: " & IdPrecio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosPorPrecioClienteCredito", "IdPrecio: " & IdPrecio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosPorPrecioClienteCreditoSinPrecio() As DataSet
        Try
            Return ODatos.RecuperarProductosPorPrecioClienteCreditoSinPrecio()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosPorPrecioClienteCreditoSinPrecio", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosPorPrecioClienteCreditoSinPrecio", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVehiculosPorPrecioCliente(ByVal IdPrecio As Integer) As DataSet
        Try
            Return ODatos.RecuperarVehiculosPorPrecioCliente(IdPrecio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculosPorPrecioCliente", "IdPrecio: " & IdPrecio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculosPorPrecioCliente", "IdPrecio: " & IdPrecio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPrecioClienteCredito(ByVal IdPrecio As Int32) As DataSet
        Try
            Return ODatos.RecuperarPrecioClienteCredito(IdPrecio)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPrecioClienteCredito", "IdPrecio: " & IdPrecio, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPrecioClienteCredito", "IdPrecio: " & IdPrecio, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarClienteCheque(ByVal IdCliente As Integer) As DataSet
        Try
            Return ODatos.RecuperarClienteCheque(IdCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClienteCheque", "IdCliente: " & IdCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClienteCheque", "IdCliente: " & IdCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarAutorizacionCheque(ByVal IdCliente As Integer, ByVal CodigoBanco As String, ByVal NumeroCheque As String, ByVal Entidad As String, ByVal AutorizacionEntidad As Long, ByVal ValorCheque As Decimal, ByVal ValorSuministro As Decimal, ByVal Placa As String, ByVal Valor As String) As Long
        Try
            Return ODatos.InsertarAutorizacionCheque(IdCliente, CodigoBanco, NumeroCheque, Entidad, AutorizacionEntidad, ValorCheque, ValorSuministro, Placa, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAutorizacionCheque", "IdCliente: " & IdCliente & ", CodigoBanco: " & CodigoBanco & ", NumeroCheque: " & NumeroCheque & ", Entidad: " & Entidad & ", AutorizacionEntidad: " & AutorizacionEntidad & ", ValorCheque: " & ValorCheque & ", ValorSuministro: " & ValorSuministro & ", Placa: " & Placa & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAutorizacionCheque", "IdCliente: " & IdCliente & ", CodigoBanco: " & CodigoBanco & ", NumeroCheque: " & NumeroCheque & ", Entidad: " & Entidad & ", AutorizacionEntidad: " & AutorizacionEntidad & ", ValorCheque: " & ValorCheque & ", ValorSuministro: " & ValorSuministro & ", Placa: " & Placa & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function InsertarAutorizacionChequeChile(ByVal NumeroCheque As String, ByVal NumeroValidacion As Long, ByVal ValorCheque As Decimal, ByVal ValorSuministro As Decimal, ByVal Placa As String, ByVal Valor As String, ByVal Rut As String) As Long
        Try
            Return ODatos.InsertarAutorizacionChequeChile(NumeroCheque, NumeroValidacion, ValorCheque, ValorSuministro, Placa, Valor, Rut)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAutorizacionChequeChile", "NumeroCheque: " & NumeroCheque & ", NumeroValidacion: " & NumeroValidacion & ", ValorCheque: " & ValorCheque & ", ValorCheque: " & ValorCheque & ",Placa: " & Placa & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAutorizacionChequeChile", "NumeroCheque: " & NumeroCheque & ", NumeroValidacion: " & NumeroValidacion & ", ValorCheque: " & ValorCheque & ", ValorCheque: " & ValorCheque & ",Placa: " & Placa & ", Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarTipodeVentaChile(ByVal Recibo As Int64) As Boolean
        Try
            Return ODatos.ValidarTipodeVentaChile(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTipodeVentaChile", "Recibo: " & Recibo.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTipodeVentaChile", "Recibo: " & Recibo.ToString(), "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Function ExisteDocumentoStorage(ByVal Documento As String) As Boolean
        Try
            Return ODatos.ExisteDocumentoStorage(Documento)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposFormaPago", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposFormaPago", "Documento: " & Documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function ValidarNumeroAutorizacionPlaca(ByVal numAutorizacion As Long, ByVal placa As String) As IDataReader
        Try
            Return ODatos.ValidarNumeroAutorizacionPlaca(numAutorizacion, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarNumeroAutorizacionPlaca", "NumAutorizacion: " & CStr(numAutorizacion) & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarNumeroAutorizacionPlaca", "NumAutorizacion: " & CStr(numAutorizacion) & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarVehiculoCliente(ByVal NumeroDocumento As String, ByVal placa As String, ByVal NroCupon As String) As IDataReader
        Try
            Return ODatos.ValidarVehiculoCliente(NumeroDocumento, placa, NroCupon)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVehiculoCliente", "NumeroDocumento: " & NumeroDocumento & ", Placa: " & placa & "NroCupon: " & NroCupon, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVehiculoCliente", "NumeroDocumento: " & NumeroDocumento & ", Placa: " & placa & "NroCupon: " & NroCupon, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarVehiculoVale(ByVal NroVale As String, ByVal placa As String) As IDataReader
        Try
            Return ODatos.ValidarVehiculoVale(NroVale, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVehiculoVale", "Numero Vale: " & NroVale & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVehiculoVale", "Numero Vale: " & NroVale & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarValorChequePorPlaca(ByVal placa As String, ByVal numAutorizacion As String, ByVal idEstacion As Int16) As Decimal
        Try
            Return ODatos.RecuperarValorChequePorPlaca(placa, numAutorizacion, idEstacion)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorChequePorPlaca", "IdEsatcion: " & idEstacion & "NumAutorizacion: " & numAutorizacion & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorChequePorPlaca", "IdEsatcion: " & idEstacion & "NumAutorizacion: " & numAutorizacion & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function





    Public Function RecuperarValorChequePorCodigo(ByVal numAutorizacion As String) As Decimal
        Try
            Return ODatos.RecuperarValorChequePorCodigo(numAutorizacion)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorChequePorCodigo", "NumAutorizacion: " & numAutorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorChequePorCodigo", "NumAutorizacion: " & numAutorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarValorChequePorPlaca(ByVal placa As String, ByVal numAutorizacion As String) As Decimal
        Try
            Return ODatos.RecuperarValorChequePorPlaca(placa, numAutorizacion)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorChequePorPlaca", "NumAutorizacion: " & numAutorizacion & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorChequePorPlaca", "NumAutorizacion: " & numAutorizacion & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarChequePlaca(ByVal placa As String, ByVal recibo As Long) As Boolean
        Try
            Return ODatos.ValidarChequePlaca(placa, recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarChequePlaca", "Recibo: " & recibo & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarChequePlaca", "Recibo: " & recibo & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTiposFormaPago(ByVal IdFormaPago As Int16) As IDataReader
        Try
            Return ODatos.RecuperarTiposFormaPago(IdFormaPago)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTiposFormaPago", "IdFormaPago: " & CStr(IdFormaPago), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTiposFormaPago", "IdFormaPago: " & CStr(IdFormaPago), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormaPagoTerpel(ByVal Recibo As Long) As IDataReader
        Try
            Return ODatos.RecuperarFormaPagoTerpel(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaPagoTerpel", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaPagoTerpel", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function RecuperarFormaPagoTerpelEstacionAfiliada(ByVal Recibo As Long) As IDataReader
        Try
            Return ODatos.RecuperarFormaPagoTerpelEstacionAfiliada(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaPagoTerpelEstacionAfiliada", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaPagoTerpelEstacionAfiliada", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarFormaPagoCanastilla() As IDataReader
        Try
            Return ODatos.RecuperarFormaPagoCanastilla()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaPagoCanastilla", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaPagoCanastilla", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormaPagoAbonoExtraGazel() As IDataReader
        Try
            Return ODatos.RecuperarFormaPagoAbonoExtraGazel()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaPagoAbonoExtraGazel", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaPagoAbonoExtraGazel", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarFormaPagoCanastillaPrepago() As IDataReader
        Try
            Return ODatos.RecuperarFormaPagoCanastillaPrepago()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormaPagoCanastillaPrepago", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormaPagoCanastillaPrepago", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function





    Public Sub ActualizarChequeVenta(ByVal numAutorizacion As Long, ByVal placa As String)
        Try
            ODatos.ActualizarChequeVenta(numAutorizacion, placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarChequeVenta", "NumAutorizacion: " & numAutorizacion & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarChequeVenta", "NumAutorizacion: " & numAutorizacion & ", Placa: " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    'Public Sub ActualizarChequeVentaChile(ByVal Recibo As Long, ByVal placa As String, ByVal ValorCheque As Decimal, ByVal Rut As String, ByVal NumeroValidacion As Integer, ByVal NumeroCheque As String)
    '    Try
    '        ODatos.ActualizarChequeVentaChile(Recibo, placa, ValorCheque, Rut, NumeroValidacion, NumeroCheque)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "ActualizarChequeVenta", "Recibo: " & Recibo & ", Placa: " & placa & ", ValorCheque: " & ValorCheque & ", NumeroValidacion: " & NumeroValidacion & ", NumeroCheque: " & NumeroCheque, "FallaStoredProcedure")
    '        Throw 
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "ActualizarChequeVenta", "Recibo: " & Recibo & ", Placa: " & placa & ", ValorCheque: " & ValorCheque & ", NumeroValidacion: " & NumeroValidacion & ", NumeroCheque: " & NumeroCheque, "FallaStoredProcedure")
    '        Throw 
    '    End Try
    'End Sub

    Public Function RecuperarInformacionCheque(ByVal IdCheque As Long) As DataTable
        Try
            Return ODatos.RecuperarInformacionCheque(IdCheque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionCheque", "IdCheque: " & IdCheque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionCheque", "IdCheque: " & IdCheque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionTrasladoCombustible(ByVal IdTraslado As Int32) As DataTable
        Try
            Return ODatos.RecuperarInformacionTrasladoCombustible(IdTraslado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionTrasladoCombustible", "IdTraslado: " & IdTraslado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionTrasladoCombustible", "IdTraslado: " & IdTraslado, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarDistribucionCombustible(ByVal documento As String, ByVal codTanque As String, ByVal CodProducto As Int32, ByVal cantidadDocumento As Nullable(Of Decimal), ByVal cantidadPorOperacion As Nullable(Of Decimal), ByVal cantidadPorRecibo As Nullable(Of Decimal))
        Try
            ODatos.ActualizarDistribucionCombustible(documento, codTanque, CodProducto, cantidadDocumento, cantidadPorOperacion, cantidadPorRecibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDistribucionCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDistribucionCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub ActualizarDistribucionCombustible(ByVal documento As String, ByVal codTanque As String, ByVal CodProducto As Int32, ByVal cantidadDocumento As Nullable(Of Decimal), ByVal cantidadPorOperacion As Nullable(Of Decimal), ByVal cantidadPorRecibo As Nullable(Of Decimal), ByVal cantidadPorVetas As Nullable(Of Decimal))
        Try
            ODatos.ActualizarDistribucionCombustible(documento, codTanque, CodProducto, cantidadDocumento, cantidadPorOperacion, cantidadPorRecibo, cantidadPorVetas)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDistribucionCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDistribucionCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Sub ActualizarDistribucionCombustible(ByVal documento As String, ByVal codTanque As String, ByVal CodProducto As Int32, ByVal cantidadDocumento As Nullable(Of Decimal), ByVal cantidadPorOperacion As Nullable(Of Decimal), ByVal cantidadPorRecibo As Nullable(Of Decimal), ByVal cantidadPorVetas As Nullable(Of Decimal), ByVal IdEstacion As Integer)
        Try
            ODatos.ActualizarDistribucionCombustible(documento, codTanque, CodProducto, cantidadDocumento, cantidadPorOperacion, cantidadPorRecibo, cantidadPorVetas)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarDistribucionCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarDistribucionCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Sub





    Public Function RecuperarInformacionReciboCombustible(ByVal documento As String) As IDataReader
        Try
            Return ODatos.RecuperarInformacionReciboCombustible(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionReciboCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionReciboCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarInformacionReciboCombustible(ByVal documento As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarInformacionReciboCombustible(documento, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionReciboCombustible", "IdEstacion: " & idEstacion & "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionReciboCombustible", "IdEstacion: " & idEstacion & "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosReciboCombustible(ByVal documento As String) As IDataReader
        Try
            Return ODatos.RecuperarProductosReciboCombustible(documento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosReciboCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosReciboCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarProductosReciboCombustible(ByVal documento As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarProductosReciboCombustible(documento, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosReciboCombustible", "IdEstacion: " & idEstacion & "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosReciboCombustible", "IdEstacion: " & idEstacion & "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionTrasladoCanastilla(ByVal IdTraslado As Int32) As DataTable
        Try
            Return ODatos.RecuperarInformacionTrasladoCanastilla(IdTraslado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionTrasladoCanastilla", "IdTraslado: " & IdTraslado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionTrasladoCanastilla", "IdTraslado: " & IdTraslado, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionDetalleTrasladoCombustible(ByVal IdTraslado As Int32) As DataTable
        Try
            Return ODatos.RecuperarInformacionDetalleTrasladoCombustible(IdTraslado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionDetalleTrasladoCombustible", "IdTraslado: " & IdTraslado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionDetalleTrasladoCombustible", "IdTraslado: " & IdTraslado, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionDetalleReciboCombustible(ByVal documento As String, ByVal idProducto As Int32) As IDataReader
        Try
            Return ODatos.RecuperarInformacionDetalleReciboCombustible(documento, idProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionDetalleReciboCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionDetalleReciboCombustible", "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarInformacionDetalleReciboCombustible(ByVal documento As String, ByVal idProducto As Int32, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarInformacionDetalleReciboCombustible(documento, idProducto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionDetalleReciboCombustible", "IdEstacion: " & idEstacion & "Documento: " & documento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionDetalleReciboCombustible", "IdEstacion: " & idEstacion & "Documento: " & documento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionDetalleTrasladoCanastilla(ByVal IdTraslado As Int32) As DataTable
        Try
            Return ODatos.RecuperarInformacionDetalleTrasladoCanastilla(IdTraslado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionDetalleTrasladoCanastilla", "IdTraslado: " & IdTraslado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionDetalleTrasladoCanastilla", "IdTraslado: " & IdTraslado, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarAlarmaSobreTasa(ByVal IdAlarma As Int32) As DataTable
        Try
            Return ODatos.RecuperarAlarmaSobreTasa(IdAlarma)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarAlarmaSobreTasa", "IdAlarma: " & IdAlarma, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarAlarmaSobreTasa", "IdAlarma: " & IdAlarma, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarAlarmaVeederRoot(ByVal IdAlarma As Int32) As DataTable
        Try
            Return ODatos.RecuperarAlarmaVeederRoot(IdAlarma)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarAlarmaVeederRoot", "IdAlarma: " & IdAlarma, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarAlarmaVeederRoot", "IdAlarma: " & IdAlarma, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionMovimientoKardex(ByVal IdKardex As Long) As IDataReader
        Try
            Return ODatos.RecuperarInformacionMovimientoKardex(IdKardex)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionMovimientoKardex", "IdKardex: " & IdKardex, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionMovimientoKardex", "IdKardex: " & IdKardex, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionVentaCombustibleFomplus(ByVal Recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarInformacionVentaCombustibleFomplus(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaCombustibleFomplus", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaCombustibleFomplus", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionNotaCreditoCanastillaFomplus(ByVal IdNotaCredito As Int32) As IDataReader
        Try
            Return ODatos.RecuperarInformacionNotaCreditoCanastillaFomplus(IdNotaCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionNotaCreditoCanastillaFomplus", "IdNotaCredito: " & IdNotaCredito, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionNotaCreditoCanastillaFomplus", "IdNotaCredito: " & IdNotaCredito, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarInformacionVentaCanastillaFomplus(ByVal Recibo As Int32) As IDataReader
        Try
            Return ODatos.RecuperarInformacionVentaCanastillaFomplus(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaCanastillaFomplus", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaCanastillaFomplus", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarInformacionGeneralFacturaConsolidadaFomplus(ByVal IdDocumento As Int32) As IDataReader
        Try
            Return ODatos.RecuperarInformacionGeneralFacturaConsolidadaFomplus(IdDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionGeneralFacturaConsolidadaFomplus", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionGeneralFacturaConsolidadaFomplus", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionFacturaConsolidadaFomplus(ByVal IdDocumento As Integer) As DataTable
        Try
            Return ODatos.RecuperarInformacionFacturaConsolidadaFomplus(IdDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionFacturaConsolidadaFomplus", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionFacturaConsolidadaFomplus", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarInformacionInvCombustibleFomplus(ByVal IdKardex As Int64) As IDataReader
        Try
            Return ODatos.RecuperarInformacionInvCombustibleFomplus(IdKardex)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionInvCombustibleFomplus", "IdKardex: " & IdKardex, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionInvCombustibleFomplus", "IdKardex: " & IdKardex, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionInvCanastillaFomplus(ByVal IdMovimiento As Int32) As IDataReader
        Try
            Return ODatos.RecuperarInformacionInvCanastillaFomplus(IdMovimiento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionInvCanastillaFomplus", "IdMovimiento: " & IdMovimiento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionInvCanastillaFomplus", "IdMovimiento: " & IdMovimiento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarPagoFomplus(ByVal Cedula As Integer, ByVal PrefijoFactura As String, ByVal NumeroFactura As String, ByVal Valor As Double, ByVal TipoMovimiento As Int16, ByVal FechaFactura As DateTime)
        Try
            ODatos.InsertarPagoFomplus(Cedula, PrefijoFactura, NumeroFactura, Valor, TipoMovimiento, FechaFactura)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPagoFomplus", "Cedula: " & Cedula & "Prefijo: " & PrefijoFactura & "Numero Factura: " & NumeroFactura & "Valor: " & Valor & "TipoMovimiento: " & TipoMovimiento & "FechaFactura: " & FechaFactura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPagoFomplus", "Cedula: " & Cedula & "Prefijo: " & PrefijoFactura & "Numero Factura: " & NumeroFactura & "Valor: " & Valor & "TipoMovimiento: " & TipoMovimiento & "FechaFactura: " & FechaFactura, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarInformacionCierreDia(ByVal Dia As Date) As IDataReader
        Try
            Return ODatos.RecuperarInformacionCierreDia(Dia)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionCierreDia", "Dia: " & Dia, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionCierreDia", "Dia: " & Dia, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarInformacionCierreDia(ByVal Dia As Date, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarInformacionCierreDia(Dia, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionCierreDia", "IdEstacion: " & idEstacion & "Dia: " & Dia, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionCierreDia", "IdEstacion: " & idEstacion & "Dia: " & Dia, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionNotificacionKardex(ByVal IdNotificacion As Long) As IDataReader
        Try
            Return ODatos.RecuperarInformacionNotificacionKardex(IdNotificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionNotificacionKardex", "IdNotificacion: " & IdNotificacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionNotificacionKardex", "IdNotificacion: " & IdNotificacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionCambioPrecioFallido(ByVal IdHistoricoFallido As Int32) As DataSet
        Try
            Return ODatos.RecuperarInformacionCambioPrecioFallido(IdHistoricoFallido)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionCambioPrecioFallido", "IdHistoricoFallido: " & IdHistoricoFallido, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionCambioPrecioFallido", "IdHistoricoFallido: " & IdHistoricoFallido, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Productos Autorizados"
    Public Function FueUtilizadaClaveCambioPrecios(ByVal clave As String) As Boolean
        Try
            Return ODatos.FueUtilizadaClaveCambioPrecios(clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FueUtilizadaClaveCambioPrecios", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FueUtilizadaClaveCambioPrecios", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdProductoCombustible(ByVal codigo As Int32) As Int32
        Try
            Return ODatos.RecuperarIdProductoCombustible(codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdProductoCombustible", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdProductoCombustible", "codigo: " & codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Canastilla Identificado     "
    Public Function ValidarVentaCanastilla(ByVal TipoAutorizacion As Short, ByVal NumeroIdentificacion As String) As IDataReader
        Try
            Return ODatos.ValidarVentaCanastilla(TipoAutorizacion, NumeroIdentificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVentaCanastilla", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVentaCanastilla", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidarVentaCanastilla(ByVal TipoAutorizacion As Short, ByVal NumeroIdentificacion As String, ByVal idEstacion As Int16) As IDataReader
        Try
            Return ODatos.ValidarVentaCanastilla(TipoAutorizacion, NumeroIdentificacion, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVentaCanastilla", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVentaCanastilla", "IdEstacion: " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidaRestriccionesCanastilla(ByVal Placa As String, ByVal CodProducto As Integer) As DataSet
        Try
            Return ODatos.ValidaRestriccionesCanastilla(Placa, CodProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidaRestriccionesCanastilla", "Placa: " & Placa & ", CodProducto: " & CodProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidaRestriccionesCanastilla", "Placa: " & Placa & ", CodProducto: " & CodProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ValidaRestriccionesCanastilla(ByVal rom As String, ByVal CodProducto As Integer, ByVal idEstacion As Int16) As DataSet
        Try
            Return ODatos.ValidaRestriccionesCanastilla(rom, CodProducto, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidaRestriccionesCanastilla", "IdEstacion: " & idEstacion & "Rom: " & rom & ", CodProducto: " & CodProducto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidaRestriccionesCanastilla", "IdEstacion: " & idEstacion & "Rom: " & rom & ", CodProducto: " & CodProducto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEncabezadoCanastillaEmpleado(ByVal Cara As Int16) As DataTable
        Try
            Return ODatos.RecuperarEncabezadoCanastillaEmpleado(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoCanastillaEmpleado", "IdCara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoCanastillaEmpleado", "IdCara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarEncabezadoCanastillaEmpleado(ByVal Cara As Int16, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarEncabezadoCanastillaEmpleado(Cara, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoCanastillaEmpleado", "IdEstacion: " & idEstacion & "IdCara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoCanastillaEmpleado", "IdEstacion: " & idEstacion & "IdCara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosProducto(ByVal Codigo As Int16) As DataTable
        Try
            Return ODatos.RecuperarDatosProducto(Codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosProducto", "CodProducto: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosProducto", "CodProducto: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarDatosProducto(ByVal Codigo As Int16, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarDatosProducto(Codigo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosProducto", "IdEstacion: " & idEstacion & "CodProducto: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosProducto", "IdEstacion: " & idEstacion & "CodProducto: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    'Public Sub InsertarVentaCanastillaDetalle(ByVal IdVenta As Int32, ByVal Items As List(Of gasolutions.DataAccess.DetalleItem))
    '    Try
    '        ODatos.InsertarVentaCanastillaDetalle(IdVenta, Items)
    '    Catch ex As SqlClient.SqlException
    '        LogFallas.ReportarError(ex, "InsertarVentaCanastilla", "IdTurno: " & IdTurno, "FallaStoredProcedure")
    '        Throw 
    '    Catch ex As System.Exception
    '        LogFallas.ReportarError(ex, "InsertarVentaCanastilla", "IdTurno: " & IdTurno, "FallaStoredProcedure")
    '        Throw 
    '    End Try
    'End Sub

#End Region

#Region "Pedidos Canastilla"
    Public Sub CargarPedidosCanastilla(ByVal ruta As String)
        Try
            ODatos.CargarPedidosCanastilla(ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarPedidosCanastilla", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarPedidosCanastilla", "ruta: " & ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "   Consignacion de Transportadora  "

    Public Function RecuperarSobresParaConsignar() As DataTable
        Try
            Return ODatos.RecuperarSobresParaConsignar()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarPedidosCanastilla", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSobresParaConsignar", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTransportadoras() As DataTable
        Try
            Return ODatos.RecuperarTransportadoras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTransportadoras", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTransportadoras", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarBancos() As DataTable
        Try
            Return ODatos.RecuperarBancos()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarBancos", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarBancos", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ExisteRemesa(ByVal Remesa As Integer) As Boolean
        Try
            Return ODatos.ExisteRemesa(Remesa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteRemesa", "Remesa: " & Remesa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteRemesa", "Remesa: " & Remesa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTransportadorasDataAdmin() As DataSet
        Try
            Return ODatos.RecuperarTransportadorasDataAdmin()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTransportadorasDataAdmin", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTransportadorasDataAdmin", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTransportadoraPorId(ByVal idTransportadora As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTransportadoraPorId(idTransportadora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTransportadoraPorId", "idTransportadora: " & idTransportadora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTransportadoraPorId", "idTransportadora: " & idTransportadora, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarTransportadora(ByVal idTransportadora As Int32)
        Try
            ODatos.EliminarTransportadora(idTransportadora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarTransportadora", "idTransportadora: " & idTransportadora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarTransportadora", "idTransportadora: " & idTransportadora, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ActualizarTransportadora(ByVal idTransportadora As Nullable(Of Int32), ByVal Nombre As String, ByVal Nit As String, ByVal EsActiva As Boolean) As Int32
        Try
            Return ODatos.ActualizarTransportadora(idTransportadora, Nombre, Nit, EsActiva)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarTransportadora", "Nombre: " & Nombre & ", Nit: " & Nit & ", EsActiva: " & EsActiva, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarTransportadora", "Nombre: " & Nombre & ", Nit: " & Nit & ", EsActiva: " & EsActiva, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ActualizarResolucion(ByVal IdResolucion As Nullable(Of Int32), ByVal NroResolucion As String, ByVal Prefijo As String, ByVal NroInicial As Int32, ByVal NroFinal As Int32, ByVal FechaExpedicion As DateTime, ByVal FechaVencimiento As DateTime, ByVal NroResolucionGContribuyente As String, ByVal FechaResolucionGContribuyente As DateTime, ByVal NroResolucionAutoretenedor As String, ByVal FechaResolucionAutoretenedor As DateTime) As Int32
        Try
            Return ODatos.ActualizarResolucion(IdResolucion, NroResolucion, Prefijo, NroInicial, NroFinal, FechaExpedicion, FechaVencimiento, NroResolucionGContribuyente, FechaResolucionGContribuyente, NroResolucionAutoretenedor, FechaResolucionAutoretenedor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarResolucion", "NroResolucion: " & NroResolucion & ", Prefijo: " & Prefijo & ", NroInicial: " & NroInicial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarResolucion", "NroResolucion: " & NroResolucion & ", Prefijo: " & Prefijo & ", NroInicial: " & NroInicial, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarResolucion(ByVal idResolucion As Int32)
        Try
            ODatos.EliminarResolucion(idResolucion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarResolucion", "idResolucion: " & idResolucion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarResolucion", "idResolucion: " & idResolucion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarResolucionesDataAdmin() As DataSet
        Try
            Return ODatos.RecuperarResolucionesDataAdmin()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarResolucionesDataAdmin", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarResolucionesDataAdmin", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarResolucionPorId(ByVal idResolucion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarResolucionPorId(idResolucion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarResolucionPorId", "idResolucion: " & idResolucion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarResolucionPorId", "idResolucion: " & idResolucion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarConsignacionTransportadora(ByVal Fecha As String, ByVal NoPicos As Int32, ByVal ValorPicos As Decimal,
                ByVal NoSobres As Int32, ByVal ValorSobres As Decimal, ByVal IdTransportadora As Int32, ByVal Consignaciones As String) As Int32
        Try
            Return ODatos.InsertarConsignacionTransportadora(Fecha, NoPicos, ValorPicos, NoSobres, ValorSobres, IdTransportadora, Consignaciones)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarConsignacionTransportadora", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarConsignacionTransportadora", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarConsignacionTransportadoraMoneda(ByVal Fecha As String, ByVal NoPicos As Int32, ByVal ValorPicos As Decimal,
              ByVal NoSobres As Int32, ByVal ValorSobres As Decimal, ByVal IdTransportadora As Int32, ByVal Consignaciones As String,
              ByVal IdBanco As Int16, ByVal Remesa As Int32, ByVal IdMoneda As Int16) As Int32
        Try
            Return ODatos.InsertarConsignacionTransportadoraMoneda(Fecha, NoPicos, ValorPicos, NoSobres, ValorSobres, IdTransportadora, Consignaciones, IdBanco, Remesa, IdMoneda)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarConsignacionTransportadoraMoneda", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarConsignacionTransportadoraMoneda", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function InsertarConsignacioTransportadora(ByVal Fecha As String, ByVal NoPicos As Int32, ByVal ValorPicos As Decimal,
        ByVal NoSobres As Int32, ByVal ValorSobres As Decimal, ByVal IdTransportadora As Int32, ByVal Consignaciones As String, ByVal Cheques As String) As Int32
        Try
            Return ODatos.InsertarConsignacionTransportadora(Fecha, NoPicos, ValorPicos, NoSobres, ValorSobres, IdTransportadora, Consignaciones, Cheques)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarConsignacionTransportadora", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarConsignacionTransportadora", "", "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Function RecuperarIdConsignacion() As Int64
        Try
            Return ODatos.RecuperarIdConsignacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdConsignacion", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdConsignacion", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsigancionSobreIdConsignacion(ByVal IdConsignacion As Int64) As DataTable
        Try
            Return ODatos.RecuperarConsigancionSobreIdConsignacion(IdConsignacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsigancionSobreIdConsignacion", "IdConsignacion : " & IdConsignacion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsigancionSobreIdConsignacion", "IdConsignacion : " & IdConsignacion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosConsigancionId(ByVal IdConsignacion As Int64) As DataTable
        Try
            Return ODatos.RecuperarDatosConsigancionId(IdConsignacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosConsigancionId", "IdConsignacion : " & IdConsignacion.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosConsigancionId", "IdConsignacion : " & IdConsignacion.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "    Devolucion de Factura Canastilla Terpel     "

    Public Function AnularDocumento(ByVal Prefijo As String, ByVal Numero As Int64, ByVal Empleado As String, ByVal Clave As String) As Int64
        Try
            Return ODatos.AnularDocumento(Prefijo, Numero, Empleado, Clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AnularDocumento", "Prefijo : " & Prefijo & " Numero: " & Numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AnularDocumento", "Prefijo : " & Prefijo & " Numero: " & Numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function AnularDocumento(ByVal Prefijo As String, ByVal Numero As Int64, ByVal Empleado As String, ByVal Clave As String, ByVal idEstacion As Int16) As Int64
        Try
            Return ODatos.AnularDocumento(Prefijo, Numero, Empleado, Clave, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "AnularDocumento", "IdEstacion: " & idEstacion & "Prefijo : " & Prefijo & " Numero: " & Numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "AnularDocumento", "IdEstacion: " & idEstacion & "Prefijo : " & Prefijo & " Numero: " & Numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "       Registrar Gerenciamiento Canastilla Combustible     "

    Public Sub InsertarVentaGerenciamientoCanastila(ByVal IdAutorizacion As String, ByVal IdVenta As Int64, ByVal EsCanastilla As Boolean, ByVal EsLocal As Boolean, ByVal EsSobreGiro As Boolean, ByVal IdExtraCupo As Long, ByVal Rom As String)
        Try
            ODatos.InsertarVentaGerenciamientoCanastila(IdAutorizacion, IdVenta, EsCanastilla, EsLocal, EsSobreGiro, IdExtraCupo, Rom)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGerenciamientoCanastila", "IdAutorizacion : " & IdAutorizacion & " IdVenta: " & IdVenta.ToString & " Sobregiro: " & EsSobreGiro.ToString & "extracupo: " & IdExtraCupo & " , rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGerenciamientoCanastila", "IdAutorizacion : " & IdAutorizacion & " IdVenta: " & IdVenta.ToString & " Sobregiro: " & EsSobreGiro.ToString & "extracupo: " & IdExtraCupo & " , rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVentaGerenciamientoCanastila(ByVal IdAutorizacion As String, ByVal IdVenta As Int64, ByVal EsCanastilla As Boolean, ByVal EsLocal As Boolean, ByVal EsSobreGiro As Boolean, ByVal IdExtraCupo As Long, ByVal Rom As String, ByVal Contrato As String, ByVal CodigoCentroCosto As String, ByVal NombreCentroCosto As String)
        Try
            ODatos.InsertarVentaGerenciamientoCanastila(IdAutorizacion, IdVenta, EsCanastilla, EsLocal, EsSobreGiro, IdExtraCupo, Rom, Contrato, CodigoCentroCosto, NombreCentroCosto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGerenciamientoCanastila", "IdAutorizacion : " & IdAutorizacion & " IdVenta: " & IdVenta.ToString & " Sobregiro: " & EsSobreGiro.ToString & "extracupo: " & IdExtraCupo & " , rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGerenciamientoCanastila", "IdAutorizacion : " & IdAutorizacion & " IdVenta: " & IdVenta.ToString & " Sobregiro: " & EsSobreGiro.ToString & "extracupo: " & IdExtraCupo & " , rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVentaGerenciamientoCanastila(ByVal IdAutorizacion As String, ByVal IdVenta As Int64, ByVal EsCanastilla As Boolean, ByVal EsLocal As Boolean, ByVal EsSobreGiro As Boolean, ByVal IdExtraCupo As Long, ByVal Rom As String, ByVal idEstacion As Int16)
        Try
            ODatos.InsertarVentaGerenciamientoCanastila(IdAutorizacion, IdVenta, EsCanastilla, EsLocal, EsSobreGiro, IdExtraCupo, Rom, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVentaGerenciamientoCanastila", "IdEstacion: " & idEstacion & "IdAutorizacion : " & IdAutorizacion & " IdVenta: " & IdVenta.ToString & " Sobregiro: " & EsSobreGiro.ToString & "extracupo: " & IdExtraCupo & " , rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVentaGerenciamientoCanastila", "IdEstacion: " & idEstacion & "IdAutorizacion : " & IdAutorizacion & " IdVenta: " & IdVenta.ToString & " Sobregiro: " & EsSobreGiro.ToString & "extracupo: " & IdExtraCupo & " , rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

#End Region

#Region "   Información de TaskManager  "
    Public Function RecuperarFechaUltimaGeneracionFactura() As DataTable
        Try
            Return ODatos.RecuperarFechaUltimaGeneracionFactura()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFechaUltimaGeneracionFactura", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFechaUltimaGeneracionFactura", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Carga Inicial de Datos    "

    Public Function RecuperarSurtidoresPorIdIsla(ByVal IdIsla As Int16) As DataTable
        Try
            Return ODatos.RecuperarSurtidoresPorIdIsla(IdIsla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSurtidoresPorIdIsla", "IdIsla: " & IdIsla.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSurtidoresPorIdIsla", "IdIsla: " & IdIsla.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarManguerasPorIdSurtidor(ByVal IdSurtidor As Int16) As DataTable
        Try
            Return ODatos.RecuperarManguerasPorIdSurtidor(IdSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarManguerasPorIdSurtidor", "IdSurtidor: " & IdSurtidor.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarManguerasPorIdSurtidor", "IdSurtidor: " & IdSurtidor.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLecturasPorIdManguera(ByVal IdManguera As Int16) As DataTable
        Try
            Return ODatos.RecuperarLecturasPorIdManguera(IdManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasPorIdManguera", "IdManguera: " & IdManguera.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasPorIdManguera", "IdManguera: " & IdManguera.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarStockPorIdTanque(ByVal IdTanque As Int16) As DataTable
        Try
            Return ODatos.RecuperarStockPorIdTanque(IdTanque)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarStockPorIdTanque", "IdTanque: " & IdTanque.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarStockPorIdTanque", "IdTanque: " & IdTanque.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "   Tipo Vehiculo   "

    Public Function RecuperarTipoVehiculo() As IDataReader
        Try
            Return ODatos.RecuperarTipoVehiculo()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoVehiculo", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoVehiculo", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarRestriccionTipoVehiculoEnIsla(ByVal cara As Short) As IDataReader
        Try
            Return ODatos.ValidarRestriccionTipoVehiculoEnIsla(cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoEnIsla", "Cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoEnIsla", "Cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarRestriccionTipoVehiculoNoIdentificadoEnIsla(ByVal cara As Short, Optional ByVal idEstacion As Int16 = 0) As Boolean
        Try
            If idEstacion = 0 Then
                Return ODatos.ValidarRestriccionTipoVehiculoNoIdentificadoEnIsla(cara)
            Else
                Return ODatos.ValidarRestriccionTipoVehiculoNoIdentificadoEnIsla(cara, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoNoIdentificadoEnIsla", "IdEstacion: " & idEstacion & "Cara: " & cara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoNoIdentificadoEnIsla", "IdEstacion: " & idEstacion & "Cara: " & cara, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoNoIdentificadoEnIsla", "IdEstacion: " & idEstacion & "Cara: " & cara, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoNoIdentificadoEnIsla", "IdEstacion: " & idEstacion & "Cara: " & cara, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function

    Public Sub ValidarRestriccionTipoVehiculoIdentificadoEnIsla(ByVal cara As Short, ByVal placa As String, Optional ByVal idEstacion As Int16 = 0)
        Try
            If IdEstacion = 0 Then
                ODatos.ValidarRestriccionTipoVehiculoIdentificadoEnIsla(cara, placa)
            Else
                ODatos.ValidarRestriccionTipoVehiculoIdentificadoEnIsla(cara, placa, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If IdEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoIdentificadoEnIsla", "Cara: " & cara & ", Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoIdentificadoEnIsla", " IdEstacion " & idEstacion & "Cara: " & cara & ", Placa: " & placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoIdentificadoEnIsla", "Cara: " & cara & ", Placa: " & placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "ValidarRestriccionTipoVehiculoIdentificadoEnIsla", " IdEstacion " & idEstacion & "Cara: " & cara & ", Placa: " & placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Sub

#End Region

#Region "   Recepcion de Productos de Canastilla    "

    Public Sub InsertarMovimientoDetalleCostoTmp(ByVal NombreEquipo As String, ByVal Producto As Int16, ByVal Cantidad As Int16, ByVal CodProveedor As String, ByVal Costo As Decimal)
        Try

            ODatos.InsertarMovimientoDetalleCostoTmp(NombreEquipo, Producto, Cantidad, CodProveedor, Costo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMovimientoDetalleCostoTmp", "NombreEquipo: " & NombreEquipo & " Producto: " & Producto.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMovimientoDetalleCostoTmp", "NombreEquipo: " & NombreEquipo & " Producto: " & Producto.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarProveedores() As DataTable
        Try

            Return ODatos.RecuperarProveedores()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProveedores", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProveedores", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosProveedor(ByVal Codigo As String) As DataTable
        Try
            Return ODatos.RecuperarProductosProveedor(Codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosProveedor", "Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosProveedor", "Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarMovimientoDetalleCostoTmp(ByVal NombreEquipo As String)
        Try
            'Dim oHelper As New Helper()
            ODatos.EliminarMovimientoDetalleCostoTmp(NombreEquipo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarMovimientoDetalleCostoTmp", "NombreEquipo: " & NombreEquipo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarMovimientoDetalleCostoTmp", "NombreEquipo: " & NombreEquipo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function InsertarMovimientoCosto(ByVal numeroDocumento As String, ByVal idEstacionOrigen As Int16, ByVal idEstacionDestino As Int16, ByVal idTipoMovimiento As Int32, ByVal observaciones As String, ByVal NombreEquipo As String, ByVal idTipoDocumento As Int32, Optional ByVal EsCombustible As Boolean = False) As Int32
        Try
            Dim IdMovimiento As Integer

            IdMovimiento = ODatos.InsertarMovimientoCosto(numeroDocumento, idEstacionOrigen, idEstacionDestino, idTipoMovimiento, observaciones, NombreEquipo, idTipoDocumento, EsCombustible)
            Return IdMovimiento

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMovimiento", "Numero Documento: " & numeroDocumento & ", Id Estacion Origen: " & idEstacionOrigen & ", Id Estacion Destino: " & idEstacionDestino & ", Id Tipo Movimiento: " & idTipoMovimiento & ", Observaciones: " & observaciones, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMovimiento", "Numero Documento: " & numeroDocumento & ", Id Estacion Origen: " & idEstacionOrigen & ", Id Estacion Destino: " & idEstacionDestino & ", Id Tipo Movimiento: " & idTipoMovimiento & ", Observaciones: " & observaciones, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarMovimientoCostoCargaInicial(ByVal numeroDocumento As String, ByVal idEstacionOrigen As Int16, ByVal idEstacionDestino As Int16, ByVal idTipoMovimiento As Int32, ByVal observaciones As String, ByVal NombreEquipo As String, ByVal idTipoDocumento As Int32, Optional ByVal EsCombustible As Boolean = False)
        Try
            ODatos.InsertarMovimientoCostoCargaInicial(numeroDocumento, idEstacionOrigen, idEstacionDestino, idTipoMovimiento, observaciones, NombreEquipo, idTipoDocumento, EsCombustible)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMovimientoCostoCargaInicial", "Numero Documento: " & numeroDocumento & ", Id Estacion Origen: " & idEstacionOrigen & ", Id Estacion Destino: " & idEstacionDestino & ", Id Tipo Movimiento: " & idTipoMovimiento & ", Observaciones: " & observaciones, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMovimientoCostoCargaInicial", "Numero Documento: " & numeroDocumento & ", Id Estacion Origen: " & idEstacionOrigen & ", Id Estacion Destino: " & idEstacionDestino & ", Id Tipo Movimiento: " & idTipoMovimiento & ", Observaciones: " & observaciones, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub RecuperarValidacionCostoArticulo(ByVal Codigo As String, ByVal ValorUnitario As Decimal)
        Try
            ODatos.RecuperarValidacionCostoArticulo(Codigo, ValorUnitario)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValidacionCostoArticulo", "Codigo: " & Codigo & ", ValorUnitario: " & ValorUnitario.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValidacionCostoArticulo", "Codigo: " & Codigo & ", ValorUnitario: " & ValorUnitario.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Impresiones"
    Public Function RecuperarValorIvaImpresionFacturaClienteTerpel(ByVal Recibo As Double) As IDataReader

        Try
            Return ODatos.RecuperarValorIvaImpresionFacturaClienteTerpel(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorIvaImpresionFacturaClienteTerpel", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorIvaImpresionFacturaClienteTerpel", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarValorIvaImpresionFacturaClienteTerpel(ByVal Recibo As Double, ByVal idEstacion As Int16) As IDataReader

        Try
            Return ODatos.RecuperarValorIvaImpresionFacturaClienteTerpel(Recibo, idEstacion)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorIvaImpresionFacturaClienteTerpel", "IdEstacion: " & IdEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorIvaImpresionFacturaClienteTerpel", "IdEstacion: " & IdEstacion & "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarValorIvaImpresionFacturaId(ByVal IdDocumento As Int64) As IDataReader

        Try
            Return ODatos.RecuperarValorIvaImpresionFacturaId(IdDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorIvaImpresionFacturaId", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorIvaImpresionFacturaId", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarValorIvaImpresionFacturaId(ByVal IdDocumento As Int64, ByVal idEstacion As Int16) As IDataReader

        Try
            Return ODatos.RecuperarValorIvaImpresionFacturaId(IdDocumento, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarValorIvaImpresionFacturaId", "IdEstacion: " & idEstacion & "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarValorIvaImpresionFacturaId", "IdEstacion: " & idEstacion & "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "OperadoresGasocentro PGN"

    Public Sub CrearOperadorGasocentroPGN(ByVal Ruc As String, ByVal Nombre As String, ByVal Codigo As String, ByVal RazonSocial As String, ByVal EsActivo As Boolean)
        Try
            ODatos.CrearOperadorGasocentroPGN(Ruc, Nombre, Codigo, RazonSocial, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CrearOperadorGasocentroPGN", "Ruc: " & Ruc & ", Codigo: " & Codigo & " , RazonSocial: " & RazonSocial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CrearOperadorGasocentroPGN", "Ruc: " & Ruc & ", Codigo: " & Codigo & " , RazonSocial: " & RazonSocial, "FallaStoredProcedure")

            Throw
        End Try
    End Sub


    Public Function RecuperarOperadoresGasocentroPGN(ByVal Ruc As String, ByVal RazonSocial As String, ByVal nombre As String) As DataTable
        Try
            Return ODatos.RecuperarOperadoresGasocentroPGN(Ruc, RazonSocial, nombre)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarOperadoresGasocentroPGN", "Ruc: " & Ruc & " , RazonSocial: " & RazonSocial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarOperadoresGasocentroPGN", "Ruc: " & Ruc & " , RazonSocial: " & RazonSocial, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarGasoCentroPGN(ByVal Ruc As String, ByVal Nombre As String, ByVal Codigo As String, ByVal RazonSocial As String, ByVal IdOperador As Int32, ByVal EsActivo As Boolean)
        Try
            ODatos.ActualizarOperadorGasocentroPGN(Ruc, Nombre, Codigo, RazonSocial, IdOperador, EsActivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CrearOperadorGasocentroPGN", "Ruc: " & Ruc & ", Codigo:  " & Codigo & " , RazonSocial: " & RazonSocial & " , IdOperador: " & IdOperador.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CrearOperadorGasocentroPGN", "Ruc: " & Ruc & ", Codigo:  " & Codigo & " , RazonSocial: " & RazonSocial & " , IdOperador: " & IdOperador.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarVehiculoOperadorPGN(ByVal RazonSocial As String, ByVal Placa As String, ByVal Estado As Boolean)
        Try
            ODatos.InsertarVehiculoOperadorPGN(RazonSocial, Placa, Estado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVehiculoOperadorPGN", "RazonSocial: " & RazonSocial & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVehiculoOperadorPGN", "RazonSocial: " & RazonSocial & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarVehiculosPGN() As DataTable
        Try

            Return ODatos.RecuperarVehiculosPGN()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVehiculos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVehiculos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function





    Public Function RecuperarRazonSocialGasocentroPGN() As DataTable
        Try
            Return ODatos.RecuperarRazonSocialGasocentroPGN()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRazonSocialGasocentroPGN", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRazonSocialGasocentroPGN", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarDatosVehiculoGasoCentroPGN(ByVal IdOperador As Integer, ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarDatosVehiculoGasoCentroPGN(IdOperador, Placa)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoGasoCentroPGN", "IdOperador: " & IdOperador.ToString() & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoGasoCentroPGN", "IdOperador: " & IdOperador.ToString() & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarDatosVehiculoGasoCentroPGN(ByVal Operador As String, ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarDatosVehiculoGasoCentroPGN(Operador, Placa)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoGasoCentroPGN", "Operador: " & Operador & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosVehiculoGasoCentroPGN", "Operador: " & Operador & " , Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function


#End Region


#Region "ComunicadorPGN"
    Public Function RecuperarEstadoEnvioVenta(ByVal Recibo As Int64) As Int32
        Try
            Return ODatos.RecuperarEstadoEnvioVenta(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEstadoEnvioVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEstadoEnvioVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarAnulacionDocumento(ByVal Recibo As Int64, ByVal IdEstadoTransmision As Integer)
        Try
            ODatos.InsertarAnulacionDocumento(Recibo, IdEstadoTransmision)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarAnulacionDocumento", "Recibo: " & Recibo & "IdEstadoTransmision: " & IdEstadoTransmision.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarAnulacionDocumento", "Recibo: " & Recibo & "IdEstadoTransmision: " & IdEstadoTransmision.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstadoTransmisionDeAnulacion(ByVal Recibo As Int64, ByVal IdEstadoTransmision As Integer)
        Try
            ODatos.ActualizarEstadoTransmisionDeAnulacion(Recibo, IdEstadoTransmision)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoTransmisionDeAnulacion", "Recibo: " & Recibo.ToString & "IdEstadoTransmision: " & IdEstadoTransmision.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoTransmisionDeAnulacion", "Recibo: " & Recibo.ToString & "IdEstadoTransmision: " & IdEstadoTransmision.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function RecuperarDocumentosAnuladosPgn() As DataTable
        Try
            Return ODatos.RecuperarDocumentosAnuladosPgn()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDocumentosAnuladosPgn", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDocumentosAnuladosPgn", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoDocumentoAnuladoPGN() As Integer
        Try
            ODatos.RecuperarUltimoDocumentoAnuladoPGN()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoDocumentoAnuladoPGN", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoDocumentoAnuladoPGN", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "EnvioVenta"
    Public Function RecuperarVentaDiariaDetalladaReporte(ByVal FInicial As DateTime, ByVal FFinal As DateTime, ByVal Filtro As Int16) As DataSet
        Try
            Return ODatos.RecuperarVentaDetalladaReporte(FInicial, FFinal, Filtro)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaDiariaDetallada", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaDiariaDetallada", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentaDiariaReporte(ByVal FInicial As DateTime, ByVal FFinal As DateTime, ByVal Filtro As Int16) As DataSet
        Try
            Return ODatos.RecuperarVentaDiariaReporte(FInicial, FFinal, Filtro)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaDiaria", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaDiaria", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentaDiariaPorMangueraReporte(ByVal Fecha As DateTime, ByVal Filtro As Int16) As DataSet
        Try
            Return ODatos.RecuperarVentaDiariaPorMangueraReporte(Fecha, Filtro)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaDiariaPorManguera", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaDiariaPorManguera", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaDiariaPorManguerayTurnoReporte(ByVal FInicial As DateTime, ByVal FFinal As DateTime, ByVal Filtro As Int16) As DataSet
        Try
            Return ODatos.RecuperarVentaDiariaPorManguerayTurnoReporte(FInicial, FFinal, Filtro)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaDiariaPorManguerayTurno", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaDiariaPorManguerayTurno", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentaFidelizadaReporte(ByVal FInicial As DateTime, ByVal FFinal As DateTime, ByVal NumeroTarjeta As String, ByVal Filtro As Int16) As DataSet
        Try
            Return ODatos.RecuperarVentaFidelizadaReporte(FInicial, FFinal, NumeroTarjeta, Filtro)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaFidelizada", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaFidelizada", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentaMensualesReporte(ByVal MesInicial As DateTime, ByVal MEsFinal As DateTime, ByVal Filtro As Int16) As DataSet
        Try
            Return ODatos.RecuperarVentaMensualesReporte(MesInicial, MEsFinal, Filtro)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaMensuales", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaMensuales", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentaClienteReporte(ByVal FInicial As DateTime, ByVal FFinal As DateTime, ByVal Cedula As String) As DataSet
        Try
            Return ODatos.RecuperarVentaClienteReporte(FInicial, FFinal, Cedula)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaCliente", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaCliente", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarVentaVehiculoReporte(ByVal FInicial As DateTime, ByVal FFinal As DateTime, ByVal Placa As String, ByVal Filtro As Int16) As DataSet
        Try
            Return ODatos.RecuperarVentaVehiculoReporte(FInicial, FFinal, Placa, Filtro)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaVehiculo", " ", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaVehiculo", " ", "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub InsertarLecturaGasStation(ByVal IdLectura As Int32, ByVal IdTurno As Int32, ByVal IdManguera As Int16, ByVal ValorInicial As Decimal, ByVal ValorFinal As Decimal)
        Try
            ODatos.InsertarLecturaGasStation(IdLectura, IdTurno, IdManguera, ValorInicial, ValorFinal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarLecturaGasStation", "IdLectura: " & IdLectura, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarLecturaGasStation", "IdLectura: " & IdLectura, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region






    Public Sub ValidarAutorizacionVentaTalonario(ByVal Talonario As String, ByVal Ruc As String, ByVal Placa As String)
        Try
            ODatos.ValidarAutorizacionVentaTalonario(Placa, Ruc, Talonario)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarAutorizacionVentaTalonario", "Talonario: " & Talonario & "Placa: " & Placa & "Ruc: " & Ruc, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarAutorizacionVentaTalonario", "Talonario: " & Talonario & "Placa: " & Placa & "Ruc: " & Ruc, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ValidarFechaMantenimientoPlaca(ByVal Placa As String) As IDataReader
        Try
            Return ODatos.ValidarFechaMantenimientoPlaca(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarFechaMantenimientoPlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarFechaMantenimientoPlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoGerenciamientoAnulado() As Int64
        Try
            Return ODatos.RecuperarUltimoGerenciamientoAnulado()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoGerenciamientoAnulado", "-", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoGerenciamientoAnulado", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    Public Function RecuperarInformacionGerenciamientoAnulado(ByVal IdAutorizaGerenciamiento As Long) As IDataReader
        Try
            Return ODatos.RecuperarInformacionGerenciamientoAnulado(IdAutorizaGerenciamiento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionGerenciamientoAnulado", "IdAutorizaGerenciamiento: " & IdAutorizaGerenciamiento, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionGerenciamientoAnulado", "IdAutorizaGerenciamiento: " & IdAutorizaGerenciamiento, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function


    Public Function RecuperarVentasDurantRecibodeCombustible(ByVal ReciboInicial As Int64, ByVal ReciboFinal As Int64) As DataTable
        Try
            Return ODatos.RecuperarVentasDurantRecibodeCombustible(ReciboInicial, ReciboFinal)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasDurantRecibodeCombustible", "ReciboInicial: " & ReciboInicial.ToString & " , ReciboFinal: " & ReciboFinal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasDurantRecibodeCombustible", "ReciboInicial: " & ReciboInicial.ToString & " , ReciboFinal: " & ReciboFinal, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarIslaImpresora(ByVal idIsla As Int16, ByVal idImpresora As Int32)
        Try
            ODatos.ActualizarIslaImpresora(idIsla, idImpresora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarIslaImpresora", "IDISLA: " & idIsla & " , IdImpresora: " & idImpresora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarIslaImpresora", "IDISLA: " & idIsla & " , IdImpresora: " & idImpresora, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarIslasImpresoras() As DataSet
        Try
            Return ODatos.RecuperarIslasImpresoras()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslasImpresoras", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslasImpresoras", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarIslaImpresora(ByVal idIsla As Int16, ByVal idImpresora As Int32)
        Try
            ODatos.EliminarIslaImpresora(idIsla, idImpresora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarIslaImpresora", "IdIsla: " & idIsla & ", IdImpresora: " & idImpresora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarIslaImpresora", "IdIsla: " & idIsla & ", IdImpresora: " & idImpresora, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ValidarMediosPagosCanatillaGazel() As Boolean
        Try
            Return ODatos.ValidarMediosPagosCanatillaGazel()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarMediosPagosCanatillaGazel", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarMediosPagosCanatillaGazel", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function




    Public Function ValidarMediosPagosAbonoExtraGazel() As Boolean
        Try
            Return ODatos.ValidarMediosPagosAbonoExtraGazel()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarMediosPagosAbonoExtraGazel", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarMediosPagosAbonoExtraGazel", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarFormasPagoAbonoPorTurno(ByVal IdTurno As Int64) As IDataReader
        Try
            Return ODatos.RecuperarFormasPagoAbonoPorTurno(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFormasPagoAbonoPorTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFormasPagoAbonoPorTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarRazonSocialPorNombreRuc(ByVal Razonsocial As String) As DataTable
        Try
            Return ODatos.RecuperarRazonSocialPorNombreRuc(Razonsocial)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRazonSocialPorNombreRuc", "Razonsocial: " & Razonsocial, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRazonSocialPorNombreRuc", "Razonsocial: " & Razonsocial, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarNumeroTurnoHorarioPorIdTurno(ByVal IdTurno As Int32) As Int16
        Try
            Return ODatos.RecuperarNumeroTurnoHorarioPorIdTurno(IdTurno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNumeroTurnoHorarioPorIdTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNumeroTurnoHorarioPorIdTurno", "IdTurno: " & IdTurno, "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

    '#Region "   Recepcion de Productos de Canastilla    "

    '    Public Sub InsertarMovimientoDetalleCostoTmp(ByVal NombreEquipo As String, ByVal Producto As Int16, ByVal Cantidad As Int16, ByVal CodProveedor As String, ByVal Costo As Decimal)
    '        'Crea el objeto base de datos, esto representa la conexion a la base de datos indicada en el archivo de configuracion
    '        Dim DB As Database = DatabaseFactory.CreateDatabase()
    '        'Crea un sqlComand a partir del nombre del procedimiento almacenado
    '        Dim SqlCommand As String = "InsertarMovimientoDetalleCostoTmp"
    '        Dim DatabaseCommand As DbCommand = DB.GetStoredProcCommand(SqlCommand)

    '        DB.AddInParameter(DatabaseCommand, "NomEquipo", DbType.String, NombreEquipo)
    '        DB.AddInParameter(DatabaseCommand, "IdProducto", DbType.Int16, Producto)
    '        DB.AddInParameter(DatabaseCommand, "Cantidad", DbType.Int16, Cantidad)
    '        DB.AddInParameter(DatabaseCommand, "CodProveedor", DbType.String, CodProveedor)
    '        DB.AddInParameter(DatabaseCommand, "Costo", DbType.Decimal, Costo)

    '        Using connection As DbConnection = DB.CreateConnection()
    '            connection.Open()

    '            Try
    '                'Ejecuta el Procedimiento Almacenado
    '                DB.ExecuteNonQuery(DatabaseCommand)
    '            Catch
    '                Throw
    '            Finally
    '                connection.Close()
    '            End Try
    '        End Using
    '    End Sub

    '    Public Function RecuperarProveedores() As DataTable
    '        'Crea el objeto base de datos, esto representa la conexion a la base de datos indicada en el archivo de configuracion
    '        Dim DB As Database = DatabaseFactory.CreateDatabase()
    '        'Crea un sqlComand a partir del nombre del procedimiento almacenado
    '        Dim SqlCommand As String = "RecuperarProveedores"
    '        Dim DatabaseCommand As DbCommand = DB.GetStoredProcCommand(SqlCommand)

    '        Using connection As DbConnection = DB.CreateConnection()
    '            connection.Open()

    '            Try
    '                'Ejecuta el Procedimiento Almacenado
    '                Return DB.ExecuteDataSet(DatabaseCommand).Tables(0)
    '            Catch
    '                Throw
    '            Finally
    '                connection.Close()
    '            End Try
    '        End Using
    '    End Function
    '    Public Function RecuperarProductosProveedor(ByVal Codigo As String) As DataTable
    '        'Crea el objeto base de datos, esto representa la conexion a la base de datos indicada en el archivo de configuracion
    '        Dim DB As Database = DatabaseFactory.CreateDatabase()
    '        'Crea un sqlComand a partir del nombre del procedimiento almacenado
    '        Dim SqlCommand As String = "RecuperarProductosProveedor"
    '        Dim DatabaseCommand As DbCommand = DB.GetStoredProcCommand(SqlCommand)

    '        DB.AddInParameter(DatabaseCommand, "Codigo", DbType.String, Codigo)

    '        Using connection As DbConnection = DB.CreateConnection()
    '            connection.Open()

    '            Try
    '                'Ejecuta el Procedimiento Almacenado
    '                Return DB.ExecuteDataSet(DatabaseCommand).Tables(0)
    '            Catch
    '                Throw
    '            Finally
    '                connection.Close()
    '            End Try
    '        End Using
    '    End Function

    '    Public Sub EliminarMovimientoDetalleCostoTmp(ByVal NombreEquipo As String)
    '        'Crea el objeto base de datos, esto representa la conexion a la base de datos indicada en el archivo de configuracion
    '        Dim DB As Database = DatabaseFactory.CreateDatabase()
    '        'Crea un sqlComand a partir del nombre del procedimiento almacenado
    '        Dim SqlCommand As String = "EliminarMovimientoDetalleCostoTmp"
    '        Dim DatabaseCommand As DbCommand = DB.GetStoredProcCommand(SqlCommand)

    '        DB.AddInParameter(DatabaseCommand, "NombrePC", DbType.String, NombreEquipo)

    '        Using connection As DbConnection = DB.CreateConnection()
    '            connection.Open()

    '            Try
    '                'Ejecuta el Procedimiento Almacenado
    '                DB.ExecuteNonQuery(DatabaseCommand)
    '            Catch
    '                Throw
    '            Finally
    '                connection.Close()
    '            End Try
    '        End Using
    '    End Sub

    '    Public Function InsertarMovimientoCosto(ByVal numeroDocumento As String, ByVal idEstacionOrigen As Int16, ByVal idEstacionDestino As Int16, ByVal idTipoMovimiento As Int32, ByVal observaciones As String, ByVal NombreEquipo As String, ByVal idTipoDocumento As Int32, ByVal EsCombustible As Boolean) As Int32
    '        'Crea el objeto base de datos, esto representa la conexion a la base de datos indicada en el archivo de configuracion
    '        Dim DB As Database = DatabaseFactory.CreateDatabase()
    '        'Crea un sqlComand a partir del nombre del procedimiento almacenado
    '        Dim SqlCommand As String = "InsertarMovimientoCosto"
    '        Dim DatabaseCommand As DbCommand = DB.GetStoredProcCommand(SqlCommand)

    '        DB.AddInParameter(DatabaseCommand, "NumeroDocumento", DbType.String, numeroDocumento)
    '        DB.AddInParameter(DatabaseCommand, "IdEstacionOrigen", DbType.Int16, idEstacionOrigen)
    '        DB.AddInParameter(DatabaseCommand, "IdEstacionDestino", DbType.Int16, idEstacionDestino)
    '        DB.AddInParameter(DatabaseCommand, "IdTipoMovimientoDetalle", DbType.Int32, idTipoMovimiento)
    '        DB.AddInParameter(DatabaseCommand, "Observaciones", DbType.String, observaciones)
    '        DB.AddInParameter(DatabaseCommand, "IdTipoDocumento", DbType.Int32, idTipoDocumento)
    '        DB.AddInParameter(DatabaseCommand, "NomEquipo", DbType.String, NombreEquipo)
    '        DB.AddOutParameter(DatabaseCommand, "IdMovimiento", DbType.Int32, 4)
    '        DB.AddInParameter(DatabaseCommand, "EsCombustible", DbType.Boolean, EsCombustible)

    '        Using connection As DbConnection = DB.CreateConnection()
    '            connection.Open()

    '            Try
    '                'Ejecuta el Procedimiento Almacenado
    '                DB.ExecuteNonQuery(DatabaseCommand)
    '                Return CInt(DB.GetParameterValue(DatabaseCommand, "IdMovimiento"))

    '            Catch Ex As System.Exception
    '                Throw 
    '            Finally
    '                connection.Close()
    '            End Try
    '        End Using
    '    End Function

    '    Public Sub RecuperarValidacionCostoArticulo(ByVal Codigo As String, ByVal ValorUnitario As Decimal)
    '        'Crea el objeto base de datos, esto representa la conexion a la base de datos indicada en el archivo de configuracion
    '        Dim DB As Database = DatabaseFactory.CreateDatabase()
    '        'Crea un sqlComand a partir del nombre del procedimiento almacenado
    '        Dim SqlCommand As String = "RecuperarValidacionCostoArticulo"
    '        Dim DatabaseCommand As DbCommand = DB.GetStoredProcCommand(SqlCommand)

    '        DB.AddInParameter(DatabaseCommand, "Codigo", DbType.String, Codigo)
    '        DB.AddInParameter(DatabaseCommand, "VU", DbType.Decimal, ValorUnitario)

    '        Using connection As DbConnection = DB.CreateConnection()
    '            connection.Open()

    '            Try
    '                'Ejecuta el Procedimiento Almacenado
    '                DB.ExecuteNonQuery(DatabaseCommand)
    '            Catch
    '                Throw
    '            Finally
    '                connection.Close()
    '            End Try
    '        End Using
    '    End Sub
    '#End Region

#Region "   CANASTILLA ELKIN Y MENDOZA  "
    Public Function RecuperarReciboCanastillaPorDocumento(ByVal IdDocumento As Int32) As Int32
        Try
            Return ODatos.RecuperarReciboCanastillaPorDocumento(IdDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboCanastillaPorDocumento", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboCanastillaPorDocumento", "IdDocumento: " & IdDocumento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarConsumoDisponiblePorRestriccion(ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarConsumoDisponiblePorRestriccion(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsumoDisponiblePorRestriccion", "Placa : " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsumoDisponiblePorRestriccion", "Placa : " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarConsumoDisponiblePorRestriccion(ByVal ROM As String, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarConsumoDisponiblePorRestriccion(ROM, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsumoDisponiblePorRestriccion", "IdEstacion: " & idEstacion & "ROM : " & ROM, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsumoDisponiblePorRestriccion", "IdEstacion: " & idEstacion & "ROM : " & ROM, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ManejaContrato(ByVal placa As String) As Boolean
        Try
            Return ODatos.ManejaContrato(placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ManejaContrato", "Placa : " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ManejaContrato", "Placa : " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function ManejaContrato(ByVal placa As String, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.ManejaContrato(placa, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ManejaContrato", "IdEstacion: " & idEstacion & "Placa : " & placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ManejaContrato", "IdEstacion: " & idEstacion & "Placa : " & placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarConsumoDisponiblePorCupo(ByVal placa As String, ByVal Codigo As Integer) As DataSet
        Try
            Return ODatos.RecuperarConsumoDisponiblePorCupo(placa, Codigo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsumoDisponiblePorCupo", "Placa: " & placa & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsumoDisponiblePorCupo", "Placa: " & placa & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarConsumoDisponiblePorCupo(ByVal placa As String, ByVal Codigo As Integer, ByVal idEstacion As Int16) As DataSet
        Try
            Return ODatos.RecuperarConsumoDisponiblePorCupo(placa, Codigo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsumoDisponiblePorCupo", "IdEstacion: " & idEstacion & "Placa: " & placa & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsumoDisponiblePorCupo", "IdEstacion: " & idEstacion & "Placa: " & placa & ", Codigo: " & Codigo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function PoseeRestriccionBasicaActiva(ByVal Placa As String) As Boolean
        Try
            Return ODatos.PoseeRestriccionBasicaActiva(Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "PoseeRestriccionBasicaActiva", "Placa : " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "PoseeRestriccionBasicaActiva", "Placa : " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function PoseeRestriccionBasicaActiva(ByVal ROM As String, ByVal idEstacion As Int16) As Boolean
        Try
            Return ODatos.PoseeRestriccionBasicaActiva(ROM, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "PoseeRestriccionBasicaActiva", "IdEstacion: " & idEstacion & "ROM : " & ROM, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "PoseeRestriccionBasicaActiva", "IdEstacion: " & idEstacion & "ROM : " & ROM, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Descuentos Promocionales por tarjeta    "
    Public Function ValidarInformacionDescuentoPromocion(ByVal CodigoTarjeta As String, ByVal Cantidad As Decimal, ByVal Valor As Decimal) As Long
        Try
            Return ODatos.ValidarInformacionDescuentoPromocion(CodigoTarjeta, Cantidad, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarInformacionDescuentoPromocion", "CodigoTarjeta: " & CodigoTarjeta & ", Cantidad: " & Cantidad.ToString() & ", Valor: " & Valor.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarInformacionDescuentoPromocion", "CodigoTarjeta: " & CodigoTarjeta & ", Cantidad: " & Cantidad.ToString() & ", Valor: " & Valor.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Solicitud de Consecutivo Factura HO     "

    Public Function RecuperarConsecutivoFacturaParaHO(ByVal HostCliente As String) As DataTable
        Try
            Return ODatos.RecuperarConsecutivoFacturaParaHO(HostCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarConsecutivoFacturaParaHO", "HostCliente: " & HostCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarConsecutivoFacturaParaHO", "HostCliente: " & HostCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "   Liberar Cupo en Reserva     "
    Public Sub LiberarCupoenReserva(ByVal Cara As Short, ByVal Placa As String, Optional ByVal idEstacion As Int16 = 0)
        Try
            If idEstacion = 0 Then
                ODatos.LiberarCupoenReserva(Cara, Placa)
            Else
                ODatos.LiberarCupoenReserva(Cara, Placa, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "LiberarCupoenReserva", "Placa: " & Placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "LiberarCupoenReserva", "IdEstacion: " & idEstacion & "Placa: " & Placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "LiberarCupoenReserva", "Placa: " & Placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "LiberarCupoenReserva", "IdEstacion: " & idEstacion & "Placa: " & Placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Sub
#End Region

#Region "  Envio Recibos Contenidos en una Factura de Venta  "
    Public Function RecuperarVentasAsociadasaFactura(ByVal IdDocumento As Int64, ByVal EsCanastilla As Boolean) As DataTable
        Try
            Return ODatos.RecuperarVentasAsociadasaFactura(IdDocumento, EsCanastilla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasAsociadasaFactura", "IdFactura: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasAsociadasaFactura", "IdFactura: " & IdDocumento.ToString(), "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Fidelizacion"
    Public Function ValidarPagoConBonoFidelizacion(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.ValidarPagoConBonoFidelizacion(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarPagoConBonoFidelizacion", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarPagoConBonoFidelizacion", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function ValidarPagoConBonoFidelizacionDirecta(ByVal recibo As Int64) As IDataReader
        Try
            Return ODatos.ValidarPagoConBonoFidelizacionDirecta(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarPagoConBonoFidelizacionDirecta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarPagoConBonoFidelizacionDirecta", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarDocumentoPorRecibo(ByVal recibo As Int64, ByVal TipoDocumentoConsecutivo As Int16)
        Try
            ODatos.InsertarDocumentoPorRecibo(recibo, TipoDocumentoConsecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarDocumentoPorRecibo", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarDocumentoPorRecibo", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarFormaPagoVentaBonoFidelizacion(ByVal recibo As Int64, ByVal valor As Decimal, ByVal nroTarjeta As String, ByVal nroAutorizacion As String)
        Try
            ODatos.ActualizarFormaPagoVentaBonoFidelizacion(recibo, valor, nroTarjeta, nroAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVentaBonoFidelizacion", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVentaBonoFidelizacion", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarFormaPagoVentaBonoFidelizacion(ByVal recibo As Int64, ByVal valor As Decimal, ByVal nroTarjeta As String, ByVal nroAutorizacion As String, ByRef anulado As Int64, ByRef nuevo As Int64)
        Try
            ODatos.ActualizarFormaPagoVentaBonoFidelizacion(recibo, valor, nroTarjeta, nroAutorizacion, anulado, nuevo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVentaBonoFidelizacion", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion & " , Anulado: " & anulado & " , Nuevo: " & nuevo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFormaPagoVentaBonoFidelizacion", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion & " , Anulado: " & anulado & " , Nuevo: " & nuevo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarIntentoFallidoPagoBonoFidelizacion(ByVal recibo As Int64, ByVal valor As Decimal, ByVal nroTarjeta As String, ByVal nroAutorizacion As String)
        Try
            ODatos.InsertarIntentoFallidoPagoBonoFidelizacion(recibo, valor, nroTarjeta, nroAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarIntentoFallidoPagoBonoFidelizacion", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarIntentoFallidoPagoBonoFidelizacion", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarVentaPagaBonoFidelizacion(ByVal recibo As Int64, ByVal valor As Decimal, ByVal nroTarjeta As String, ByVal nroAutorizacion As String)
        Try
            ODatos.ActualizarVentaPagaBonoFidelizacion(recibo, valor, nroTarjeta, nroAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarVentaPagaBonoFidelizacion", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarVentaPagaBonoFidelizacion", "Recibo: " & recibo & ", Valor: " & valor & ", NroTarjeta: " & nroTarjeta & ", NroAutorizacion: " & nroAutorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function ValidarImpresionDescuentoPromocional(ByVal recibo As Int64) As Boolean
        Try
            Return ODatos.ValidarImpresionDescuentoPromocional(recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarImpresionDescuentoPromocional", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarImpresionDescuentoPromocional", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Notificación Autorización Utilizada     "
    Public Function RecuperarAutorizacionUtilizada(ByVal NumeroAutorizacion As String) As IDataReader
        Try
            Return ODatos.RecuperarAutorizacionUtilizada(NumeroAutorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarAutorizacionUtilizada", "NumeroAutorizacion: " & NumeroAutorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarAutorizacionUtilizada", "NumeroAutorizacion: " & NumeroAutorizacion, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region " AUTOSERVICIO "

    Public Function ActivarDesactivarEmpleadoTurno(ByVal idEmpleado As String, ByVal clave As String) As String
        Try
            Return ODatos.ActivarDesactivarEmpleadoTurno(idEmpleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActivarDesactivarEmpleadoTurno", "IdEmpleado: " & idEmpleado & ", Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActivarDesactivarEmpleadoTurno", "IdEmpleado: " & idEmpleado & ", Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionSesionesActivas(ByVal puerto As String) As IDataReader
        Try
            Return ODatos.RecuperarInformacionSesionesActivas(puerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionSesionesActivas", "Puerto: " & puerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionSesionesActivas", "Puerto: " & puerto, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "DB Tuning"
    Public Sub EjecutarReconstruccionIndicesHadi(ByVal tiempoEspera As Integer)
        Try
            ODatos.EjecutarReconstruccionIndicesHadi(tiempoEspera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EjecutarReconstruccionIndicesHadi", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EjecutarReconstruccionIndicesHadi", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EjecutarActualizacionEstadisticasHadi(ByVal tiempoEspera As Integer)
        Try
            ODatos.EjecutarActualizacionEstadisticasHadi(tiempoEspera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EjecutarActualizacionEstadisticasHadi", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EjecutarActualizacionEstadisticasHadi", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EjecutarReconstruccionIndicesMandino(ByVal tiempoEspera As Integer)
        Try
            ODatos.EjecutarReconstruccionIndicesMandino(tiempoEspera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EjecutarReconstruccionIndicesMandino", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EjecutarReconstruccionIndicesMandino", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EjecutarActualizacionEstadisticasMandino(ByVal tiempoEspera As Integer)
        Try
            ODatos.EjecutarActualizacionEstadisticasMandino(tiempoEspera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EjecutarActualizacionEstadisticasMandino", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EjecutarActualizacionEstadisticasMandino", "", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

#End Region


    Public Sub CancelarVentaGerenciada(ByVal cara As Byte)
        Try
            ODatos.CancelarVentaGerenciada(cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CancelarVentaGerenciada", "cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CancelarVentaGerenciada", "cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub CancelarVentaGerenciada(ByVal cara As Byte, ByVal idEstacion As Int16)
        Try
            ODatos.CancelarVentaGerenciada(cara, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CancelarVentaGerenciada", "IdEstacion: " & idEstacion & "cara: " & cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CancelarVentaGerenciada", "IdEstacion: " & idEstacion & "cara: " & cara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

#Region "Mensajes Peru"
    Public Sub InsertarMensajePeru(ByVal idMensaje As Int32, ByVal texto As String, ByVal desde As Date, ByVal hasta As Date, ByVal tipo As Int32, ByVal idCliente As Nullable(Of Int32), ByVal estado As Boolean, ByVal orden As Int32, Optional ByVal Placa As String = Nothing)
        Try
            ODatos.InsertarMensajePeru(idMensaje, texto, desde, hasta, tipo, idCliente, estado, orden, Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarSloganEDSPeru", "idMensaje: " & idMensaje & " , texto: " & texto & " , Desde: " & desde & " , Hasta: " & hasta & " , Tipo: " & tipo & " , Estado: " & estado & " , orden: " & orden, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarSloganEDSPeru", "idMensaje: " & idMensaje & " , texto: " & texto & " , Desde: " & desde & " , Hasta: " & hasta & " , Tipo: " & tipo & " , Estado: " & estado & " , orden: " & orden, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarMensajeEDSPeru(ByVal IdMensaje As Int32)
        Try
            ODatos.EliminarMensajeEDSPeru(IdMensaje)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarMensajeEDSPeru", "IdMensaje: " & IdMensaje, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarMensajeEDSPeru", "IdMensaje: " & IdMensaje, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Function RecuperarRucClienteMensaje(ByVal RUC As String) As DataTable

        Try
            Return ODatos.RecuperarRucClienteMensaje(RUC)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRucClienteMensaje", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRucClienteMensaje", "RUC: " & RUC, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMensajePorCliente(ByVal IdCliente As Int32) As DataTable
        Try
            Return ODatos.RecuperarMensajePorCliente(IdCliente)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajePorCliente", "idCliente: " & IdCliente, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajePorCliente", "idCliente: " & IdCliente, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMensajePorPlaca(ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarMensajePorPlaca(Placa)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajePorPlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajePorPlaca", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoIdMensaje() As Int32
        Try
            Return ODatos.RecuperarUltimoIdMensaje()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoIdMensaje", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoIdMensaje", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMensajePorEstacion() As DataTable
        Try
            Return ODatos.RecuperarMensajePorEstacion()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajePorEstacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajePorEstacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarMensajePorTurnos() As DataTable
        Try
            Return ODatos.RecuperarMensajePorTurnos()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMensajePorTurnos", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMensajePorTurnos", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region


#Region "PromocionesVentaPeruGSTIndependientes"
    Public Sub InsertarPromocionVentaPremio(ByVal IdTipoPromocion As Integer, ByVal NumeroVentas As Int64, ByVal FechaIncio As DateTime, ByVal FechaFin As DateTime, ByVal Estado As Boolean, ByVal Descripcion As String, ByVal Consecutivo As Integer)
        Try
            ODatos.InsertarPromocionVentaPremio(Consecutivo, IdTipoPromocion, NumeroVentas, FechaIncio, FechaFin, Estado, Descripcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPromocionVentaPremio", "IdTipoPromocion: " & IdTipoPromocion.ToString & "NumeroVentas: " & NumeroVentas & "FechaInicio : " & FechaIncio & " FechaFin : " & FechaFin & " Descripcion : " & Descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPromocionVentaPremio", "IdTipoPromocion: " & IdTipoPromocion.ToString & "NumeroVentas: " & NumeroVentas & "FechaInicio : " & FechaIncio & " FechaFin : " & FechaFin & " Descripcion : " & Descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub



    Public Sub InsertarPromocionVentaPremio(ByVal IdTipoPromocion As Integer, ByVal NumeroVentas As Int64, ByVal FechaIncio As DateTime, ByVal FechaFin As DateTime, ByVal Estado As Boolean, ByVal Descripcion As String, ByVal Cantidad As Decimal)
        Try
            ODatos.InsertarPromocionVentaPremio(IdTipoPromocion, NumeroVentas, FechaIncio, FechaFin, Estado, Descripcion, Cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarPromocionVentaPremio", "IdTipoPromocion: " & IdTipoPromocion.ToString & "NumeroVentas: " & NumeroVentas & "FechaInicio : " & FechaIncio & " FechaFin : " & FechaFin & " Descripcion : " & Descripcion & " Cantidad : " & Cantidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarPromocionVentaPremio", "IdTipoPromocion: " & IdTipoPromocion.ToString & "NumeroVentas: " & NumeroVentas & "FechaInicio : " & FechaIncio & " FechaFin : " & FechaFin & " Descripcion : " & Descripcion & " Cantidad : " & Cantidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarTipoPromocionesGST() As DataTable
        Try
            Return ODatos.RecuperarTipoPromocionesGST()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTipoPromocionesGST", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTipoPromocionesGST", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function








    Public Function ValidarPremioPorVentas(ByVal Recibo As Int64) As Boolean
        Try
            Return ODatos.ValidarPremioPorVentas(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarPremioPorVentas", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarPremioPorVentas", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub RedimirVentaPremio(ByVal Recibo As Int64, ByVal Fecha As DateTime)
        Try
            ODatos.RedimirVentaPremio(Recibo, Fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RedimirVentaPremio", "Recibo: " & Recibo & " Fecha: " & Fecha, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RedimirVentaPremio", "Recibo: " & Recibo & " Fecha: " & Fecha, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Public Function RecuperarVentaPremiosPorFecha(ByVal FechaIncial As DateTime, ByVal FechaFinal As DateTime, ByVal Placa As String) As DataTable
        Try
            Return ODatos.RecuperarVentaPremiosPorFecha(FechaIncial, FechaFinal, Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaPremiosPorFecha", " FechaIncial: " & FechaIncial & " FechaFinal : " & FechaFinal & "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaPremiosPorFecha", " FechaIncial: " & FechaIncial & " FechaFinal : " & FechaFinal & "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ActualizarPromocionNV(ByVal IdPromocion As Int32, ByVal NumeroVentas As Int32, ByVal FechaInicio As DateTime, ByVal FechaFin As DateTime, ByVal Estado As Boolean, ByVal Cantidad As Decimal, Optional ByVal Comentario As String = Nothing)
        Try
            ODatos.ActualizarPromocionNV(IdPromocion, NumeroVentas, FechaInicio, FechaFin, Estado, Cantidad, Comentario)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizatPromocionNV", "IdPromocion: " & IdPromocion & " NumeroVentas: " & NumeroVentas & " FechaInicio: " & FechaInicio & " FechaFin: " & FechaFin, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizatPromocionNV", "IdPromocion: " & IdPromocion & " NumeroVentas: " & NumeroVentas & " FechaInicio: " & FechaInicio & " FechaFin: " & FechaFin, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarRedencionNV(ByVal Serie As String, ByVal consecutivo As String, ByVal FechaRedencion As DateTime, Optional ByVal Comentario As String = Nothing)
        Try
            ODatos.InsertarRedencionNV(Serie, consecutivo, FechaRedencion, Comentario)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRedencionNV", "Serie: " & Serie & "consecutivo: " & consecutivo & " FechaRedencion: " & FechaRedencion & " Comentario : " & Comentario, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRedencionNV", "Serie: " & Serie & "consecutivo: " & consecutivo & " FechaRedencion: " & FechaRedencion & " Comentario : " & Comentario, "FallaStoredProcedure")
            Throw
        End Try

    End Sub



    Public Function RecuperarPromocionesNVPeru() As DataTable
        Try
            Return ODatos.RecuperarPromocionesNVPeru()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPromocionesNVPeru", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPromocionesNVPeru", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRedencionesNVPeru() As DataTable
        Try
            Return ODatos.RecuperarRedencionesNVPeru()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRedencionesNVPeru", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRedencionesNVPeru", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarRedencionesNVPeru(ByVal Prefijo As String, ByVal Numero As String) As DataTable
        Try
            Return ODatos.RecuperarRedencionesNVPeru(Prefijo, Numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarRedencionesNVPeru", "Numero: " & Numero & "Prefijo: " & Prefijo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarRedencionesNVPeru", "Numero: " & Numero & "Prefijo: " & Prefijo, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Sub ValidarTanqueoGasocentroCerrado(ByVal Placa As String)
        Try
            ODatos.ValidarTanqueoGasocentroCerrado(Placa)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTanqueoGasocentroCerrado", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTanqueoGasocentroCerrado", "Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarVentaPremiosPorRecibo(ByVal serie As String, ByVal Consecutivo As String) As DataTable
        Try
            Return ODatos.RecuperarVentaPremiosPorRecibo(serie, Consecutivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaPremiosPorRecibo", "serie: " & serie & "Consecutivo: " & Consecutivo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaPremiosPorRecibo", "serie: " & serie & "Consecutivo: " & Consecutivo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentasCredito(ByVal recibo As Nullable(Of Int64), ByVal placa As String, ByVal fecha As DateTime) As DataSet
        Try
            Return ODatos.RecuperarVentasCredito(recibo, placa, fecha)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasCredito", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasCredito", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ModificarKilometrajeVenta(ByVal recibo As Int64, ByVal kilometraje As Int32)
        Try
            ODatos.ModificarKilometrajeVenta(recibo, kilometraje)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ModificarKilometrajeVenta", "recibo: " & recibo & ", kilometraje: " & kilometraje, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ModificarKilometrajeVenta", "recibo: " & recibo & ", kilometraje: " & kilometraje, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub RecalcularPremioVenta(ByVal Recibo As Int64)
        Try
            ODatos.RecalcularPremioVenta(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecalcularPremioVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecalcularPremioVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


    Function RecuperarNumeroVentasNV(ByVal Recibo As Int64) As String
        Try
            Return ODatos.RecuperarNumeroVentasNV(Recibo)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarNumeroVentasNV", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarNumeroVentasNV", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ValidarReciboPorNumeroVentas(ByVal Recibo As Int64) As Boolean
        Try
            ODatos.ValidarReciboPorNumeroVentas(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarReciboPorNumeroVentas", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarReciboPorNumeroVentas", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Usuarios Activos Gazel"
    Public Sub ValidarCredencialesIslero(ByVal Empleado As String, ByVal clave As String)
        Try
            ODatos.ValidarCredencialesIslero(Empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesIslero", "Empleado: " & Empleado & " Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesIslero", "Empleado: " & Empleado & " Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    ''Consulta si el empleado es un administrador
    Public Sub ValidarCredencialesUsuarioAdministrador(ByVal Empleado As String, ByVal clave As String, ByVal IdEstacion As Integer)
        Try
            ODatos.ValidarCredencialesUsuarioAdministrador(Empleado, clave, IdEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesUsuarioAdministrador", "Empleado: " & Empleado & " Clave: " & clave & " IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesUsuarioAdministrador", "Empleado: " & Empleado & " Clave: " & clave & " IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Function ValidarCredencialesUsuarioVentaCreditoManual(ByVal Empleado As String, ByVal clave As String) As Boolean
        Try
            Return ODatos.ValidarCredencialesUsuarioVentaCreditoManual(Empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesUsuarioVentaCreditoManual", "Empleado: " & Empleado & " Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesUsuarioVentaCreditoManual", "Empleado: " & Empleado & " Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub ValidarCredencialesUsuarioAdministrador(ByVal Empleado As String, ByVal clave As String)
        Try
            ODatos.ValidarCredencialesUsuarioAdministrador(Empleado, clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarCredencialesUsuarioAdministrador", "Empleado: " & Empleado & " Clave: " & clave, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarCredencialesUsuarioAdministrador", "Empleado: " & Empleado & " Clave: " & clave, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarIslerosDisponibles() As IDataReader
        Try
            Return ODatos.RecuperarIslerosDisponibles()

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslerosDisponibles", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslerosDisponibles", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIslerosDisponibles(ByVal IdEstacion As Int16) As IDataReader
        Try
            Return ODatos.RecuperarIslerosDisponibles(IdEstacion)

        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslerosDisponibles", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslerosDisponibles", "IdEstacion: " & IdEstacion.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

    Public Function RecuperarPredeterminacionDescuentoPrecio(ByVal Placa As String, ByVal Valor As String, ByVal VentaFidelizada As Boolean) As IDataReader
        Try
            Return ODatos.RecuperarPredeterminacionDescuentoPrecio(Placa, CDec(Valor), VentaFidelizada)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoPrecio", "Placa: " & Placa & "Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoPrecio", "Placa: " & Placa & "Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPredeterminacionDescuentoPrecio(ByVal RUC As String, ByVal Placa As String, ByVal Valor As Decimal) As IDataReader
        Try
            Return ODatos.RecuperarPredeterminacionDescuentoPrecio(RUC, Placa, Valor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoPrecio", "RUC: " & RUC & ", Placa: " & Placa & "Valor: " & Valor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPredeterminacionDescuentoPrecio", "RUC: " & RUC & ", Placa: " & Placa & "Valor: " & Valor, "FallaStoredProcedure")
            Throw
        End Try
    End Function



    Public Function RecuperarTotalOperacionesTurnos(ByVal Turno As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalOperacionesTurnos(Turno)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalOperacionesTurnos", "Turno: " & Turno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalOperacionesTurnos", "Turno: " & Turno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarCaraPorDispositivo(ByVal IdLectorDti As Integer, ByVal PuertoDti As String) As Byte
        Try
            Return ODatos.RecuperarCaraPorDispositivo(IdLectorDti, PuertoDti)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCaraPorDispositivo", "IdLectorDti: " & IdLectorDti.ToString & " PuertoDti:" & PuertoDti, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCaraPorDispositivo", "IdLectorDti: " & IdLectorDti.ToString & " PuertoDti:" & PuertoDti, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarFechaProximoMantenimientoVehiculoImpresion(ByVal Rom As String, ByVal EsLecturaObligatoria As Boolean) As String
        Try
            Return ODatos.RecuperarFechaProximoMantenimientoVehiculoImpresion(Rom, EsLecturaObligatoria)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFechaProximoMantenimientoVehiculoImpresion", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFechaProximoMantenimientoVehiculoImpresion", "Rom: " & Rom, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarPlacaPorIdentificadorVehiculo(ByVal ROM As String, ByVal SolicitaLectura As Boolean) As String
        Try
            Return ODatos.RecuperarPlacaPorIdentificadorVehiculo(ROM, SolicitaLectura)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaPorIdentificadorVehiculo", "ROM: " & ROM, "FallaStoredProcedure")
            Throw
        End Try
    End Function

#Region "Fomplus"

    Public Sub RegistrarInventarioProductoFomplus(ByVal codigoProductoContable As String, ByVal tipoMovimientoContable As String, ByVal numeroPedido As String, ByVal cantidad As Decimal)
        Try
            ODatos.RegistrarInventarioProductoFomplus(codigoProductoContable, tipoMovimientoContable, numeroPedido, cantidad)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RegistrarInventarioProductoFomplus", "Codigo Producto: " & codigoProductoContable & "Tipo Movimiento: " & tipoMovimientoContable & "Numero Pedido: " & numeroPedido & "Cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RegistrarInventarioProductoFomplus", "Codigo Producto: " & codigoProductoContable & "Tipo Movimiento: " & tipoMovimientoContable & "Numero Pedido: " & numeroPedido & "Cantidad: " & cantidad, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "   Mezcladores     "

    Public Function RecuperarMezcladores() As DataTable
        Try
            Return ODatos.RecuperarMezcladores()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMezcladores", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMezcladores", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarMezclador(ByVal Descripcion As String, ByVal Activo As Boolean)
        Try
            ODatos.InsertarMezclador(Descripcion, Activo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMezclador", "Descripcion: " & Descripcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMezclador", "Descripcion: " & Descripcion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarMezclador(ByVal Descripcion As String, ByVal Activo As Boolean, ByVal IdSurtidor As Int16)
        Try
            ODatos.InsertarMezclador(Descripcion, Activo, IdSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMezclador", "Descripcion: " & Descripcion & " IdSurtidor: " & IdSurtidor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMezclador", "Descripcion: " & Descripcion & " IdSurtidor: " & IdSurtidor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMezclador(ByVal IdMezclador As Int16, ByVal Descripcion As String, ByVal Activo As Boolean)
        Try
            ODatos.ActualizarMezclador(IdMezclador, Descripcion, Activo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMezclador", "IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMezclador", "IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarMezclador(ByVal IdMezclador As Int16, ByVal Descripcion As String, ByVal Activo As Boolean, ByVal IdSurtidor As Int16)
        Try
            ODatos.ActualizarMezclador(IdMezclador, Descripcion, Activo, IdSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarMezclador", "IdMezclador: " & IdMezclador & " IdSurtidor: " & IdSurtidor, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarMezclador", "IdMezclador: " & IdMezclador & " IdSurtidor: " & IdSurtidor, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarMezclador(ByVal IdMezclador As Int16)
        Try
            ODatos.EliminarMezclador(IdMezclador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarMezclador", "IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarMezclador", "IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub EliminarRelacionMezcladorTanque(ByVal IdRelacion As Int32)
        Try
            ODatos.EliminarRelacionMezcladorTanque(IdRelacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarRelacionMezcladorTanque", "IdRelacion: " & IdRelacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarRelacionMezcladorTanque", "IdRelacion: " & IdRelacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarRelacionMezclador(ByVal IdRelacion As Int16, ByVal IdMezclador As Int16, ByVal IdTanqueUno As Int16, ByVal PTanqueUno As Decimal, ByVal IdTanqueDos As Int16, ByVal PTanqueDos As Decimal, ByVal IdSurtidor As Int16)
        Try
            ODatos.InsertarRelacionMezclador(IdRelacion, IdMezclador, IdTanqueUno, PTanqueUno, IdTanqueDos, PTanqueDos, IdSurtidor)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRelacionMezclador", "IdRelacion: " & IdRelacion & " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRelacionMezclador", "IdRelacion: " & IdRelacion & " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub InsertarRelacionMezclador(ByVal IdRelacion As Int16, ByVal IdMezclador As Int16, ByVal IdTanqueUno As Int16, ByVal PTanqueUno As Decimal, ByVal IdTanqueDos As Int16, ByVal PTanqueDos As Decimal)
        Try
            ODatos.InsertarRelacionMezclador(IdRelacion, IdMezclador, IdTanqueUno, PTanqueUno, IdTanqueDos, PTanqueDos)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRelacionMezclador", "IdRelacion: " & IdRelacion & " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRelacionMezclador", "IdRelacion: " & IdRelacion & " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperaRelacionMezcladores() As DataTable
        Try
            Return ODatos.RecuperaRelacionMezcladores()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperaRelacionMezcladores", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperaRelacionMezcladores", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarMezcladorManguera(ByVal IdMezclador As Int16, ByVal IdManguera As Int16)
        Try
            ODatos.InsertarMezcladorManguera(IdMezclador, IdManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarMezcladorManguera", "IdManguera: " & IdManguera & " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarMezcladorManguera", "IdManguera: " & IdManguera & " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarMangueraPorIdMezclador(ByVal IdMezclador As Int16) As DataTable
        Try
            Return ODatos.RecuperarMangueraPorIdMezclador(IdMezclador)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMangueraPorIdMezclador", " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMangueraPorIdMezclador", " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarMezcladorManguera() As DataTable
        Try
            Return ODatos.RecuperarMezcladorManguera()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarMezcladorManguera", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarMezcladorManguera", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub EliminarMezcladorManguera(ByVal IdMezclador As Int16, ByVal IdManguera As Int16)
        Try
            ODatos.EliminarMezcladorManguera(IdMezclador, IdManguera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "EliminarMezcladorManguera", "IdManguera: " & IdManguera & " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "EliminarMezcladorManguera", "IdManguera: " & IdManguera & " IdMezclador: " & IdMezclador, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

#End Region

#Region "   Tarjeta Bonos   "
    Public Function ValidarNumeroTarjeta(ByVal Numero As String) As String
        Try
            Return ODatos.ValidarNumeroTarjeta(Numero)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarNumeroTarjeta", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarNumeroTarjeta", "Numero: " & Numero, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Consignacion de Cheques a Transportadoras   "
    Public Function RecuperarChequesConsignar() As DataTable
        Try
            Return ODatos.RecuperarChequesConsignar()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarChequesConsignar", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarChequesConsignar", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Carga Planos Suic   "
    Public Sub InsertarInformacionSuic(ByVal Placa As String, ByVal IdRom As String, ByVal Distribuidora As String,
    ByVal Taller As String, ByVal Certificadora As String, ByVal Convertido As String,
    ByVal UltRevision As String, ByVal ProxRevision As String, ByVal EstadoRom As String,
    ByVal CiudadTaller As String, ByVal Inspector As String, ByVal Archivo As String)
        Try
            ODatos.InsertarInformacionSuic(Placa, IdRom, Distribuidora, Taller, Certificadora, Convertido, UltRevision, ProxRevision, EstadoRom, CiudadTaller, Inspector, Archivo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarInformacionSuic", "Placa: " & Placa & " IdRom: " & IdRom, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarInformacionSuic", "Placa: " & Placa & " IdRom: " & IdRom, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CargarPlanoSuic(ByVal Ruta As String)
        Try
            ODatos.CargarPlanoSuic(Ruta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarPlanoSuic", "Ruta: " & Ruta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarPlanoSuic", "Ruta: " & Ruta, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub CargarPlanoSuic(ByVal Ruta As String, ByVal TiempoEspera As Integer)
        Try
            ODatos.CargarPlanoSuic(Ruta, TiempoEspera)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "CargarPlanoSuic", "Ruta: " & Ruta & "TiempoEspera: " & TiempoEspera.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "CargarPlanoSuic", "Ruta: " & Ruta & "TiempoEspera: " & TiempoEspera.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region



#Region "SREPGN"

    Public Function RecuperarUrlEmpresaPgnSRE(ByVal IdEmpresa As Integer) As String
        Try
            Return ODatos.RecuperarUrlEmpresaPgnSRE(IdEmpresa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUrlEmpresaPgnSRE", "IdEmpresa: " & IdEmpresa.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUrlEmpresaPgnSRE", "IdEmpresa: " & IdEmpresa.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "   Generación de Impresion de Facturar Canastilla  "
    Public Function InsertarFacturaConsolidadaVentaCanastillaTable(ByVal Hora As String) As DataTable
        Try
            Return ODatos.InsertarFacturaConsolidadaVentaCanastillaTable(Hora)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaConsolidadaVentaCanastillaTable", "Hora: " & Hora, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaConsolidadaVentaCanastillaTable", "Hora: " & Hora, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region " Documento Factura Fiscal de Chile "
    Public Function RecuperarEncabezadoDocumentoPorRecibo(ByVal Recibo As Long) As DataTable
        Try
            Return ODatos.RecuperarEncabezadoDocumentoPorRecibo(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarEncabezadoDocumentoPorRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarEncabezadoDocumentoPorRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region " Validar Venta en Curso "

    Public Sub ValidaVentaEnCursoPorCara(ByVal Cara As Short)
        Try
            ODatos.ValidaVentaEnCursoPorCara(Cara)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidaVentaEnCursoPorCara", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidaVentaEnCursoPorCara", "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ValidaVentaEnCursoPorCara(ByVal Cara As Short, ByVal idEstacion As Int16)
        Try
            ODatos.ValidaVentaEnCursoPorCara(Cara, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidaVentaEnCursoPorCara", "IdEstacion: " & idEstacion & "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidaVentaEnCursoPorCara", "IdEstacion: " & idEstacion & "Cara: " & Cara, "FallaStoredProcedure")
            Throw
        End Try
    End Sub


#End Region

#Region "   Cierre de Día   "
    Public Function RecuperarCierrediaPendiente() As Date
        Try
            Return ODatos.RecuperarCierrediaPendiente()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCierrediaPendiente", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCierrediaPendiente", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub GenerarCierredeDia(ByVal Fecha As DateTime, ByVal FechaActual As DateTime)
        Try
            ODatos.GenerarCierredeDia(Fecha, FechaActual)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "GenerarCierredeDia", "Fecha: " & Fecha & ", FechaActual: " & FechaActual, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "GenerarCierredeDia", "Fecha: " & Fecha & ", FechaActual: " & FechaActual, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "   Empleado Medio Identificación    "
    Public Function RecuperarIdentificadoresEmpleado(ByVal IdEmpleado As Int32) As DataTable
        Try
            Return ODatos.RecuperarIdentificadoresEmpleado(IdEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdentificadoresEmpleado", "IdEmpleado: " & IdEmpleado, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdentificadoresEmpleado", "IdEmpleado: " & IdEmpleado, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Sub InsertarIdentificadorEmpleado(ByVal IdEmpleado As Int32, ByVal Identificador As String, ByVal Tipo As Int16, ByVal Activo As Boolean)
        Try
            ODatos.InsertarIdentificadorEmpleado(IdEmpleado, Identificador, Tipo, Activo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarIdentificadorEmpleado", "IdEmpleado: " & IdEmpleado & ", Identificador: " & Identificador & ", Tipo: " & Tipo & ", Activo: " & Activo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarIdentificadorEmpleado", "IdEmpleado: " & IdEmpleado & ", Identificador: " & Identificador & ", Tipo: " & Tipo & ", Activo: " & Activo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Sub ActualizarEstadoIdIdentificador(ByVal IdIdentificador As Int32, ByVal Activo As Boolean)
        Try
            ODatos.ActualizarEstadoIdIdentificador(IdIdentificador, Activo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarEstadoIdIdentificador", "IdIdentificador: " & IdIdentificador & ", Activo: " & Activo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarEstadoIdIdentificador", "IdIdentificador: " & IdIdentificador & ", Activo: " & Activo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "   Descuento Cliente Credito   "
    Public Function AplicaDescuentoClienteCredito(ByVal Placa As String, Optional ByVal idEstacion As Int16 = 0) As Boolean
        Try
            If idEstacion = 0 Then
                Return ODatos.AplicaDescuentoClienteCredito(Placa)
            Else
                Return ODatos.AplicaDescuentoClienteCredito(Placa, idEstacion)
            End If

        Catch ex As SqlClient.SqlException
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "AplicaDescuentoClienteCredito", "Placa: " & Placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "AplicaDescuentoClienteCredito", "IdEsatcion: " & idEstacion & "Placa: " & Placa, "FallaStoredProcedure")
            End If

            Throw
        Catch ex As System.Exception
            If idEstacion = 0 Then
                LogFallas.ReportarError(ex, "AplicaDescuentoClienteCredito", "Placa: " & Placa, "FallaStoredProcedure")
            Else
                LogFallas.ReportarError(ex, "AplicaDescuentoClienteCredito", "IdEsatcion: " & idEstacion & "Placa: " & Placa, "FallaStoredProcedure")
            End If
            Throw
        End Try
    End Function
#End Region

#Region " Impresion de Ventas Fidelizadas   "
    Public Function RecuperarInformacionFidelizacionEmpleadoTurno(ByVal Usuario As String, ByVal Clave As String) As DataTable
        Try
            Return ODatos.RecuperarInformacionFidelizacionEmpleadoTurno(Usuario, Clave)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionFidelizacionEmpleadoTurno", "Placa: " & Usuario, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionFidelizacionEmpleadoTurno", "Usuario: " & Usuario, "FallaStoredProcedure")
            Throw
        End Try
    End Function
    Public Function RecuperarInformacionFidelizacionEmpleadoTurno(ByVal Usuario As String, ByVal Clave As String, ByVal idEstacion As Int16) As DataTable
        Try
            Return ODatos.RecuperarInformacionFidelizacionEmpleadoTurno(Usuario, Clave, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionFidelizacionEmpleadoTurno", "IdEstacion: " & idEstacion & "Placa: " & Usuario, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionFidelizacionEmpleadoTurno", "IdEstacion: " & idEstacion & "Usuario: " & Usuario, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region

#Region "Canastilla FullStation"
    Public Function ValidarVentasCanastillaenIsla(ByVal CodigoProducto As Integer) As Boolean
        Try
            Return ODatos.ValidarVentasCanastillaenIsla(CodigoProducto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVentasCanastillaenIsla", "CodigoProducto:" & CodigoProducto.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVentasCanastillaenIsla", "CodigoProducto:" & CodigoProducto.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ValidarTurnoAbiertoVentaCanastilla(ByVal IdIsla As Integer, ByVal IdEmpleado As String)
        Try
            ODatos.ValidarTurnoAbiertoVentaCanastilla(IdIsla, IdEmpleado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarTurnoAbiertoVentaCanastilla", "IdIsla:" & IdIsla.ToString & "IdEmpleado:" & IdEmpleado.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarTurnoAbiertoVentaCanastilla", "IdIsla:" & IdIsla.ToString & "IdEmpleado:" & IdEmpleado.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "Ajustes por Notas credito desde HO"
    Public Sub RealizarAjustesInventarioPorNotaCredito(ByVal idManguera As Int16, ByVal codigoProducto As Int32, ByVal cantidad As Decimal, ByVal EsAjusteAlta As Boolean, ByVal EsAjusteCanastilla As Boolean)
        Try
            ODatos.RealizarAjustesInventarioPorNotaCredito(idManguera, codigoProducto, cantidad, EsAjusteAlta, EsAjusteCanastilla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RealizarAjustesInventarioPorNotaCredito", "idManguera: " & idManguera & " codigoProducto: " & codigoProducto & " Cantidad: " & cantidad & " EsAjusteAlta: " & EsAjusteAlta & " EsAjusteCanastilla: " & EsAjusteCanastilla, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RealizarAjustesInventarioPorNotaCredito", "idManguera: " & idManguera & " codigoProducto: " & codigoProducto & " Cantidad: " & cantidad & " EsAjusteAlta: " & EsAjusteAlta & " EsAjusteCanastilla: " & EsAjusteCanastilla, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
#End Region

#Region "   FomPlus "
    Public Function InsertarOrdenPedido(ByVal Cedula As String, ByVal Observaciones As String, ByVal Fecha As String, ByVal Items As System.Collections.Generic.Dictionary(Of Int32, String)) As Int64
        Try
            Return ODatos.InsertarOrdenPedido(Cedula, Observaciones, Fecha, Items)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarOrdenPedido", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarOrdenPedido", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

#Region "Nuevos metodos multiestacion"
    Public Sub ActualizarSincronizacion(ByVal tabla As String, ByVal valor As String, ByVal CDC As Integer, ByVal idEstacion As Int32)
        Try
            ODatos.ActualizarSincronizacion(tabla, valor, CDC, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarSincronizacion", "Tabla: " & tabla & " , valor: " & valor & " , " & CDC & " , idestacion " & idEstacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarSincronizacion", "Tabla: " & tabla & " , valor: " & valor & " , " & CDC & " , idestacion " & idEstacion, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarInformacionVentaComunicadorTerpel(ByVal recibo As Int64, ByVal esVentaRegistrada As Boolean, ByVal idEstacion As Int32) As InformacionVenta
        Try
            Return ODatos.RecuperarInformacionVentaComunicadorTerpel(recibo, esVentaRegistrada, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaComunicadorTerpel", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionVentaComunicadorTerpel", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoCheque(ByVal idEstacion As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimoCheque(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoCheque", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoCheque", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionCheque(ByVal IdCheque As Long, ByVal idEstacion As Int32) As DataTable
        Try
            Return ODatos.RecuperarInformacionCheque(IdCheque, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionCheque", "IdCheque: " & IdCheque, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionCheque", "IdCheque: " & IdCheque, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionPago(ByVal pago As Int32, ByVal idEstacion As Int32) As InformacionPago
        Try
            Return ODatos.RecuperarInformacionPago(pago, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionPago", "PAGO: " & pago, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionPago", "PAGO: " & pago, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoPagoExtraordinario(ByVal idEstacion As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimoPagoExtraordinario(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoPagoExtraordinario", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoPagoExtraordinario", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaReversion(ByVal CDC As Int32, ByVal idEstacion As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimaReversion(CDC, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaReversion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaReversion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionReversion(ByVal recibo As Int64, ByVal idEstacion As Int32) As InformacionReversion
        Try
            Return ODatos.RecuperarInformacionReversion(recibo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInformacionReversion", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionReversion", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoGerenciamiento(ByVal idEstacion As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimoGerenciamiento(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoGerenciamiento", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoGerenciamiento", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarInformacionGerenciamientoTerpel(ByVal idGerenciamiento As Long, ByVal idEstacion As Int32) As InformacionGerenciamiento
        Try
            Return ODatos.RecuperarInformacionGerenciamientoTerpel(idGerenciamiento, idEstacion)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInformacionGerenciamientoTerpel", "idGerenciamiento : " & idGerenciamiento, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoIdModificacion(ByVal idEstacion As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimoIdModificacion(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoIdModificacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoIdModificacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarReciboPorIdModificacionVenta(ByVal IdModificacion As Int32, ByVal idEstacion As Int32) As Int64
        Try
            Return ODatos.RecuperarReciboPorIdModificacionVenta(IdModificacion, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorIdModificacionVenta", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorIdModificacionVenta", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaFormaPago(ByVal recibo As Int64, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentaFormaPago(recibo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarGUID(ByVal recibo As Int64, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarGUID(recibo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarGUID", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarGUID", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarRastroCDC(ByVal identificador As Int64, ByVal tipoIdentificador As Char, ByVal falla As String, ByVal idEstacion As Int32)
        Try
            ODatos.InsertarRastroCDC(identificador, tipoIdentificador, falla, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarRastroCDC", "Identificador: " & identificador & ", Tipo Identificador: " & tipoIdentificador & ", Falla: " & falla, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarRastroCDC", "Identificador: " & identificador & ", Tipo Identificador: " & tipoIdentificador & ", Falla: " & falla, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarVentasCanastillaModificadas(ByVal CDC As Int32, ByVal idEstacion As Int32) As DataTable
        Try
            Return ODatos.RecuperarVentasCanastillaModificadas(CDC, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaModificadas", "CDC: " & CDC, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentasCanastillaModificadas", "CDC: " & CDC, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarGUIDCanastilla(ByVal recibo As Int32, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarGUIDCanastilla(recibo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarGUIDCanastilla", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarGUIDCanastilla", "Recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarVentaCanastillaFormaPago(ByVal recibo As Int32, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarVentaCanastillaFormaPago(recibo, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarVentaCanastillaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarVentaCanastillaFormaPago", "recibo: " & recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimaLectura(ByVal CDC As Int32, ByVal idEstacion As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimaLectura(CDC, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimaLectura", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimaLectura", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function TieneStocksTurnoHorario(ByVal IdTurno As Int32, ByVal idEstacion As Int32) As Boolean
        Try
            Return ODatos.TieneStocksTurnoHorario(IdTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "TieneStocksTurnoHorario", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "TieneStocksTurnoHorario", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function FinalizoConsignacionesSobres(ByVal IdTurno As Int32, ByVal idEstacion As Int32) As Boolean
        Try
            Return ODatos.FinalizoConsignacionesSobres(IdTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "FinalizoConsignacionesSobres", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "FinalizoConsignacionesSobres", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarProductosPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int32) As DataSet
        Try
            Return ODatos.RecuperarProductosPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarProductosPorTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarProductosPorTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarLecturasPorMangueraTurno(ByVal idTurno As Int32, ByVal idManguera As Int32, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarLecturasPorMangueraTurno(idTurno, idManguera, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraTurno", "idTurno: " & idTurno & " , IdManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLecturasPorMangueraTurno", "idTurno: " & idTurno & " , IdManguera: " & idManguera, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarCambiosChequeEnTurno(ByVal idTurno As Int32, ByVal idEstacion As Int32) As DataSet
        Try
            Return ODatos.RecuperarCambiosChequeEnTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCambiosChequeEnTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCambiosChequeEnTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimasVariablesMedicionTurno(ByVal idTurno As Int32, ByVal idEstacion As Int32) As DataTable
        Try
            Return ODatos.RecuperarUltimasVariablesMedicionTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimasVariablesMedicionTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimasVariablesMedicionTurno", "IdTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarStockTurno(ByVal idTurno As Int32, ByVal idEstacion As Int32) As DataSet
        Try
            Return ODatos.RecuperarStockTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarStockTurno", "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarStockTurno", "IdTurno:" & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesTurnoFormaPagoProducto(ByVal idTurno As Int32, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesTurnoFormaPagoProducto(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoFormaPagoProducto", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoFormaPagoProducto", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesMediosPagoTurnoTerpel(ByVal idTurno As Int32, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesMediosPagoTurnoTerpel(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoTerpel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoTerpel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesTurnoFormaPagoProductoCanastilla(ByVal idTurno As Int32, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesTurnoFormaPagoProductoCanastilla(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoFormaPagoProductoCanastilla", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoFormaPagoProductoCanastilla", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesComplementariosPorTurno(ByVal idTurno As Int32, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesComplementariosPorTurno(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesComplementariosPorTurno", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarUltimoTurnoTrabajo(ByVal idEstacion As Int32) As Int32
        Try
            Return ODatos.RecuperarUltimoTurnoTrabajo(idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoTrabajo", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarUltimoTurnoTrabajo", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesTurnoTrabajoFormaPagoProducto(ByVal idTurno As Int32, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesTurnoTrabajoFormaPagoProducto(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoTrabajoFormaPagoProducto", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesTurnoTrabajoFormaPagoProducto", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarTotalesMediosPagoTurnoTrabajoTerpel(ByVal idTurno As Int32, ByVal idEstacion As Int32) As IDataReader
        Try
            Return ODatos.RecuperarTotalesMediosPagoTurnoTrabajoTerpel(idTurno, idEstacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoTrabajoTerpel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTotalesMediosPagoTurnoTrabajoTerpel", "idTurno: " & idTurno, "FallaStoredProcedure")
            Throw
        End Try
    End Function
#End Region


#Region "DTI 210"
    <CLSCompliant(False)>
    Public Function RecuperarSiguiente(ByVal Menu As Int16, ByVal Seleccion As Int16) As Siguiente
        Try
            Return ODatos.RecuperarSiguiente(Menu, Seleccion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarSiguiente", "Menu:" & Menu.ToString & "Seleccion: " & Seleccion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarSiguiente", "Menu:" & Menu.ToString & "Seleccion: " & Seleccion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function ExisteMenu(ByVal Menu As Int16, ByVal Seleccion As Int16) As Boolean
        Try
            Return ODatos.ExisteMenu(Menu, Seleccion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ExisteMenu", "Menu:" & Menu.ToString & "Seleccion: " & Seleccion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ExisteMenu", "Menu:" & Menu.ToString & "Seleccion: " & Seleccion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    <CLSCompliant(False)>
    Public Function RecuperarLimitesMenu(ByVal Menu As Int16) As LimiteMenu
        Try
            Return ODatos.RecuperarLimitesMenu(Menu)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarLimitesMenu", "Menu:" & Menu.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarLimitesMenu", "Menu:" & Menu.ToString, "FallaStoredProcedure")
            Throw
        End Try
    End Function


    Public Function RecuperarPaginas() As IDataReader
        Try
            Return ODatos.RecuperarPaginas()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPaginas", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPaginas", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarComandoPorOpcion(ByVal IdMenu As Int32, ByVal Opcion As Int32) As String
        Try
            Return ODatos.RecuperarComandoPorOpcion(IdMenu, Opcion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarComandoPorOpcion", "IdMenu:" & IdMenu.ToString & "Opcion: " & Opcion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarComandoPorOpcion", "IdMenu:" & IdMenu.ToString & "Opcion: " & Opcion, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIdMenuPrincipal() As Integer
        Try
            Return ODatos.RecuperarIdMenuPrincipal()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIdMenuPrincipal", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIdMenuPrincipal", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

    Public Sub RecuperarsaldoDisponiblePorNitYPlaca(ByVal Nit As String, ByVal Placa As String)
        Try
            ODatos.RecuperarsaldoDisponiblePorNitYPlaca(Nit, Placa)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarsaldoDisponiblePorNitYPlaca", "Nit: " & Nit & " ,Placa: " & Placa, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarsaldoDisponiblePorNitYPlaca", "Nit: " & Nit & " ,Placa: " & Placa, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Function RecuperarPlacaPorTarjeta(ByVal Tarjeta As String) As String
        Try
            Return ODatos.RecuperarPlacaPorTarjeta(Tarjeta)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarPlacaPorTarjeta", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPlacaPorTarjeta", "Tarjeta: " & Tarjeta, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function RecuperarIslasImpresoraPrepago() As DataSet
        Try
            Return ODatos.RecuperarIslasImpresoraPrepago()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarIslasImpresoraPrepago", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarIslasImpresoraPrepago", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarIslaImpresoraPrepago(ByVal IdDispositivo As Nullable(Of Int32), ByVal IdIsla As Int32, ByVal IdImpresora As Int32, ByVal IdPuerto As Int32)
        Try
            ODatos.ActualizarIslaImpresoraPrepago(IdDispositivo, IdIsla, IdImpresora, IdPuerto)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarIslaImpresoraPrepago", "IDISLA: " & IdIsla & " , IdImpresora: " & IdImpresora & " , IdPuerto: " & IdPuerto, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarIslaImpresoraPrepago", "IDISLA: " & IdIsla & " , IdImpresora: " & IdImpresora & " , IdPuerto: " & IdPuerto, "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Public Function RecuperarPuertoImpresoraPrepagoPorRecibo(ByVal Recibo As String) As String
        Try
            Return ODatos.RecuperarPuertoImpresoraPrepagoPorRecibo(Recibo)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarPuertoImpresoraPrepagoPorRecibo", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub ActualizarNumeroDeImpresionesEnVenta(ByVal Recibo As Integer)
        Try
            ODatos.ActualizarNumeroDeImpresionesEnVenta(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarNumeroDeImpresionesEnVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarNumeroDeImpresionesEnVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ValidarNumeroDeImpresionesEnVenta(ByVal Recibo As Integer)
        Try
            ODatos.ValidarNumeroDeImpresionesEnVenta(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarNumeroDeImpresionesEnVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarNumeroDeImpresionesEnVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ValidarVigenciaAutorizacionEstacion()
        Try
            ODatos.ValidarVigenciaAutorizacionEstacion()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarVigenciaAutorizacionEstacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarVigenciaAutorizacionEstacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Function RecuperarReciboPorNumeroCara(ByVal Consecutivo As String, ByVal Prefijo As String, ByVal Autorizacion As String) As Int64
        Try
            Return ODatos.RecuperarReciboPorNumeroCara(Consecutivo, Prefijo, Autorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarReciboPorNumeroCara", "Consecutivo: " & Consecutivo & " ,Prefijo: " & Prefijo, "Autorizacion: " & Autorizacion & ", FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarReciboPorNumeroCara", "Consecutivo: " & Consecutivo & " ,Prefijo: " & Prefijo, "Autorizacion: " & Autorizacion & ", FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarFacturaManual(ByVal Prefijo As String, ByVal Numero As String, ByVal SerialImpresora As String, ByVal Recibo As Int64, ByVal RucCliente As String,
                                     ByVal EsAnulado As Boolean, ByVal IdFacturaManual As String, ByVal Pais As String, ByVal NumeroPlaca As String, ByVal Nombre As String,
                                     ByVal Autorizacion As String, ByVal NroModificaciones As Integer, ByVal IdAutorizacionEstacion As Integer, ByVal Dui As String)
        Try
            ODatos.InsertarFacturaManual(Prefijo, Numero, SerialImpresora, Recibo, Numero, CBool(RucCliente), CStr(EsAnulado), IdFacturaManual, Pais, NumeroPlaca, Nombre, CInt(Autorizacion), NroModificaciones, CStr(IdAutorizacionEstacion))
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaManual", "-", "FallaStoredProcedure")
            Throw ex
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaManual", "-", "FallaStoredProcedure")
            Throw ex
        End Try
    End Sub

    Public Sub InsertarClienteFullStation(ByVal IdCliente As Integer, ByVal RazonSocial As String, ByVal RUC As String, ByVal IdClienteEstacion As Int32,
                                                 ByVal Apellido As String, ByVal IdTipoDocumento As Integer)

        Try
            ODatos.InsertarClienteFullStation(IdCliente, RazonSocial, RUC, IdClienteEstacion, Apellido, IdTipoDocumento)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarClienteFullStation", "-", "FallaStoredProcedure")
            Throw New System.Exception
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarClienteFullStation", "-", "FallaStoredProcedure")
        End Try
    End Sub
    Public Sub InsertarVehiculoFullStation(ByVal Placa As String, ByVal IdVehiculoLocal As Integer)
        Try
            ODatos.InsertarVehiculoFullStation(Placa, IdVehiculoLocal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarVehiculoFullStation", "-", "FallaStoredProcedure")
            Throw New System.Exception
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarVehiculoFullStation", "-", "FallaStoredProcedure")
        End Try
    End Sub
    Public Function RecuperarDatosDeFactura(ByVal Recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarDatosDeFactura(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarDatosDeFactura", "Recibo:" & Recibo, "FallaStoredProcedure")
            Throw New System.Exception
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarDatosDeFactura", "Recibo:" & Recibo, "FallaStoredProcedure")
            Throw New System.Exception
        End Try
    End Function

    Public Function RecuperarClienteEnFacturaDeVenta(ByVal Recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarClienteEnFacturaDeVenta(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClienteEnFacturaDeVenta", "Recibo: " & Recibo, "FallaStoredProcedure")
            Throw New System.Exception
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClienteEnFacturaDeVenta", "Recibo:" & Recibo, "FallaStoredProcedure")
            Throw New System.Exception
        End Try
    End Function
    Public Sub ActualizarDatosDelClienteEnFactura(ByVal Recibo As Integer, ByVal IdCliente As Integer, ByVal NumeroDePlaca As String, ByVal Identificacion As String)
        Try
            ODatos.ActualizarDatosDelClienteEnFactura(Recibo, IdCliente, NumeroDePlaca, Identificacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " ActualizarDatosDelClienteEnFactura", "Recibo: " & Recibo & ", IdCliente: " & IdCliente & " , NumeroDePlaca: " & NumeroDePlaca, " Identificacion: " & Identificacion & ", FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " ActualizarDatosDelClienteEnFactura", "Recibo: " & Recibo & ", IdCliente: " & IdCliente & " , NumeroDePlaca: " & NumeroDePlaca, " Identificacion: " & Identificacion & ", FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Sub ActualizarDatosDelVehiculoGerenciado(ByVal Recibo As Integer, ByVal IdVehiculo As Integer, ByVal IdVehiculoLocal As Integer)
        Try
            ODatos.ActualizarDatosDelVehiculoGerenciado(Recibo, IdVehiculo, IdVehiculoLocal)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, " ActualizarDatosDelVehiculoGerenciado", "Recibo: " & Recibo & ", IdVehiculo: " & IdVehiculo & " , IdVehiculoLocal: " & IdVehiculoLocal, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, " ActualizarDatosDelVehiculoGerenciado", "Recibo: " & Recibo & ", IdVehiculo: " & IdVehiculo & " , IdVehiculoLocal: " & IdVehiculoLocal, "FallaStoredProcedure")
            Throw
        End Try
    End Sub
    Public Function RecuperarFacturaPendientesPorEnviar() As IDataReader
        Try
            Return ODatos.RecuperarFacturaPendientesPorEnviar
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaPendientesPorEnviar", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaPendientesPorEnviar", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub InsertarFacturaPendiente(ByVal Recibo As Int64, ByVal Fecha As DateTime, ByVal EsEnviado As Boolean)
        Try
            ODatos.InsertarFacturaPendiente(Recibo, Fecha, EsEnviado)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarFacturaPendiente", "-", "FallaStoredProcedure")
            Throw New System.Exception
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarFacturaPendiente", "-", "FallaStoredProcedure")
        End Try
    End Sub
    Public Sub ActualizarFacturaPendiente(ByVal EsEnviado As Boolean, ByVal Recibo As Int64)
        Try
            ODatos.ActualizarFacturaPendiente(EsEnviado, Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ActualizarFacturaPendiente", "EsEnviado: " & EsEnviado & ",  Recibo: " & Recibo, "FallaStoredProcedure")

            Throw New System.Exception
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ActualizarFacturaPendiente", "EsEnviado: " & EsEnviado & ",  Recibo: " & Recibo, "FallaStoredProcedure")
            Throw New System.Exception
        End Try
    End Sub
    Public Function RecuperarFacturaPendiente(ByVal Recibo As Int64) As IDataReader
        Try
            Return ODatos.RecuperarFacturaPendiente(Recibo)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarFacturaPendiente", "Recibo:" & Recibo, "FallaStoredProcedure")
            Throw New System.Exception
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarFacturaPendiente", "Recibo:" & Recibo, "FallaStoredProcedure")
            Throw New System.Exception
        End Try
    End Function
    Public Sub ValidarNumeroAutorizacionVenta(ByVal Autorizacion As String)
        Try
            ODatos.ValidarNumeroAutorizacionVenta(Autorizacion)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "ValidarNumeroAutorizacionVenta", "Autorizacion: " & Autorizacion, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "ValidarNumeroAutorizacionVenta", "Autorizacion: " & Autorizacion, "FallaStoredProcedure")
        End Try
    End Sub

#Region "Créditos activos"
    Public Function RecuperarClientesCreditosActivos() As DataTable
        Try
            Return ODatos.RecuperarClientesCreditosActivos()
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarClientesCreditosActivosDataTable", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarClientesCreditosActivosDataTable", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Function InsertarClientesCreditosActivosFlota(ByVal Placa As String, ByVal IdCliente As Integer) As Integer
        Try
            Return ODatos.InsertarClientesCreditosActivosFlota(Placa, IdCliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "InsertarClientesCreditosActivos", "", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "InsertarClientesCreditosActivos", "", "FallaStoredProcedure")
            Throw
        End Try
    End Function

#End Region

    Public Function RecuperarCreditosParaRenovacion(ByVal Cliente As String) As DataSet
        Try
            Return ODatos.RecuperarCreditosParaRenovacion(Cliente)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarCreditosParaRenovacion", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarCreditosParaRenovacion", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Function

    Public Sub RenovarCredito(ByVal IdCredito As Int32)
        Try
            ODatos.RenovarCredito(IdCredito)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RenovarCredito", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RenovarCredito", "-", "FallaStoredProcedure")
            Throw
        End Try
    End Sub

    Sub RegistrarInventarioPorTurno(ByVal Turno As Int32, isla As Int32, escierra As Boolean)
        Try
            ODatos.RegistrarInventarioPorTurno(Turno, isla, escierra)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RegistrarInventarioPorTurno", "-", "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RegistrarInventarioPorTurno", "-", "FallaStoredProcedure")
            Throw
        End Try

    End Sub
    Function RecuperarInventarioCanastillaPorTurno(ByVal Turno As Int32, Isla As Int32) As IDataReader
        Try
            Return ODatos.RecuperarInventarioCanastillaPorTurno(Turno, Isla)
        Catch ex As SqlClient.SqlException
            LogFallas.ReportarError(ex, "RecuperarInventarioCanastillaPorTurno", "Turno " & Turno.ToString, "FallaStoredProcedure")
            Throw
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarInventarioCanastillaPorTurno", "Turno " & Turno.ToString, "FallaStoredProcedure")
            Throw
        End Try

    End Function

    Public Function RecuperarTurnoPagoFrecuencias(IdTurno As Integer) As IDataReader
        Try
            Return ODatos.RecuperarTurnoPagoFrecuencias(IdTurno)
        Catch ex As System.Exception
            LogFallas.ReportarError(ex, "RecuperarTurnoPagoFrecuencias", "", "FallaStoredProcedure")
            Throw ex
        End Try
    End Function

End Class

Public Class InformacionVehiculo
    Inherits Fabrica.Disposable

    Private RomAux As String
    Private PlacaAux As String
    Private FechaAux As String
    Private _Autorizado As Boolean
    Private _CausaNegacion As String = ""
    Private _GUIDVenta As String = ""
    Private _Contrato As String
    Private _Formato As FormatoEncriptacion
    Dim _EsFinalizarVentaMonitoreo As Boolean


    Public Property EsFinalizarVentaMonitoreo() As Boolean
        Get
            Return _EsFinalizarVentaMonitoreo
        End Get
        Set(ByVal value As Boolean)
            _EsFinalizarVentaMonitoreo = value
        End Set
    End Property

    Public Property Formato() As FormatoEncriptacion
        Get
            Return _Formato
        End Get
        Set(ByVal value As FormatoEncriptacion)
            _Formato = value
        End Set
    End Property

    Public Property Rom() As String
        Get
            Return (RomAux)
        End Get
        Set(ByVal value As String)
            RomAux = value
        End Set
    End Property
    Public Property Placa() As String
        Get
            Return (PlacaAux)
        End Get
        Set(ByVal value As String)
            PlacaAux = value
        End Set
    End Property
    Public Property Fecha() As String
        Get
            Return FechaAux
        End Get
        Set(ByVal value As String)
            FechaAux = value
        End Set
    End Property

    Public Property Autorizado() As Boolean
        Get
            Return _Autorizado
        End Get
        Set(ByVal value As Boolean)
            _Autorizado = value
        End Set
    End Property

    Public Property CausaNegacion() As String
        Get
            Return _CausaNegacion
        End Get
        Set(ByVal value As String)
            _CausaNegacion = value
        End Set
    End Property

    Public Property Contrato() As String
        Get
            Return _Contrato
        End Get
        Set(ByVal value As String)
            _Contrato = value
        End Set
    End Property

    Property FechaConversion As Date

    Property FechaProximoMantenimiento As Date

    Property Numero As Integer

    Property Serie As String

End Class


Public Class ItemCanastilla
    Inherits POSstation.AccesoDatos.DetalleItem

#Region "   Declaracion de Variables    "
    Private _Codigo As String
    Private _Cantidad As Double
#End Region



    Public Overloads Property Codigo() As String
        Get
            Return _Codigo
        End Get
        Set(ByVal value As String)
            _Codigo = value
        End Set
    End Property

    Public Overloads Property Cantidad() As Double
        Get
            Return _Cantidad
        End Get
        Set(ByVal value As Double)
            _Cantidad = value
        End Set
    End Property

End Class
